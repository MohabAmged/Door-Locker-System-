
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002f34  00002fc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800074  00800074  00002fdc  2**0
                  ALLOC
  3 .stab         000035c4  00000000  00000000  00002fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001699  00000000  00000000  000065a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aa1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b7cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b92c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bbb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c387  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      8a:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 *      Author: marwa
 */
#include "BUZZER.h"

void Buzzer_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,POUTPUT);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>

	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,PLOW);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>

}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:

void Buzzer_on()
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,PHIGH);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>

}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:

void Buzzer_off()
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,PLOW);
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>


}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <main>:

/*******************************************************************************
 *                              MAIN                                           *
 *******************************************************************************/
int main (void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	6a 97       	sbiw	r28, 0x1a	; 26
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
	uint8 Pass_check=FALSE;
     bac:	18 8a       	std	Y+16, r1	; 0x10
	uint8 Pass_count=0;
     bae:	1f 86       	std	Y+15, r1	; 0x0f
	 UART_ConfigType UART_Config= {
			  .bit_data = UART_CHAR8,
			  .parity = UART_PARITY_DISABLE,
			  .stopbit = UART_STOP1,
			  .baudrate = 9600
	 };
     bb0:	ce 01       	movw	r24, r28
     bb2:	41 96       	adiw	r24, 0x11	; 17
     bb4:	9f 8b       	std	Y+23, r25	; 0x17
     bb6:	8e 8b       	std	Y+22, r24	; 0x16
     bb8:	ee e6       	ldi	r30, 0x6E	; 110
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	f9 8f       	std	Y+25, r31	; 0x19
     bbe:	e8 8f       	std	Y+24, r30	; 0x18
     bc0:	f5 e0       	ldi	r31, 0x05	; 5
     bc2:	fa 8f       	std	Y+26, r31	; 0x1a
     bc4:	e8 8d       	ldd	r30, Y+24	; 0x18
     bc6:	f9 8d       	ldd	r31, Y+25	; 0x19
     bc8:	00 80       	ld	r0, Z
     bca:	88 8d       	ldd	r24, Y+24	; 0x18
     bcc:	99 8d       	ldd	r25, Y+25	; 0x19
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	99 8f       	std	Y+25, r25	; 0x19
     bd2:	88 8f       	std	Y+24, r24	; 0x18
     bd4:	ee 89       	ldd	r30, Y+22	; 0x16
     bd6:	ff 89       	ldd	r31, Y+23	; 0x17
     bd8:	00 82       	st	Z, r0
     bda:	8e 89       	ldd	r24, Y+22	; 0x16
     bdc:	9f 89       	ldd	r25, Y+23	; 0x17
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	9f 8b       	std	Y+23, r25	; 0x17
     be2:	8e 8b       	std	Y+22, r24	; 0x16
     be4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     be6:	91 50       	subi	r25, 0x01	; 1
     be8:	9a 8f       	std	Y+26, r25	; 0x1a
     bea:	ea 8d       	ldd	r30, Y+26	; 0x1a
     bec:	ee 23       	and	r30, r30
     bee:	51 f7       	brne	.-44     	; 0xbc4 <main+0x2c>


	 /* LCD Init */
	 LCD_Init();
     bf0:	0e 94 9a 10 	call	0x2134	; 0x2134 <LCD_Init>

	 /*UART Init */
	 UART_init(&UART_Config);
     bf4:	ce 01       	movw	r24, r28
     bf6:	41 96       	adiw	r24, 0x11	; 17
     bf8:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <UART_init>
	 GPIO_setupPinDirection(PORTIDD, 0, PINPUT);
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>
	 GPIO_setupPinDirection(PORTIDD, 1, POUTPUT);
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	41 e0       	ldi	r20, 0x01	; 1
     c0c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>

	 /* Timer Init */
	Func_ptr=Timer1_CallBack;
     c10:	80 e1       	ldi	r24, 0x10	; 16
     c12:	9a e0       	ldi	r25, 0x0A	; 10
     c14:	90 93 78 00 	sts	0x0078, r25
     c18:	80 93 77 00 	sts	0x0077, r24
	Timer1_setCallBack(Func_ptr);
     c1c:	80 91 77 00 	lds	r24, 0x0077
     c20:	90 91 78 00 	lds	r25, 0x0078
     c24:	0e 94 9f 13 	call	0x273e	; 0x273e <Timer1_setCallBack>

	/* Dc Motor Init */
	DcMotor_Init();
     c28:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <DcMotor_Init>


    /* TWI init */
	TWI_init();
     c2c:	0e 94 75 15 	call	0x2aea	; 0x2aea <TWI_init>
	GPIO_setupPortDirection(PORTIDC, PORTOUT);
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	6f ef       	ldi	r22, 0xFF	; 255
     c34:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPortDirection>


	/* Enable Interrupt*/
   SET_BIT(SREG,7);
     c38:	af e5       	ldi	r26, 0x5F	; 95
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	ef e5       	ldi	r30, 0x5F	; 95
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	80 68       	ori	r24, 0x80	; 128
     c44:	8c 93       	st	X, r24
     c46:	04 c0       	rjmp	.+8      	; 0xc50 <main+0xb8>
	while(1)
	{

		while(System_State==0)
		{
			System_State=change_pass();
     c48:	0e 94 da 06 	call	0xdb4	; 0xdb4 <change_pass>
     c4c:	80 93 74 00 	sts	0x0074, r24
   SET_BIT(SREG,7);

	while(1)
	{

		while(System_State==0)
     c50:	80 91 74 00 	lds	r24, 0x0074
     c54:	88 23       	and	r24, r24
     c56:	c1 f3       	breq	.-16     	; 0xc48 <main+0xb0>
     c58:	a7 c0       	rjmp	.+334    	; 0xda8 <main+0x210>



		while(System_State == 1)
		{
			State=UART_recieveByte();
     c5a:	0e 94 76 16 	call	0x2cec	; 0x2cec <UART_recieveByte>
     c5e:	80 93 76 00 	sts	0x0076, r24
        	Pass_count=0;
     c62:	1f 86       	std	Y+15, r1	; 0x0f
     c64:	87 c0       	rjmp	.+270    	; 0xd74 <main+0x1dc>
			while(Pass_count<3)
			{
			Pass_check = check_pass();
     c66:	0e 94 af 0b 	call	0x175e	; 0x175e <check_pass>
     c6a:	88 8b       	std	Y+16, r24	; 0x10

	        if(Pass_count>=2 && Pass_check== FALSE)
     c6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	28 f0       	brcs	.+10     	; 0xc7c <main+0xe4>
     c72:	88 89       	ldd	r24, Y+16	; 0x10
     c74:	88 23       	and	r24, r24
     c76:	11 f4       	brne	.+4      	; 0xc7c <main+0xe4>
	        {
	        	Pass_check = ALARM;
     c78:	88 e0       	ldi	r24, 0x08	; 8
     c7a:	88 8b       	std	Y+16, r24	; 0x10
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 ea       	ldi	r26, 0xA0	; 160
     c82:	b1 e4       	ldi	r27, 0x41	; 65
     c84:	8b 87       	std	Y+11, r24	; 0x0b
     c86:	9c 87       	std	Y+12, r25	; 0x0c
     c88:	ad 87       	std	Y+13, r26	; 0x0d
     c8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     c90:	8d 85       	ldd	r24, Y+13	; 0x0d
     c92:	9e 85       	ldd	r25, Y+14	; 0x0e
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	4a ef       	ldi	r20, 0xFA	; 250
     c9a:	54 e4       	ldi	r21, 0x44	; 68
     c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	8f 83       	std	Y+7, r24	; 0x07
     ca6:	98 87       	std	Y+8, r25	; 0x08
     ca8:	a9 87       	std	Y+9, r26	; 0x09
     caa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cac:	6f 81       	ldd	r22, Y+7	; 0x07
     cae:	78 85       	ldd	r23, Y+8	; 0x08
     cb0:	89 85       	ldd	r24, Y+9	; 0x09
     cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	40 e8       	ldi	r20, 0x80	; 128
     cba:	5f e3       	ldi	r21, 0x3F	; 63
     cbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc0:	88 23       	and	r24, r24
     cc2:	2c f4       	brge	.+10     	; 0xcce <main+0x136>
		__ticks = 1;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	9e 83       	std	Y+6, r25	; 0x06
     cca:	8d 83       	std	Y+5, r24	; 0x05
     ccc:	3f c0       	rjmp	.+126    	; 0xd4c <main+0x1b4>
	else if (__tmp > 65535)
     cce:	6f 81       	ldd	r22, Y+7	; 0x07
     cd0:	78 85       	ldd	r23, Y+8	; 0x08
     cd2:	89 85       	ldd	r24, Y+9	; 0x09
     cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	3f ef       	ldi	r19, 0xFF	; 255
     cda:	4f e7       	ldi	r20, 0x7F	; 127
     cdc:	57 e4       	ldi	r21, 0x47	; 71
     cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ce2:	18 16       	cp	r1, r24
     ce4:	4c f5       	brge	.+82     	; 0xd38 <main+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
     cea:	8d 85       	ldd	r24, Y+13	; 0x0d
     cec:	9e 85       	ldd	r25, Y+14	; 0x0e
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e2       	ldi	r20, 0x20	; 32
     cf4:	51 e4       	ldi	r21, 0x41	; 65
     cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	bc 01       	movw	r22, r24
     d00:	cd 01       	movw	r24, r26
     d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	0f c0       	rjmp	.+30     	; 0xd2e <main+0x196>
     d10:	88 ec       	ldi	r24, 0xC8	; 200
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9c 83       	std	Y+4, r25	; 0x04
     d16:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	9c 81       	ldd	r25, Y+4	; 0x04
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	f1 f7       	brne	.-4      	; 0xd1c <main+0x184>
     d20:	9c 83       	std	Y+4, r25	; 0x04
     d22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
     d26:	9e 81       	ldd	r25, Y+6	; 0x06
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	9e 83       	std	Y+6, r25	; 0x06
     d2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	69 f7       	brne	.-38     	; 0xd10 <main+0x178>
     d36:	14 c0       	rjmp	.+40     	; 0xd60 <main+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d38:	6f 81       	ldd	r22, Y+7	; 0x07
     d3a:	78 85       	ldd	r23, Y+8	; 0x08
     d3c:	89 85       	ldd	r24, Y+9	; 0x09
     d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	9e 83       	std	Y+6, r25	; 0x06
     d4a:	8d 83       	std	Y+5, r24	; 0x05
     d4c:	8d 81       	ldd	r24, Y+5	; 0x05
     d4e:	9e 81       	ldd	r25, Y+6	; 0x06
     d50:	9a 83       	std	Y+2, r25	; 0x02
     d52:	89 83       	std	Y+1, r24	; 0x01
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <main+0x1c0>
     d5c:	9a 83       	std	Y+2, r25	; 0x02
     d5e:	89 83       	std	Y+1, r24	; 0x01

	        }
	        _delay_ms(20);
			UART_sendByte(Pass_check+'0');
     d60:	88 89       	ldd	r24, Y+16	; 0x10
     d62:	80 5d       	subi	r24, 0xD0	; 208
     d64:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <UART_sendByte>

			 if(Pass_check == TRUE)
     d68:	88 89       	ldd	r24, Y+16	; 0x10
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	39 f0       	breq	.+14     	; 0xd7c <main+0x1e4>
			 {
				 break;
			 }

             Pass_count++;
     d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d70:	8f 5f       	subi	r24, 0xFF	; 255
     d72:	8f 87       	std	Y+15, r24	; 0x0f

		while(System_State == 1)
		{
			State=UART_recieveByte();
        	Pass_count=0;
			while(Pass_count<3)
     d74:	8f 85       	ldd	r24, Y+15	; 0x0f
     d76:	83 30       	cpi	r24, 0x03	; 3
     d78:	08 f4       	brcc	.+2      	; 0xd7c <main+0x1e4>
     d7a:	75 cf       	rjmp	.-278    	; 0xc66 <main+0xce>

             Pass_count++;

			}

	        if(Pass_check == ALARM)
     d7c:	88 89       	ldd	r24, Y+16	; 0x10
     d7e:	88 30       	cpi	r24, 0x08	; 8
     d80:	31 f4       	brne	.+12     	; 0xd8e <main+0x1f6>
	            {
	                Alarm_func();
     d82:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Alarm_func>
	                System_State=1;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	80 93 74 00 	sts	0x0074, r24
     d8c:	61 cf       	rjmp	.-318    	; 0xc50 <main+0xb8>
	            	break;
	            }
            if(State == 0)
     d8e:	80 91 76 00 	lds	r24, 0x0076
     d92:	88 23       	and	r24, r24
     d94:	19 f4       	brne	.+6      	; 0xd9c <main+0x204>
            {

            	System_State=0;
     d96:	10 92 74 00 	sts	0x0074, r1
     d9a:	5a cf       	rjmp	.-332    	; 0xc50 <main+0xb8>
            	break;
            }
            else if(State == 1)
     d9c:	80 91 76 00 	lds	r24, 0x0076
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	11 f4       	brne	.+4      	; 0xda8 <main+0x210>
            {
            	Door_func();
     da4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <Door_func>
			System_State=change_pass();
		}



		while(System_State == 1)
     da8:	80 91 74 00 	lds	r24, 0x0074
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	09 f4       	brne	.+2      	; 0xdb2 <main+0x21a>
     db0:	54 cf       	rjmp	.-344    	; 0xc5a <main+0xc2>
     db2:	4e cf       	rjmp	.-356    	; 0xc50 <main+0xb8>

00000db4 <change_pass>:

/*******************************************************************************
 *                              Functions                                      *
 *******************************************************************************/
uint8 change_pass(void)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	ea 97       	sbiw	r28, 0x3a	; 58
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
	uint8 Recieveptr1[7];
	uint8 Recieveptr2[7];
	uint8 check=0;
     dc8:	1b a6       	std	Y+43, r1	; 0x2b
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a0 e2       	ldi	r26, 0x20	; 32
     dd0:	b1 e4       	ldi	r27, 0x41	; 65
     dd2:	8f a3       	std	Y+39, r24	; 0x27
     dd4:	98 a7       	std	Y+40, r25	; 0x28
     dd6:	a9 a7       	std	Y+41, r26	; 0x29
     dd8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dda:	6f a1       	ldd	r22, Y+39	; 0x27
     ddc:	78 a5       	ldd	r23, Y+40	; 0x28
     dde:	89 a5       	ldd	r24, Y+41	; 0x29
     de0:	9a a5       	ldd	r25, Y+42	; 0x2a
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	4a ef       	ldi	r20, 0xFA	; 250
     de8:	54 e4       	ldi	r21, 0x44	; 68
     dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	8b a3       	std	Y+35, r24	; 0x23
     df4:	9c a3       	std	Y+36, r25	; 0x24
     df6:	ad a3       	std	Y+37, r26	; 0x25
     df8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     dfa:	6b a1       	ldd	r22, Y+35	; 0x23
     dfc:	7c a1       	ldd	r23, Y+36	; 0x24
     dfe:	8d a1       	ldd	r24, Y+37	; 0x25
     e00:	9e a1       	ldd	r25, Y+38	; 0x26
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e8       	ldi	r20, 0x80	; 128
     e08:	5f e3       	ldi	r21, 0x3F	; 63
     e0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e0e:	88 23       	and	r24, r24
     e10:	2c f4       	brge	.+10     	; 0xe1c <change_pass+0x68>
		__ticks = 1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	9a a3       	std	Y+34, r25	; 0x22
     e18:	89 a3       	std	Y+33, r24	; 0x21
     e1a:	3f c0       	rjmp	.+126    	; 0xe9a <change_pass+0xe6>
	else if (__tmp > 65535)
     e1c:	6b a1       	ldd	r22, Y+35	; 0x23
     e1e:	7c a1       	ldd	r23, Y+36	; 0x24
     e20:	8d a1       	ldd	r24, Y+37	; 0x25
     e22:	9e a1       	ldd	r25, Y+38	; 0x26
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	3f ef       	ldi	r19, 0xFF	; 255
     e28:	4f e7       	ldi	r20, 0x7F	; 127
     e2a:	57 e4       	ldi	r21, 0x47	; 71
     e2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e30:	18 16       	cp	r1, r24
     e32:	4c f5       	brge	.+82     	; 0xe86 <change_pass+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e34:	6f a1       	ldd	r22, Y+39	; 0x27
     e36:	78 a5       	ldd	r23, Y+40	; 0x28
     e38:	89 a5       	ldd	r24, Y+41	; 0x29
     e3a:	9a a5       	ldd	r25, Y+42	; 0x2a
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e2       	ldi	r20, 0x20	; 32
     e42:	51 e4       	ldi	r21, 0x41	; 65
     e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	bc 01       	movw	r22, r24
     e4e:	cd 01       	movw	r24, r26
     e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9a a3       	std	Y+34, r25	; 0x22
     e5a:	89 a3       	std	Y+33, r24	; 0x21
     e5c:	0f c0       	rjmp	.+30     	; 0xe7c <change_pass+0xc8>
     e5e:	88 ec       	ldi	r24, 0xC8	; 200
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	98 a3       	std	Y+32, r25	; 0x20
     e64:	8f 8f       	std	Y+31, r24	; 0x1f
     e66:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e68:	98 a1       	ldd	r25, Y+32	; 0x20
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <change_pass+0xb6>
     e6e:	98 a3       	std	Y+32, r25	; 0x20
     e70:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e72:	89 a1       	ldd	r24, Y+33	; 0x21
     e74:	9a a1       	ldd	r25, Y+34	; 0x22
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	9a a3       	std	Y+34, r25	; 0x22
     e7a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7c:	89 a1       	ldd	r24, Y+33	; 0x21
     e7e:	9a a1       	ldd	r25, Y+34	; 0x22
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	69 f7       	brne	.-38     	; 0xe5e <change_pass+0xaa>
     e84:	14 c0       	rjmp	.+40     	; 0xeae <change_pass+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e86:	6b a1       	ldd	r22, Y+35	; 0x23
     e88:	7c a1       	ldd	r23, Y+36	; 0x24
     e8a:	8d a1       	ldd	r24, Y+37	; 0x25
     e8c:	9e a1       	ldd	r25, Y+38	; 0x26
     e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	9a a3       	std	Y+34, r25	; 0x22
     e98:	89 a3       	std	Y+33, r24	; 0x21
     e9a:	89 a1       	ldd	r24, Y+33	; 0x21
     e9c:	9a a1       	ldd	r25, Y+34	; 0x22
     e9e:	9e 8f       	std	Y+30, r25	; 0x1e
     ea0:	8d 8f       	std	Y+29, r24	; 0x1d
     ea2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ea4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <change_pass+0xf2>
     eaa:	9e 8f       	std	Y+30, r25	; 0x1e
     eac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	/* Receive the Inputs */
	RecievePass(Recieveptr1);
     eae:	ce 01       	movw	r24, r28
     eb0:	8c 96       	adiw	r24, 0x2c	; 44
     eb2:	0e 94 8a 08 	call	0x1114	; 0x1114 <RecievePass>
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	a0 e2       	ldi	r26, 0x20	; 32
     ebc:	b1 e4       	ldi	r27, 0x41	; 65
     ebe:	89 8f       	std	Y+25, r24	; 0x19
     ec0:	9a 8f       	std	Y+26, r25	; 0x1a
     ec2:	ab 8f       	std	Y+27, r26	; 0x1b
     ec4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec6:	69 8d       	ldd	r22, Y+25	; 0x19
     ec8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ecc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4a ef       	ldi	r20, 0xFA	; 250
     ed4:	54 e4       	ldi	r21, 0x44	; 68
     ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	8d 8b       	std	Y+21, r24	; 0x15
     ee0:	9e 8b       	std	Y+22, r25	; 0x16
     ee2:	af 8b       	std	Y+23, r26	; 0x17
     ee4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ee6:	6d 89       	ldd	r22, Y+21	; 0x15
     ee8:	7e 89       	ldd	r23, Y+22	; 0x16
     eea:	8f 89       	ldd	r24, Y+23	; 0x17
     eec:	98 8d       	ldd	r25, Y+24	; 0x18
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e8       	ldi	r20, 0x80	; 128
     ef4:	5f e3       	ldi	r21, 0x3F	; 63
     ef6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     efa:	88 23       	and	r24, r24
     efc:	2c f4       	brge	.+10     	; 0xf08 <change_pass+0x154>
		__ticks = 1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9c 8b       	std	Y+20, r25	; 0x14
     f04:	8b 8b       	std	Y+19, r24	; 0x13
     f06:	3f c0       	rjmp	.+126    	; 0xf86 <change_pass+0x1d2>
	else if (__tmp > 65535)
     f08:	6d 89       	ldd	r22, Y+21	; 0x15
     f0a:	7e 89       	ldd	r23, Y+22	; 0x16
     f0c:	8f 89       	ldd	r24, Y+23	; 0x17
     f0e:	98 8d       	ldd	r25, Y+24	; 0x18
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	3f ef       	ldi	r19, 0xFF	; 255
     f14:	4f e7       	ldi	r20, 0x7F	; 127
     f16:	57 e4       	ldi	r21, 0x47	; 71
     f18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f1c:	18 16       	cp	r1, r24
     f1e:	4c f5       	brge	.+82     	; 0xf72 <change_pass+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f20:	69 8d       	ldd	r22, Y+25	; 0x19
     f22:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f24:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f26:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e2       	ldi	r20, 0x20	; 32
     f2e:	51 e4       	ldi	r21, 0x41	; 65
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	9c 8b       	std	Y+20, r25	; 0x14
     f46:	8b 8b       	std	Y+19, r24	; 0x13
     f48:	0f c0       	rjmp	.+30     	; 0xf68 <change_pass+0x1b4>
     f4a:	88 ec       	ldi	r24, 0xC8	; 200
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	9a 8b       	std	Y+18, r25	; 0x12
     f50:	89 8b       	std	Y+17, r24	; 0x11
     f52:	89 89       	ldd	r24, Y+17	; 0x11
     f54:	9a 89       	ldd	r25, Y+18	; 0x12
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <change_pass+0x1a2>
     f5a:	9a 8b       	std	Y+18, r25	; 0x12
     f5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5e:	8b 89       	ldd	r24, Y+19	; 0x13
     f60:	9c 89       	ldd	r25, Y+20	; 0x14
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	9c 8b       	std	Y+20, r25	; 0x14
     f66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f68:	8b 89       	ldd	r24, Y+19	; 0x13
     f6a:	9c 89       	ldd	r25, Y+20	; 0x14
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	69 f7       	brne	.-38     	; 0xf4a <change_pass+0x196>
     f70:	14 c0       	rjmp	.+40     	; 0xf9a <change_pass+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f72:	6d 89       	ldd	r22, Y+21	; 0x15
     f74:	7e 89       	ldd	r23, Y+22	; 0x16
     f76:	8f 89       	ldd	r24, Y+23	; 0x17
     f78:	98 8d       	ldd	r25, Y+24	; 0x18
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9c 8b       	std	Y+20, r25	; 0x14
     f84:	8b 8b       	std	Y+19, r24	; 0x13
     f86:	8b 89       	ldd	r24, Y+19	; 0x13
     f88:	9c 89       	ldd	r25, Y+20	; 0x14
     f8a:	98 8b       	std	Y+16, r25	; 0x10
     f8c:	8f 87       	std	Y+15, r24	; 0x0f
     f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f90:	98 89       	ldd	r25, Y+16	; 0x10
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <change_pass+0x1de>
     f96:	98 8b       	std	Y+16, r25	; 0x10
     f98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	RecievePass(Recieveptr2);
     f9a:	ce 01       	movw	r24, r28
     f9c:	c3 96       	adiw	r24, 0x33	; 51
     f9e:	0e 94 8a 08 	call	0x1114	; 0x1114 <RecievePass>
    check=ComparePass(Recieveptr1,Recieveptr2);
     fa2:	ce 01       	movw	r24, r28
     fa4:	8c 96       	adiw	r24, 0x2c	; 44
     fa6:	9e 01       	movw	r18, r28
     fa8:	2d 5c       	subi	r18, 0xCD	; 205
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	b9 01       	movw	r22, r18
     fae:	0e 94 65 08 	call	0x10ca	; 0x10ca <ComparePass>
     fb2:	8b a7       	std	Y+43, r24	; 0x2b
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a0 ea       	ldi	r26, 0xA0	; 160
     fba:	b1 e4       	ldi	r27, 0x41	; 65
     fbc:	8b 87       	std	Y+11, r24	; 0x0b
     fbe:	9c 87       	std	Y+12, r25	; 0x0c
     fc0:	ad 87       	std	Y+13, r26	; 0x0d
     fc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fca:	9e 85       	ldd	r25, Y+14	; 0x0e
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	4a ef       	ldi	r20, 0xFA	; 250
     fd2:	54 e4       	ldi	r21, 0x44	; 68
     fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	8f 83       	std	Y+7, r24	; 0x07
     fde:	98 87       	std	Y+8, r25	; 0x08
     fe0:	a9 87       	std	Y+9, r26	; 0x09
     fe2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe4:	6f 81       	ldd	r22, Y+7	; 0x07
     fe6:	78 85       	ldd	r23, Y+8	; 0x08
     fe8:	89 85       	ldd	r24, Y+9	; 0x09
     fea:	9a 85       	ldd	r25, Y+10	; 0x0a
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e8       	ldi	r20, 0x80	; 128
     ff2:	5f e3       	ldi	r21, 0x3F	; 63
     ff4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	2c f4       	brge	.+10     	; 0x1006 <change_pass+0x252>
		__ticks = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9e 83       	std	Y+6, r25	; 0x06
    1002:	8d 83       	std	Y+5, r24	; 0x05
    1004:	3f c0       	rjmp	.+126    	; 0x1084 <change_pass+0x2d0>
	else if (__tmp > 65535)
    1006:	6f 81       	ldd	r22, Y+7	; 0x07
    1008:	78 85       	ldd	r23, Y+8	; 0x08
    100a:	89 85       	ldd	r24, Y+9	; 0x09
    100c:	9a 85       	ldd	r25, Y+10	; 0x0a
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	3f ef       	ldi	r19, 0xFF	; 255
    1012:	4f e7       	ldi	r20, 0x7F	; 127
    1014:	57 e4       	ldi	r21, 0x47	; 71
    1016:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101a:	18 16       	cp	r1, r24
    101c:	4c f5       	brge	.+82     	; 0x1070 <change_pass+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1020:	7c 85       	ldd	r23, Y+12	; 0x0c
    1022:	8d 85       	ldd	r24, Y+13	; 0x0d
    1024:	9e 85       	ldd	r25, Y+14	; 0x0e
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e2       	ldi	r20, 0x20	; 32
    102c:	51 e4       	ldi	r21, 0x41	; 65
    102e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	9e 83       	std	Y+6, r25	; 0x06
    1044:	8d 83       	std	Y+5, r24	; 0x05
    1046:	0f c0       	rjmp	.+30     	; 0x1066 <change_pass+0x2b2>
    1048:	88 ec       	ldi	r24, 0xC8	; 200
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	9c 83       	std	Y+4, r25	; 0x04
    104e:	8b 83       	std	Y+3, r24	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <change_pass+0x2a0>
    1058:	9c 83       	std	Y+4, r25	; 0x04
    105a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	69 f7       	brne	.-38     	; 0x1048 <change_pass+0x294>
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <change_pass+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1070:	6f 81       	ldd	r22, Y+7	; 0x07
    1072:	78 85       	ldd	r23, Y+8	; 0x08
    1074:	89 85       	ldd	r24, Y+9	; 0x09
    1076:	9a 85       	ldd	r25, Y+10	; 0x0a
    1078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	9e 83       	std	Y+6, r25	; 0x06
    1082:	8d 83       	std	Y+5, r24	; 0x05
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	9a 83       	std	Y+2, r25	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <change_pass+0x2dc>
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(20);
    UART_sendByte(check+'0');
    1098:	8b a5       	ldd	r24, Y+43	; 0x2b
    109a:	80 5d       	subi	r24, 0xD0	; 208
    109c:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <UART_sendByte>
    if(check == TRUE)
    10a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	39 f4       	brne	.+14     	; 0x10b4 <change_pass+0x300>
    {
       EEPROM_SendPass(Recieveptr1);
    10a6:	ce 01       	movw	r24, r28
    10a8:	8c 96       	adiw	r24, 0x2c	; 44
    10aa:	0e 94 9a 08 	call	0x1134	; 0x1134 <EEPROM_SendPass>
       return TRUE;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	8a af       	std	Y+58, r24	; 0x3a
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <change_pass+0x302>
    }
    else
    	return FALSE;
    10b4:	1a ae       	std	Y+58, r1	; 0x3a
    10b6:	8a ad       	ldd	r24, Y+58	; 0x3a


}
    10b8:	ea 96       	adiw	r28, 0x3a	; 58
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <ComparePass>:
uint8 ComparePass(uint8 * str1,uint8 * str2)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <ComparePass+0x6>
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <ComparePass+0x8>
    10d2:	0f 92       	push	r0
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	9b 83       	std	Y+3, r25	; 0x03
    10da:	8a 83       	std	Y+2, r24	; 0x02
    10dc:	7d 83       	std	Y+5, r23	; 0x05
    10de:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Send=0xff;
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	89 83       	std	Y+1, r24	; 0x01
	Send=strcmp(str1,str2);
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	9b 81       	ldd	r25, Y+3	; 0x03
    10e8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ea:	3d 81       	ldd	r19, Y+5	; 0x05
    10ec:	b9 01       	movw	r22, r18
    10ee:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <strcmp>
    10f2:	89 83       	std	Y+1, r24	; 0x01
	if(Send == FALSE)
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	88 23       	and	r24, r24
    10f8:	19 f4       	brne	.+6      	; 0x1100 <ComparePass+0x36>
	{
		Send=TRUE;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <ComparePass+0x38>

      }
	else
    {
		Send=FALSE;
    1100:	19 82       	std	Y+1, r1	; 0x01
		    }
	return Send;
    1102:	89 81       	ldd	r24, Y+1	; 0x01

}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <RecievePass>:

void RecievePass (uint8* str)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <RecievePass+0x6>
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
    UART_receiveString(str);
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <UART_receiveString>
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <EEPROM_SendPass>:


void EEPROM_SendPass(uint8 * ptr )
{ uint8 count=0;
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	61 97       	sbiw	r28, 0x11	; 17
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	99 8b       	std	Y+17, r25	; 0x11
    114a:	88 8b       	std	Y+16, r24	; 0x10
    114c:	1f 86       	std	Y+15, r1	; 0x0f
    114e:	88 c0       	rjmp	.+272    	; 0x1260 <EEPROM_SendPass+0x12c>
       while(ptr[count] != '\0')
       {
    	   EEPROM_writeByte(PASS_EEPROMADDRESS+count,ptr[count]);
    1150:	8f 85       	ldd	r24, Y+15	; 0x0f
    1152:	88 2f       	mov	r24, r24
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	8f 5e       	subi	r24, 0xEF	; 239
    1158:	9c 4f       	sbci	r25, 0xFC	; 252
    115a:	ac 01       	movw	r20, r24
    115c:	8f 85       	ldd	r24, Y+15	; 0x0f
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	88 89       	ldd	r24, Y+16	; 0x10
    1164:	99 89       	ldd	r25, Y+17	; 0x11
    1166:	fc 01       	movw	r30, r24
    1168:	e2 0f       	add	r30, r18
    116a:	f3 1f       	adc	r31, r19
    116c:	20 81       	ld	r18, Z
    116e:	ca 01       	movw	r24, r20
    1170:	62 2f       	mov	r22, r18
    1172:	0e 94 b1 13 	call	0x2762	; 0x2762 <EEPROM_writeByte>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a0 e2       	ldi	r26, 0x20	; 32
    117c:	b1 e4       	ldi	r27, 0x41	; 65
    117e:	8b 87       	std	Y+11, r24	; 0x0b
    1180:	9c 87       	std	Y+12, r25	; 0x0c
    1182:	ad 87       	std	Y+13, r26	; 0x0d
    1184:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1186:	6b 85       	ldd	r22, Y+11	; 0x0b
    1188:	7c 85       	ldd	r23, Y+12	; 0x0c
    118a:	8d 85       	ldd	r24, Y+13	; 0x0d
    118c:	9e 85       	ldd	r25, Y+14	; 0x0e
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	4a ef       	ldi	r20, 0xFA	; 250
    1194:	54 e4       	ldi	r21, 0x44	; 68
    1196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	8f 83       	std	Y+7, r24	; 0x07
    11a0:	98 87       	std	Y+8, r25	; 0x08
    11a2:	a9 87       	std	Y+9, r26	; 0x09
    11a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11a6:	6f 81       	ldd	r22, Y+7	; 0x07
    11a8:	78 85       	ldd	r23, Y+8	; 0x08
    11aa:	89 85       	ldd	r24, Y+9	; 0x09
    11ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e8       	ldi	r20, 0x80	; 128
    11b4:	5f e3       	ldi	r21, 0x3F	; 63
    11b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ba:	88 23       	and	r24, r24
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <EEPROM_SendPass+0x94>
		__ticks = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	9e 83       	std	Y+6, r25	; 0x06
    11c4:	8d 83       	std	Y+5, r24	; 0x05
    11c6:	3f c0       	rjmp	.+126    	; 0x1246 <EEPROM_SendPass+0x112>
	else if (__tmp > 65535)
    11c8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ca:	78 85       	ldd	r23, Y+8	; 0x08
    11cc:	89 85       	ldd	r24, Y+9	; 0x09
    11ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	3f ef       	ldi	r19, 0xFF	; 255
    11d4:	4f e7       	ldi	r20, 0x7F	; 127
    11d6:	57 e4       	ldi	r21, 0x47	; 71
    11d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11dc:	18 16       	cp	r1, r24
    11de:	4c f5       	brge	.+82     	; 0x1232 <EEPROM_SendPass+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e2       	ldi	r20, 0x20	; 32
    11ee:	51 e4       	ldi	r21, 0x41	; 65
    11f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	9e 83       	std	Y+6, r25	; 0x06
    1206:	8d 83       	std	Y+5, r24	; 0x05
    1208:	0f c0       	rjmp	.+30     	; 0x1228 <EEPROM_SendPass+0xf4>
    120a:	88 ec       	ldi	r24, 0xC8	; 200
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	9c 83       	std	Y+4, r25	; 0x04
    1210:	8b 83       	std	Y+3, r24	; 0x03
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	f1 f7       	brne	.-4      	; 0x1216 <EEPROM_SendPass+0xe2>
    121a:	9c 83       	std	Y+4, r25	; 0x04
    121c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121e:	8d 81       	ldd	r24, Y+5	; 0x05
    1220:	9e 81       	ldd	r25, Y+6	; 0x06
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	9e 83       	std	Y+6, r25	; 0x06
    1226:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	9e 81       	ldd	r25, Y+6	; 0x06
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	69 f7       	brne	.-38     	; 0x120a <EEPROM_SendPass+0xd6>
    1230:	14 c0       	rjmp	.+40     	; 0x125a <EEPROM_SendPass+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1232:	6f 81       	ldd	r22, Y+7	; 0x07
    1234:	78 85       	ldd	r23, Y+8	; 0x08
    1236:	89 85       	ldd	r24, Y+9	; 0x09
    1238:	9a 85       	ldd	r25, Y+10	; 0x0a
    123a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	9e 83       	std	Y+6, r25	; 0x06
    1244:	8d 83       	std	Y+5, r24	; 0x05
    1246:	8d 81       	ldd	r24, Y+5	; 0x05
    1248:	9e 81       	ldd	r25, Y+6	; 0x06
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <EEPROM_SendPass+0x11e>
    1256:	9a 83       	std	Y+2, r25	; 0x02
    1258:	89 83       	std	Y+1, r24	; 0x01
    	   _delay_ms(10);
    	   count++;
    125a:	8f 85       	ldd	r24, Y+15	; 0x0f
    125c:	8f 5f       	subi	r24, 0xFF	; 255
    125e:	8f 87       	std	Y+15, r24	; 0x0f
}


void EEPROM_SendPass(uint8 * ptr )
{ uint8 count=0;
       while(ptr[count] != '\0')
    1260:	8f 85       	ldd	r24, Y+15	; 0x0f
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	88 89       	ldd	r24, Y+16	; 0x10
    1268:	99 89       	ldd	r25, Y+17	; 0x11
    126a:	fc 01       	movw	r30, r24
    126c:	e2 0f       	add	r30, r18
    126e:	f3 1f       	adc	r31, r19
    1270:	80 81       	ld	r24, Z
    1272:	88 23       	and	r24, r24
    1274:	09 f0       	breq	.+2      	; 0x1278 <EEPROM_SendPass+0x144>
    1276:	6c cf       	rjmp	.-296    	; 0x1150 <EEPROM_SendPass+0x1c>
       {
    	   EEPROM_writeByte(PASS_EEPROMADDRESS+count,ptr[count]);
    	   _delay_ms(10);
    	   count++;
       }
	   EEPROM_writeByte(PASS_EEPROMADDRESS+count,13);
    1278:	8f 85       	ldd	r24, Y+15	; 0x0f
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	8f 5e       	subi	r24, 0xEF	; 239
    1280:	9c 4f       	sbci	r25, 0xFC	; 252
    1282:	6d e0       	ldi	r22, 0x0D	; 13
    1284:	0e 94 b1 13 	call	0x2762	; 0x2762 <EEPROM_writeByte>

}
    1288:	61 96       	adiw	r28, 0x11	; 17
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <EEPROM_GetPass>:
void EEPROM_GetPass(uint8 * ptr )
{ uint8 count=0;
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	62 97       	sbiw	r28, 0x12	; 18
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	9a 8b       	std	Y+18, r25	; 0x12
    12b0:	89 8b       	std	Y+17, r24	; 0x11
    12b2:	1f 86       	std	Y+15, r1	; 0x0f
  uint8 val;
     EEPROM_readByte(PASS_EEPROMADDRESS+count, &val);
    12b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	8f 5e       	subi	r24, 0xEF	; 239
    12bc:	9c 4f       	sbci	r25, 0xFC	; 252
    12be:	9e 01       	movw	r18, r28
    12c0:	20 5f       	subi	r18, 0xF0	; 240
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	b9 01       	movw	r22, r18
    12c6:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <EEPROM_readByte>
     ptr[count]=val;
    12ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	89 89       	ldd	r24, Y+17	; 0x11
    12d2:	9a 89       	ldd	r25, Y+18	; 0x12
    12d4:	fc 01       	movw	r30, r24
    12d6:	e2 0f       	add	r30, r18
    12d8:	f3 1f       	adc	r31, r19
    12da:	88 89       	ldd	r24, Y+16	; 0x10
    12dc:	80 83       	st	Z, r24
    12de:	8a c0       	rjmp	.+276    	; 0x13f4 <EEPROM_GetPass+0x15a>
      while( val != 13)
       {
     	   count++;
    12e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e2:	8f 5f       	subi	r24, 0xFF	; 255
    12e4:	8f 87       	std	Y+15, r24	; 0x0f
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	a0 e2       	ldi	r26, 0x20	; 32
    12ec:	b1 e4       	ldi	r27, 0x41	; 65
    12ee:	8b 87       	std	Y+11, r24	; 0x0b
    12f0:	9c 87       	std	Y+12, r25	; 0x0c
    12f2:	ad 87       	std	Y+13, r26	; 0x0d
    12f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    12fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	4a ef       	ldi	r20, 0xFA	; 250
    1304:	54 e4       	ldi	r21, 0x44	; 68
    1306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	8f 83       	std	Y+7, r24	; 0x07
    1310:	98 87       	std	Y+8, r25	; 0x08
    1312:	a9 87       	std	Y+9, r26	; 0x09
    1314:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1316:	6f 81       	ldd	r22, Y+7	; 0x07
    1318:	78 85       	ldd	r23, Y+8	; 0x08
    131a:	89 85       	ldd	r24, Y+9	; 0x09
    131c:	9a 85       	ldd	r25, Y+10	; 0x0a
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e8       	ldi	r20, 0x80	; 128
    1324:	5f e3       	ldi	r21, 0x3F	; 63
    1326:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    132a:	88 23       	and	r24, r24
    132c:	2c f4       	brge	.+10     	; 0x1338 <EEPROM_GetPass+0x9e>
		__ticks = 1;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	9e 83       	std	Y+6, r25	; 0x06
    1334:	8d 83       	std	Y+5, r24	; 0x05
    1336:	3f c0       	rjmp	.+126    	; 0x13b6 <EEPROM_GetPass+0x11c>
	else if (__tmp > 65535)
    1338:	6f 81       	ldd	r22, Y+7	; 0x07
    133a:	78 85       	ldd	r23, Y+8	; 0x08
    133c:	89 85       	ldd	r24, Y+9	; 0x09
    133e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	3f ef       	ldi	r19, 0xFF	; 255
    1344:	4f e7       	ldi	r20, 0x7F	; 127
    1346:	57 e4       	ldi	r21, 0x47	; 71
    1348:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    134c:	18 16       	cp	r1, r24
    134e:	4c f5       	brge	.+82     	; 0x13a2 <EEPROM_GetPass+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1350:	6b 85       	ldd	r22, Y+11	; 0x0b
    1352:	7c 85       	ldd	r23, Y+12	; 0x0c
    1354:	8d 85       	ldd	r24, Y+13	; 0x0d
    1356:	9e 85       	ldd	r25, Y+14	; 0x0e
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e2       	ldi	r20, 0x20	; 32
    135e:	51 e4       	ldi	r21, 0x41	; 65
    1360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	bc 01       	movw	r22, r24
    136a:	cd 01       	movw	r24, r26
    136c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	9e 83       	std	Y+6, r25	; 0x06
    1376:	8d 83       	std	Y+5, r24	; 0x05
    1378:	0f c0       	rjmp	.+30     	; 0x1398 <EEPROM_GetPass+0xfe>
    137a:	88 ec       	ldi	r24, 0xC8	; 200
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9c 83       	std	Y+4, r25	; 0x04
    1380:	8b 83       	std	Y+3, r24	; 0x03
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <EEPROM_GetPass+0xec>
    138a:	9c 83       	std	Y+4, r25	; 0x04
    138c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138e:	8d 81       	ldd	r24, Y+5	; 0x05
    1390:	9e 81       	ldd	r25, Y+6	; 0x06
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	9e 83       	std	Y+6, r25	; 0x06
    1396:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1398:	8d 81       	ldd	r24, Y+5	; 0x05
    139a:	9e 81       	ldd	r25, Y+6	; 0x06
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	69 f7       	brne	.-38     	; 0x137a <EEPROM_GetPass+0xe0>
    13a0:	14 c0       	rjmp	.+40     	; 0x13ca <EEPROM_GetPass+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a2:	6f 81       	ldd	r22, Y+7	; 0x07
    13a4:	78 85       	ldd	r23, Y+8	; 0x08
    13a6:	89 85       	ldd	r24, Y+9	; 0x09
    13a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	9e 83       	std	Y+6, r25	; 0x06
    13b4:	8d 83       	std	Y+5, r24	; 0x05
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	9a 83       	std	Y+2, r25	; 0x02
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <EEPROM_GetPass+0x128>
    13c6:	9a 83       	std	Y+2, r25	; 0x02
    13c8:	89 83       	std	Y+1, r24	; 0x01
    	   _delay_ms(10);
    	   EEPROM_readByte(PASS_EEPROMADDRESS+count, &val);
    13ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	8f 5e       	subi	r24, 0xEF	; 239
    13d2:	9c 4f       	sbci	r25, 0xFC	; 252
    13d4:	9e 01       	movw	r18, r28
    13d6:	20 5f       	subi	r18, 0xF0	; 240
    13d8:	3f 4f       	sbci	r19, 0xFF	; 255
    13da:	b9 01       	movw	r22, r18
    13dc:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <EEPROM_readByte>
    	   ptr[count]=val;
    13e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	89 89       	ldd	r24, Y+17	; 0x11
    13e8:	9a 89       	ldd	r25, Y+18	; 0x12
    13ea:	fc 01       	movw	r30, r24
    13ec:	e2 0f       	add	r30, r18
    13ee:	f3 1f       	adc	r31, r19
    13f0:	88 89       	ldd	r24, Y+16	; 0x10
    13f2:	80 83       	st	Z, r24
void EEPROM_GetPass(uint8 * ptr )
{ uint8 count=0;
  uint8 val;
     EEPROM_readByte(PASS_EEPROMADDRESS+count, &val);
     ptr[count]=val;
      while( val != 13)
    13f4:	88 89       	ldd	r24, Y+16	; 0x10
    13f6:	8d 30       	cpi	r24, 0x0D	; 13
    13f8:	09 f0       	breq	.+2      	; 0x13fc <EEPROM_GetPass+0x162>
    13fa:	72 cf       	rjmp	.-284    	; 0x12e0 <EEPROM_GetPass+0x46>
     	   count++;
    	   _delay_ms(10);
    	   EEPROM_readByte(PASS_EEPROMADDRESS+count, &val);
    	   ptr[count]=val;
       }
      ptr[count]='\0';
    13fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	89 89       	ldd	r24, Y+17	; 0x11
    1404:	9a 89       	ldd	r25, Y+18	; 0x12
    1406:	fc 01       	movw	r30, r24
    1408:	e2 0f       	add	r30, r18
    140a:	f3 1f       	adc	r31, r19
    140c:	10 82       	st	Z, r1

}
    140e:	62 96       	adiw	r28, 0x12	; 18
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <Timer1_CallBack>:


void Timer1_CallBack(void)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
	G_Timer_Count++;
    1428:	80 91 75 00 	lds	r24, 0x0075
    142c:	8f 5f       	subi	r24, 0xFF	; 255
    142e:	80 93 75 00 	sts	0x0075, r24
}
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <Door_func>:

void Door_func(void)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	aa 97       	sbiw	r28, 0x2a	; 42
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
	Timer1_init(&TIMER_Config);
    144c:	88 e6       	ldi	r24, 0x68	; 104
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 44 13 	call	0x2688	; 0x2688 <Timer1_init>
	G_Timer_Count=0;
    1454:	10 92 75 00 	sts	0x0075, r1
	DcMotor_Rotate(ClockWise);
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	0e 94 08 0c 	call	0x1810	; 0x1810 <DcMotor_Rotate>
    145e:	72 c0       	rjmp	.+228    	; 0x1544 <Door_func+0x10c>
	while(G_Timer_Count<2)
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 ea       	ldi	r26, 0xA0	; 160
    1466:	b1 e4       	ldi	r27, 0x41	; 65
    1468:	8f a3       	std	Y+39, r24	; 0x27
    146a:	98 a7       	std	Y+40, r25	; 0x28
    146c:	a9 a7       	std	Y+41, r26	; 0x29
    146e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	6f a1       	ldd	r22, Y+39	; 0x27
    1472:	78 a5       	ldd	r23, Y+40	; 0x28
    1474:	89 a5       	ldd	r24, Y+41	; 0x29
    1476:	9a a5       	ldd	r25, Y+42	; 0x2a
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	4a ef       	ldi	r20, 0xFA	; 250
    147e:	54 e4       	ldi	r21, 0x44	; 68
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8b a3       	std	Y+35, r24	; 0x23
    148a:	9c a3       	std	Y+36, r25	; 0x24
    148c:	ad a3       	std	Y+37, r26	; 0x25
    148e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1490:	6b a1       	ldd	r22, Y+35	; 0x23
    1492:	7c a1       	ldd	r23, Y+36	; 0x24
    1494:	8d a1       	ldd	r24, Y+37	; 0x25
    1496:	9e a1       	ldd	r25, Y+38	; 0x26
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <Door_func+0x7a>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9a a3       	std	Y+34, r25	; 0x22
    14ae:	89 a3       	std	Y+33, r24	; 0x21
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <Door_func+0xf8>
	else if (__tmp > 65535)
    14b2:	6b a1       	ldd	r22, Y+35	; 0x23
    14b4:	7c a1       	ldd	r23, Y+36	; 0x24
    14b6:	8d a1       	ldd	r24, Y+37	; 0x25
    14b8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <Door_func+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	6f a1       	ldd	r22, Y+39	; 0x27
    14cc:	78 a5       	ldd	r23, Y+40	; 0x28
    14ce:	89 a5       	ldd	r24, Y+41	; 0x29
    14d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9a a3       	std	Y+34, r25	; 0x22
    14f0:	89 a3       	std	Y+33, r24	; 0x21
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <Door_func+0xda>
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	98 a3       	std	Y+32, r25	; 0x20
    14fa:	8f 8f       	std	Y+31, r24	; 0x1f
    14fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <Door_func+0xc8>
    1504:	98 a3       	std	Y+32, r25	; 0x20
    1506:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	89 a1       	ldd	r24, Y+33	; 0x21
    150a:	9a a1       	ldd	r25, Y+34	; 0x22
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	9a a3       	std	Y+34, r25	; 0x22
    1510:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	89 a1       	ldd	r24, Y+33	; 0x21
    1514:	9a a1       	ldd	r25, Y+34	; 0x22
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f7       	brne	.-38     	; 0x14f4 <Door_func+0xbc>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <Door_func+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	6b a1       	ldd	r22, Y+35	; 0x23
    151e:	7c a1       	ldd	r23, Y+36	; 0x24
    1520:	8d a1       	ldd	r24, Y+37	; 0x25
    1522:	9e a1       	ldd	r25, Y+38	; 0x26
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9a a3       	std	Y+34, r25	; 0x22
    152e:	89 a3       	std	Y+33, r24	; 0x21
    1530:	89 a1       	ldd	r24, Y+33	; 0x21
    1532:	9a a1       	ldd	r25, Y+34	; 0x22
    1534:	9e 8f       	std	Y+30, r25	; 0x1e
    1536:	8d 8f       	std	Y+29, r24	; 0x1d
    1538:	8d 8d       	ldd	r24, Y+29	; 0x1d
    153a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <Door_func+0x104>
    1540:	9e 8f       	std	Y+30, r25	; 0x1e
    1542:	8d 8f       	std	Y+29, r24	; 0x1d
    1544:	80 91 75 00 	lds	r24, 0x0075
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	08 f4       	brcc	.+2      	; 0x154e <Door_func+0x116>
    154c:	89 cf       	rjmp	.-238    	; 0x1460 <Door_func+0x28>
	{
	      _delay_ms(20);
	}

	G_Timer_Count=0;
    154e:	10 92 75 00 	sts	0x0075, r1
	DcMotor_Rotate(Stop);
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	0e 94 08 0c 	call	0x1810	; 0x1810 <DcMotor_Rotate>
    1558:	72 c0       	rjmp	.+228    	; 0x163e <Door_func+0x206>
	while(G_Timer_Count<1)
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a0 ea       	ldi	r26, 0xA0	; 160
    1560:	b1 e4       	ldi	r27, 0x41	; 65
    1562:	89 8f       	std	Y+25, r24	; 0x19
    1564:	9a 8f       	std	Y+26, r25	; 0x1a
    1566:	ab 8f       	std	Y+27, r26	; 0x1b
    1568:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156a:	69 8d       	ldd	r22, Y+25	; 0x19
    156c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    156e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1570:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	4a ef       	ldi	r20, 0xFA	; 250
    1578:	54 e4       	ldi	r21, 0x44	; 68
    157a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	8d 8b       	std	Y+21, r24	; 0x15
    1584:	9e 8b       	std	Y+22, r25	; 0x16
    1586:	af 8b       	std	Y+23, r26	; 0x17
    1588:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    158a:	6d 89       	ldd	r22, Y+21	; 0x15
    158c:	7e 89       	ldd	r23, Y+22	; 0x16
    158e:	8f 89       	ldd	r24, Y+23	; 0x17
    1590:	98 8d       	ldd	r25, Y+24	; 0x18
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e8       	ldi	r20, 0x80	; 128
    1598:	5f e3       	ldi	r21, 0x3F	; 63
    159a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159e:	88 23       	and	r24, r24
    15a0:	2c f4       	brge	.+10     	; 0x15ac <Door_func+0x174>
		__ticks = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9c 8b       	std	Y+20, r25	; 0x14
    15a8:	8b 8b       	std	Y+19, r24	; 0x13
    15aa:	3f c0       	rjmp	.+126    	; 0x162a <Door_func+0x1f2>
	else if (__tmp > 65535)
    15ac:	6d 89       	ldd	r22, Y+21	; 0x15
    15ae:	7e 89       	ldd	r23, Y+22	; 0x16
    15b0:	8f 89       	ldd	r24, Y+23	; 0x17
    15b2:	98 8d       	ldd	r25, Y+24	; 0x18
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	3f ef       	ldi	r19, 0xFF	; 255
    15b8:	4f e7       	ldi	r20, 0x7F	; 127
    15ba:	57 e4       	ldi	r21, 0x47	; 71
    15bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c0:	18 16       	cp	r1, r24
    15c2:	4c f5       	brge	.+82     	; 0x1616 <Door_func+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c4:	69 8d       	ldd	r22, Y+25	; 0x19
    15c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	51 e4       	ldi	r21, 0x41	; 65
    15d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9c 8b       	std	Y+20, r25	; 0x14
    15ea:	8b 8b       	std	Y+19, r24	; 0x13
    15ec:	0f c0       	rjmp	.+30     	; 0x160c <Door_func+0x1d4>
    15ee:	88 ec       	ldi	r24, 0xC8	; 200
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9a 8b       	std	Y+18, r25	; 0x12
    15f4:	89 8b       	std	Y+17, r24	; 0x11
    15f6:	89 89       	ldd	r24, Y+17	; 0x11
    15f8:	9a 89       	ldd	r25, Y+18	; 0x12
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <Door_func+0x1c2>
    15fe:	9a 8b       	std	Y+18, r25	; 0x12
    1600:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1602:	8b 89       	ldd	r24, Y+19	; 0x13
    1604:	9c 89       	ldd	r25, Y+20	; 0x14
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	9c 8b       	std	Y+20, r25	; 0x14
    160a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160c:	8b 89       	ldd	r24, Y+19	; 0x13
    160e:	9c 89       	ldd	r25, Y+20	; 0x14
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	69 f7       	brne	.-38     	; 0x15ee <Door_func+0x1b6>
    1614:	14 c0       	rjmp	.+40     	; 0x163e <Door_func+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1616:	6d 89       	ldd	r22, Y+21	; 0x15
    1618:	7e 89       	ldd	r23, Y+22	; 0x16
    161a:	8f 89       	ldd	r24, Y+23	; 0x17
    161c:	98 8d       	ldd	r25, Y+24	; 0x18
    161e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	9c 8b       	std	Y+20, r25	; 0x14
    1628:	8b 8b       	std	Y+19, r24	; 0x13
    162a:	8b 89       	ldd	r24, Y+19	; 0x13
    162c:	9c 89       	ldd	r25, Y+20	; 0x14
    162e:	98 8b       	std	Y+16, r25	; 0x10
    1630:	8f 87       	std	Y+15, r24	; 0x0f
    1632:	8f 85       	ldd	r24, Y+15	; 0x0f
    1634:	98 89       	ldd	r25, Y+16	; 0x10
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <Door_func+0x1fe>
    163a:	98 8b       	std	Y+16, r25	; 0x10
    163c:	8f 87       	std	Y+15, r24	; 0x0f
    163e:	80 91 75 00 	lds	r24, 0x0075
    1642:	88 23       	and	r24, r24
    1644:	09 f4       	brne	.+2      	; 0x1648 <Door_func+0x210>
    1646:	89 cf       	rjmp	.-238    	; 0x155a <Door_func+0x122>
	{
	      _delay_ms(20);
	}

	G_Timer_Count=0;
    1648:	10 92 75 00 	sts	0x0075, r1
	DcMotor_Rotate(AntiClockWise);
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	0e 94 08 0c 	call	0x1810	; 0x1810 <DcMotor_Rotate>
    1652:	72 c0       	rjmp	.+228    	; 0x1738 <Door_func+0x300>
	while(G_Timer_Count<2)
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a0 ea       	ldi	r26, 0xA0	; 160
    165a:	b1 e4       	ldi	r27, 0x41	; 65
    165c:	8b 87       	std	Y+11, r24	; 0x0b
    165e:	9c 87       	std	Y+12, r25	; 0x0c
    1660:	ad 87       	std	Y+13, r26	; 0x0d
    1662:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1664:	6b 85       	ldd	r22, Y+11	; 0x0b
    1666:	7c 85       	ldd	r23, Y+12	; 0x0c
    1668:	8d 85       	ldd	r24, Y+13	; 0x0d
    166a:	9e 85       	ldd	r25, Y+14	; 0x0e
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	4a ef       	ldi	r20, 0xFA	; 250
    1672:	54 e4       	ldi	r21, 0x44	; 68
    1674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	8f 83       	std	Y+7, r24	; 0x07
    167e:	98 87       	std	Y+8, r25	; 0x08
    1680:	a9 87       	std	Y+9, r26	; 0x09
    1682:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1684:	6f 81       	ldd	r22, Y+7	; 0x07
    1686:	78 85       	ldd	r23, Y+8	; 0x08
    1688:	89 85       	ldd	r24, Y+9	; 0x09
    168a:	9a 85       	ldd	r25, Y+10	; 0x0a
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e8       	ldi	r20, 0x80	; 128
    1692:	5f e3       	ldi	r21, 0x3F	; 63
    1694:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1698:	88 23       	and	r24, r24
    169a:	2c f4       	brge	.+10     	; 0x16a6 <Door_func+0x26e>
		__ticks = 1;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	9e 83       	std	Y+6, r25	; 0x06
    16a2:	8d 83       	std	Y+5, r24	; 0x05
    16a4:	3f c0       	rjmp	.+126    	; 0x1724 <Door_func+0x2ec>
	else if (__tmp > 65535)
    16a6:	6f 81       	ldd	r22, Y+7	; 0x07
    16a8:	78 85       	ldd	r23, Y+8	; 0x08
    16aa:	89 85       	ldd	r24, Y+9	; 0x09
    16ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	3f ef       	ldi	r19, 0xFF	; 255
    16b2:	4f e7       	ldi	r20, 0x7F	; 127
    16b4:	57 e4       	ldi	r21, 0x47	; 71
    16b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ba:	18 16       	cp	r1, r24
    16bc:	4c f5       	brge	.+82     	; 0x1710 <Door_func+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16be:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e2       	ldi	r20, 0x20	; 32
    16cc:	51 e4       	ldi	r21, 0x41	; 65
    16ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	bc 01       	movw	r22, r24
    16d8:	cd 01       	movw	r24, r26
    16da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	9e 83       	std	Y+6, r25	; 0x06
    16e4:	8d 83       	std	Y+5, r24	; 0x05
    16e6:	0f c0       	rjmp	.+30     	; 0x1706 <Door_func+0x2ce>
    16e8:	88 ec       	ldi	r24, 0xC8	; 200
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	9c 83       	std	Y+4, r25	; 0x04
    16ee:	8b 83       	std	Y+3, r24	; 0x03
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <Door_func+0x2bc>
    16f8:	9c 83       	std	Y+4, r25	; 0x04
    16fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	9e 83       	std	Y+6, r25	; 0x06
    1704:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	9e 81       	ldd	r25, Y+6	; 0x06
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	69 f7       	brne	.-38     	; 0x16e8 <Door_func+0x2b0>
    170e:	14 c0       	rjmp	.+40     	; 0x1738 <Door_func+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1710:	6f 81       	ldd	r22, Y+7	; 0x07
    1712:	78 85       	ldd	r23, Y+8	; 0x08
    1714:	89 85       	ldd	r24, Y+9	; 0x09
    1716:	9a 85       	ldd	r25, Y+10	; 0x0a
    1718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	8d 83       	std	Y+5, r24	; 0x05
    1724:	8d 81       	ldd	r24, Y+5	; 0x05
    1726:	9e 81       	ldd	r25, Y+6	; 0x06
    1728:	9a 83       	std	Y+2, r25	; 0x02
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	f1 f7       	brne	.-4      	; 0x1730 <Door_func+0x2f8>
    1734:	9a 83       	std	Y+2, r25	; 0x02
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	80 91 75 00 	lds	r24, 0x0075
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	08 f4       	brcc	.+2      	; 0x1742 <Door_func+0x30a>
    1740:	89 cf       	rjmp	.-238    	; 0x1654 <Door_func+0x21c>
	{
      _delay_ms(20);
	}

	DcMotor_Rotate(Stop);
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	0e 94 08 0c 	call	0x1810	; 0x1810 <DcMotor_Rotate>
    Timer1_deInit();
    1748:	0e 94 87 13 	call	0x270e	; 0x270e <Timer1_deInit>

}
    174c:	aa 96       	adiw	r28, 0x2a	; 42
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <check_pass>:

uint8 check_pass(void)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	2f 97       	sbiw	r28, 0x0f	; 15
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
	uint8 check=0;
    1772:	19 82       	std	Y+1, r1	; 0x01
	uint8 ptr[7];
	uint8 Pass_Compare[7];
	RecievePass(ptr);
    1774:	ce 01       	movw	r24, r28
    1776:	02 96       	adiw	r24, 0x02	; 2
    1778:	0e 94 8a 08 	call	0x1114	; 0x1114 <RecievePass>
	EEPROM_GetPass(Pass_Compare);
    177c:	ce 01       	movw	r24, r28
    177e:	09 96       	adiw	r24, 0x09	; 9
    1780:	0e 94 4d 09 	call	0x129a	; 0x129a <EEPROM_GetPass>
    check=ComparePass(Pass_Compare, ptr);
    1784:	ce 01       	movw	r24, r28
    1786:	09 96       	adiw	r24, 0x09	; 9
    1788:	9e 01       	movw	r18, r28
    178a:	2e 5f       	subi	r18, 0xFE	; 254
    178c:	3f 4f       	sbci	r19, 0xFF	; 255
    178e:	b9 01       	movw	r22, r18
    1790:	0e 94 65 08 	call	0x10ca	; 0x10ca <ComparePass>
    1794:	89 83       	std	Y+1, r24	; 0x01
LCD_MoveCursor(1, 12);
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	6c e0       	ldi	r22, 0x0C	; 12
    179a:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <LCD_MoveCursor>
LCD_DisplayChar(check+'0');
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	80 5d       	subi	r24, 0xD0	; 208
    17a2:	0e 94 36 11 	call	0x226c	; 0x226c <LCD_DisplayChar>
    return check;
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a8:	2f 96       	adiw	r28, 0x0f	; 15
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <Alarm_func>:

void Alarm_func(void)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&TIMER_Config);
    17c2:	88 e6       	ldi	r24, 0x68	; 104
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 44 13 	call	0x2688	; 0x2688 <Timer1_init>
	Buzzer_init();
    17ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	G_Timer_Count=0;
    17ce:	10 92 75 00 	sts	0x0075, r1
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <Alarm_func+0x1e>
	while(G_Timer_Count<2)
	{
		Buzzer_on();
    17d4:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
void Alarm_func(void)
{
	Timer1_init(&TIMER_Config);
	Buzzer_init();
	G_Timer_Count=0;
	while(G_Timer_Count<2)
    17d8:	80 91 75 00 	lds	r24, 0x0075
    17dc:	82 30       	cpi	r24, 0x02	; 2
    17de:	d0 f3       	brcs	.-12     	; 0x17d4 <Alarm_func+0x1a>
	{
		Buzzer_on();

	}
	Buzzer_off();
    17e0:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
	Timer1_deInit();
    17e4:	0e 94 87 13 	call	0x270e	; 0x270e <Timer1_deInit>

}
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <DcMotor_Init>:
*                                                Functions Definition
*
**************************************************************************************************************************************/

void DcMotor_Init(void)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62

	 /* Setting Pins Direction */
		 GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN1, POUTPUT);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	66 e0       	ldi	r22, 0x06	; 6
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>
		 GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN2, POUTPUT);
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	67 e0       	ldi	r22, 0x07	; 7
    1804:	41 e0       	ldi	r20, 0x01	; 1
    1806:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>



}
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <DcMotor_Rotate>:
 /* Set Direction And Speed */
 void DcMotor_Rotate(DcMotor_State State  )
 {
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	0f 92       	push	r0
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	89 83       	std	Y+1, r24	; 0x01



 	if(State==ClockWise)
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	59 f4       	brne	.+22     	; 0x1838 <DcMotor_Rotate+0x28>
 	{
 		// To Rotate The Motor ACW
 		GPIO_writePin(MOTOR_PORT,MOTOR_PIN1,PHIGH);
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	66 e0       	ldi	r22, 0x06	; 6
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
 		GPIO_writePin(MOTOR_PORT,MOTOR_PIN2,PLOW);
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	67 e0       	ldi	r22, 0x07	; 7
    1830:	40 e0       	ldi	r20, 0x00	; 0
    1832:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
    1836:	1b c0       	rjmp	.+54     	; 0x186e <DcMotor_Rotate+0x5e>


 	}
 	else if(State==AntiClockWise)
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	59 f4       	brne	.+22     	; 0x1854 <DcMotor_Rotate+0x44>
 	{
 		// To Rotate The Motor ACW
 		 		GPIO_writePin(MOTOR_PORT,MOTOR_PIN1,PLOW);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	66 e0       	ldi	r22, 0x06	; 6
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
 		 		GPIO_writePin(MOTOR_PORT,MOTOR_PIN2,PHIGH);
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	67 e0       	ldi	r22, 0x07	; 7
    184c:	41 e0       	ldi	r20, 0x01	; 1
    184e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
    1852:	0d c0       	rjmp	.+26     	; 0x186e <DcMotor_Rotate+0x5e>
 	}
 	else if(State==Stop)
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	88 23       	and	r24, r24
    1858:	51 f4       	brne	.+20     	; 0x186e <DcMotor_Rotate+0x5e>
 	{
 		                // To Rotate The Motor ACW
 		 		 		GPIO_writePin(MOTOR_PORT,MOTOR_PIN1,PLOW);
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	66 e0       	ldi	r22, 0x06	; 6
    185e:	40 e0       	ldi	r20, 0x00	; 0
    1860:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
 		 		 		GPIO_writePin(MOTOR_PORT,MOTOR_PIN2,PLOW);
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	67 e0       	ldi	r22, 0x07	; 7
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>

    /* Adjusting Motor Speed */



}
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <GPIO_setupPinDirection>:
#include "GPIO_Types.h"
#include <avr/io.h>

/* Set Pin Direction Func */
void GPIO_setupPinDirection(PortIdType PORT , uint8 PinNo,PinDirectionType Dir)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <GPIO_setupPinDirection+0x6>
    187c:	00 d0       	rcall	.+0      	; 0x187e <GPIO_setupPinDirection+0x8>
    187e:	0f 92       	push	r0
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	6a 83       	std	Y+2, r22	; 0x02
    1888:	4b 83       	std	Y+3, r20	; 0x03
	switch (PORT)
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	3d 83       	std	Y+5, r19	; 0x05
    1892:	2c 83       	std	Y+4, r18	; 0x04
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	91 05       	cpc	r25, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <GPIO_setupPinDirection+0x2a>
    189e:	47 c0       	rjmp	.+142    	; 0x192e <GPIO_setupPinDirection+0xb8>
    18a0:	2c 81       	ldd	r18, Y+4	; 0x04
    18a2:	3d 81       	ldd	r19, Y+5	; 0x05
    18a4:	22 30       	cpi	r18, 0x02	; 2
    18a6:	31 05       	cpc	r19, r1
    18a8:	2c f4       	brge	.+10     	; 0x18b4 <GPIO_setupPinDirection+0x3e>
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	9d 81       	ldd	r25, Y+5	; 0x05
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	71 f0       	breq	.+28     	; 0x18ce <GPIO_setupPinDirection+0x58>
    18b2:	cb c0       	rjmp	.+406    	; 0x1a4a <GPIO_setupPinDirection+0x1d4>
    18b4:	2c 81       	ldd	r18, Y+4	; 0x04
    18b6:	3d 81       	ldd	r19, Y+5	; 0x05
    18b8:	22 30       	cpi	r18, 0x02	; 2
    18ba:	31 05       	cpc	r19, r1
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <GPIO_setupPinDirection+0x4a>
    18be:	67 c0       	rjmp	.+206    	; 0x198e <GPIO_setupPinDirection+0x118>
    18c0:	8c 81       	ldd	r24, Y+4	; 0x04
    18c2:	9d 81       	ldd	r25, Y+5	; 0x05
    18c4:	83 30       	cpi	r24, 0x03	; 3
    18c6:	91 05       	cpc	r25, r1
    18c8:	09 f4       	brne	.+2      	; 0x18cc <GPIO_setupPinDirection+0x56>
    18ca:	91 c0       	rjmp	.+290    	; 0x19ee <GPIO_setupPinDirection+0x178>
    18cc:	be c0       	rjmp	.+380    	; 0x1a4a <GPIO_setupPinDirection+0x1d4>
	{

	case PORTIDA:
               if(Dir==PINPUT)
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	88 23       	and	r24, r24
    18d2:	a9 f4       	brne	.+42     	; 0x18fe <GPIO_setupPinDirection+0x88>
                   {

            	   CLEAR_BIT(DDRA,PinNo);
    18d4:	aa e3       	ldi	r26, 0x3A	; 58
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	ea e3       	ldi	r30, 0x3A	; 58
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	48 2f       	mov	r20, r24
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	02 2e       	mov	r0, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <GPIO_setupPinDirection+0x7c>
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	0a 94       	dec	r0
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <GPIO_setupPinDirection+0x78>
    18f6:	80 95       	com	r24
    18f8:	84 23       	and	r24, r20
    18fa:	8c 93       	st	X, r24
    18fc:	a6 c0       	rjmp	.+332    	; 0x1a4a <GPIO_setupPinDirection+0x1d4>

                   }
               else if(Dir==POUTPUT)
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	09 f0       	breq	.+2      	; 0x1906 <GPIO_setupPinDirection+0x90>
    1904:	a2 c0       	rjmp	.+324    	; 0x1a4a <GPIO_setupPinDirection+0x1d4>

                        {

                           	SET_BIT(DDRA,PinNo);
    1906:	aa e3       	ldi	r26, 0x3A	; 58
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	ea e3       	ldi	r30, 0x3A	; 58
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 2e       	mov	r0, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <GPIO_setupPinDirection+0xae>
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <GPIO_setupPinDirection+0xaa>
    1928:	84 2b       	or	r24, r20
    192a:	8c 93       	st	X, r24
    192c:	8e c0       	rjmp	.+284    	; 0x1a4a <GPIO_setupPinDirection+0x1d4>

                              break;


	case PORTIDB:
               if(Dir==PINPUT)
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	88 23       	and	r24, r24
    1932:	a9 f4       	brne	.+42     	; 0x195e <GPIO_setupPinDirection+0xe8>
                   {

            	   CLEAR_BIT(DDRB,PinNo);
    1934:	a7 e3       	ldi	r26, 0x37	; 55
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e7 e3       	ldi	r30, 0x37	; 55
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	48 2f       	mov	r20, r24
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	02 2e       	mov	r0, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <GPIO_setupPinDirection+0xdc>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	0a 94       	dec	r0
    1954:	e2 f7       	brpl	.-8      	; 0x194e <GPIO_setupPinDirection+0xd8>
    1956:	80 95       	com	r24
    1958:	84 23       	and	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	76 c0       	rjmp	.+236    	; 0x1a4a <GPIO_setupPinDirection+0x1d4>

                   }
               else if(Dir==POUTPUT)
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	09 f0       	breq	.+2      	; 0x1966 <GPIO_setupPinDirection+0xf0>
    1964:	72 c0       	rjmp	.+228    	; 0x1a4a <GPIO_setupPinDirection+0x1d4>

                        {

                           	SET_BIT(DDRB,PinNo);
    1966:	a7 e3       	ldi	r26, 0x37	; 55
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e7 e3       	ldi	r30, 0x37	; 55
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <GPIO_setupPinDirection+0x10e>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <GPIO_setupPinDirection+0x10a>
    1988:	84 2b       	or	r24, r20
    198a:	8c 93       	st	X, r24
    198c:	5e c0       	rjmp	.+188    	; 0x1a4a <GPIO_setupPinDirection+0x1d4>

                        }

                              break;
	case PORTIDC:
               if(Dir==PINPUT)
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	88 23       	and	r24, r24
    1992:	a9 f4       	brne	.+42     	; 0x19be <GPIO_setupPinDirection+0x148>
                   {

            	   CLEAR_BIT(DDRC,PinNo);
    1994:	a4 e3       	ldi	r26, 0x34	; 52
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e4 e3       	ldi	r30, 0x34	; 52
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	48 2f       	mov	r20, r24
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	02 2e       	mov	r0, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <GPIO_setupPinDirection+0x13c>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	0a 94       	dec	r0
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <GPIO_setupPinDirection+0x138>
    19b6:	80 95       	com	r24
    19b8:	84 23       	and	r24, r20
    19ba:	8c 93       	st	X, r24
    19bc:	46 c0       	rjmp	.+140    	; 0x1a4a <GPIO_setupPinDirection+0x1d4>

                   }
               else if(Dir==POUTPUT)
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <GPIO_setupPinDirection+0x150>
    19c4:	42 c0       	rjmp	.+132    	; 0x1a4a <GPIO_setupPinDirection+0x1d4>

                        {

                           	SET_BIT(DDRC,PinNo);
    19c6:	a4 e3       	ldi	r26, 0x34	; 52
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e4 e3       	ldi	r30, 0x34	; 52
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 2e       	mov	r0, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <GPIO_setupPinDirection+0x16e>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <GPIO_setupPinDirection+0x16a>
    19e8:	84 2b       	or	r24, r20
    19ea:	8c 93       	st	X, r24
    19ec:	2e c0       	rjmp	.+92     	; 0x1a4a <GPIO_setupPinDirection+0x1d4>

                              break;


	case PORTIDD:
               if(Dir==PINPUT)
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	88 23       	and	r24, r24
    19f2:	a9 f4       	brne	.+42     	; 0x1a1e <GPIO_setupPinDirection+0x1a8>
                   {

            	   CLEAR_BIT(DDRD,PinNo);
    19f4:	a1 e3       	ldi	r26, 0x31	; 49
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e1 e3       	ldi	r30, 0x31	; 49
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 2e       	mov	r0, r18
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <GPIO_setupPinDirection+0x19c>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	0a 94       	dec	r0
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <GPIO_setupPinDirection+0x198>
    1a16:	80 95       	com	r24
    1a18:	84 23       	and	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	16 c0       	rjmp	.+44     	; 0x1a4a <GPIO_setupPinDirection+0x1d4>

                   }
               else if(Dir==POUTPUT)
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	99 f4       	brne	.+38     	; 0x1a4a <GPIO_setupPinDirection+0x1d4>

                        {

                           	SET_BIT(DDRD,PinNo);
    1a24:	a1 e3       	ldi	r26, 0x31	; 49
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e1 e3       	ldi	r30, 0x31	; 49
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	48 2f       	mov	r20, r24
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	02 2e       	mov	r0, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <GPIO_setupPinDirection+0x1cc>
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	0a 94       	dec	r0
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <GPIO_setupPinDirection+0x1c8>
    1a46:	84 2b       	or	r24, r20
    1a48:	8c 93       	st	X, r24


}


}
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <GPIO_writePin>:

/* Wirte Pin  Func */
void GPIO_writePin(PortIdType PORT , uint8 PinNo, OutputType Out)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <GPIO_writePin+0x6>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <GPIO_writePin+0x8>
    1a62:	0f 92       	push	r0
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	6a 83       	std	Y+2, r22	; 0x02
    1a6c:	4b 83       	std	Y+3, r20	; 0x03

	switch (PORT)
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	3d 83       	std	Y+5, r19	; 0x05
    1a76:	2c 83       	std	Y+4, r18	; 0x04
    1a78:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	91 05       	cpc	r25, r1
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <GPIO_writePin+0x2a>
    1a82:	47 c0       	rjmp	.+142    	; 0x1b12 <GPIO_writePin+0xb8>
    1a84:	2c 81       	ldd	r18, Y+4	; 0x04
    1a86:	3d 81       	ldd	r19, Y+5	; 0x05
    1a88:	22 30       	cpi	r18, 0x02	; 2
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	2c f4       	brge	.+10     	; 0x1a98 <GPIO_writePin+0x3e>
    1a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a90:	9d 81       	ldd	r25, Y+5	; 0x05
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	71 f0       	breq	.+28     	; 0x1ab2 <GPIO_writePin+0x58>
    1a96:	cb c0       	rjmp	.+406    	; 0x1c2e <GPIO_writePin+0x1d4>
    1a98:	2c 81       	ldd	r18, Y+4	; 0x04
    1a9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a9c:	22 30       	cpi	r18, 0x02	; 2
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <GPIO_writePin+0x4a>
    1aa2:	67 c0       	rjmp	.+206    	; 0x1b72 <GPIO_writePin+0x118>
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa8:	83 30       	cpi	r24, 0x03	; 3
    1aaa:	91 05       	cpc	r25, r1
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <GPIO_writePin+0x56>
    1aae:	91 c0       	rjmp	.+290    	; 0x1bd2 <GPIO_writePin+0x178>
    1ab0:	be c0       	rjmp	.+380    	; 0x1c2e <GPIO_writePin+0x1d4>
	{

	case PORTIDA:
               if(Out==PLOW)
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	88 23       	and	r24, r24
    1ab6:	a9 f4       	brne	.+42     	; 0x1ae2 <GPIO_writePin+0x88>
                   {

            	   CLEAR_BIT(PORTA,PinNo);
    1ab8:	ab e3       	ldi	r26, 0x3B	; 59
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	eb e3       	ldi	r30, 0x3B	; 59
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	48 2f       	mov	r20, r24
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	02 2e       	mov	r0, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <GPIO_writePin+0x7c>
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	0a 94       	dec	r0
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <GPIO_writePin+0x78>
    1ada:	80 95       	com	r24
    1adc:	84 23       	and	r24, r20
    1ade:	8c 93       	st	X, r24
    1ae0:	a6 c0       	rjmp	.+332    	; 0x1c2e <GPIO_writePin+0x1d4>

                   }
               else if(Out==PHIGH)
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <GPIO_writePin+0x90>
    1ae8:	a2 c0       	rjmp	.+324    	; 0x1c2e <GPIO_writePin+0x1d4>

                        {

                           	SET_BIT(PORTA,PinNo);
    1aea:	ab e3       	ldi	r26, 0x3B	; 59
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	eb e3       	ldi	r30, 0x3B	; 59
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <GPIO_writePin+0xae>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <GPIO_writePin+0xaa>
    1b0c:	84 2b       	or	r24, r20
    1b0e:	8c 93       	st	X, r24
    1b10:	8e c0       	rjmp	.+284    	; 0x1c2e <GPIO_writePin+0x1d4>

                              break;


	case PORTIDB:
               if(Out==PLOW)
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	88 23       	and	r24, r24
    1b16:	a9 f4       	brne	.+42     	; 0x1b42 <GPIO_writePin+0xe8>
                   {

            	   CLEAR_BIT(PORTB,PinNo);
    1b18:	a8 e3       	ldi	r26, 0x38	; 56
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e8 e3       	ldi	r30, 0x38	; 56
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	48 2f       	mov	r20, r24
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <GPIO_writePin+0xdc>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <GPIO_writePin+0xd8>
    1b3a:	80 95       	com	r24
    1b3c:	84 23       	and	r24, r20
    1b3e:	8c 93       	st	X, r24
    1b40:	76 c0       	rjmp	.+236    	; 0x1c2e <GPIO_writePin+0x1d4>

                   }
               else if(Out==PHIGH)
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <GPIO_writePin+0xf0>
    1b48:	72 c0       	rjmp	.+228    	; 0x1c2e <GPIO_writePin+0x1d4>

                        {

                           	SET_BIT(PORTB,PinNo);
    1b4a:	a8 e3       	ldi	r26, 0x38	; 56
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e8 e3       	ldi	r30, 0x38	; 56
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 2e       	mov	r0, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <GPIO_writePin+0x10e>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <GPIO_writePin+0x10a>
    1b6c:	84 2b       	or	r24, r20
    1b6e:	8c 93       	st	X, r24
    1b70:	5e c0       	rjmp	.+188    	; 0x1c2e <GPIO_writePin+0x1d4>

                        }

                              break;
	case PORTIDC:
               if(Out==PLOW)
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	88 23       	and	r24, r24
    1b76:	a9 f4       	brne	.+42     	; 0x1ba2 <GPIO_writePin+0x148>
                   {

            	   CLEAR_BIT(PORTC,PinNo);
    1b78:	a5 e3       	ldi	r26, 0x35	; 53
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e5 e3       	ldi	r30, 0x35	; 53
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <GPIO_writePin+0x13c>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <GPIO_writePin+0x138>
    1b9a:	80 95       	com	r24
    1b9c:	84 23       	and	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	46 c0       	rjmp	.+140    	; 0x1c2e <GPIO_writePin+0x1d4>

                   }
               else if(Out==PHIGH)
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <GPIO_writePin+0x150>
    1ba8:	42 c0       	rjmp	.+132    	; 0x1c2e <GPIO_writePin+0x1d4>

                        {

                           	SET_BIT(PORTC,PinNo);
    1baa:	a5 e3       	ldi	r26, 0x35	; 53
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e5 e3       	ldi	r30, 0x35	; 53
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	48 2f       	mov	r20, r24
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 2e       	mov	r0, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <GPIO_writePin+0x16e>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	0a 94       	dec	r0
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <GPIO_writePin+0x16a>
    1bcc:	84 2b       	or	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	2e c0       	rjmp	.+92     	; 0x1c2e <GPIO_writePin+0x1d4>

                              break;


	case PORTIDD:
               if(Out==PLOW)
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	88 23       	and	r24, r24
    1bd6:	a9 f4       	brne	.+42     	; 0x1c02 <GPIO_writePin+0x1a8>
                   {

            	   CLEAR_BIT(PORTD,PinNo);
    1bd8:	a2 e3       	ldi	r26, 0x32	; 50
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e2 e3       	ldi	r30, 0x32	; 50
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <GPIO_writePin+0x19c>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <GPIO_writePin+0x198>
    1bfa:	80 95       	com	r24
    1bfc:	84 23       	and	r24, r20
    1bfe:	8c 93       	st	X, r24
    1c00:	16 c0       	rjmp	.+44     	; 0x1c2e <GPIO_writePin+0x1d4>

                   }
               else if(Out==PHIGH)
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	99 f4       	brne	.+38     	; 0x1c2e <GPIO_writePin+0x1d4>

                        {

                           	SET_BIT(PORTD,PinNo);
    1c08:	a2 e3       	ldi	r26, 0x32	; 50
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e2 e3       	ldi	r30, 0x32	; 50
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <GPIO_writePin+0x1cc>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <GPIO_writePin+0x1c8>
    1c2a:	84 2b       	or	r24, r20
    1c2c:	8c 93       	st	X, r24



}

}
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <GPIO_readPin>:

/* Read Pin  Func */
uint8 GPIO_readPin(PortIdType PORT , uint8 PinNo)
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <GPIO_readPin+0x6>
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <GPIO_readPin+0x8>
    1c46:	0f 92       	push	r0
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	8a 83       	std	Y+2, r24	; 0x02
    1c4e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 read=0;
    1c50:	19 82       	std	Y+1, r1	; 0x01
	switch (PORT)
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	3d 83       	std	Y+5, r19	; 0x05
    1c5a:	2c 83       	std	Y+4, r18	; 0x04
    1c5c:	4c 81       	ldd	r20, Y+4	; 0x04
    1c5e:	5d 81       	ldd	r21, Y+5	; 0x05
    1c60:	41 30       	cpi	r20, 0x01	; 1
    1c62:	51 05       	cpc	r21, r1
    1c64:	b1 f1       	breq	.+108    	; 0x1cd2 <GPIO_readPin+0x94>
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	82 30       	cpi	r24, 0x02	; 2
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	34 f4       	brge	.+12     	; 0x1c7c <GPIO_readPin+0x3e>
    1c70:	2c 81       	ldd	r18, Y+4	; 0x04
    1c72:	3d 81       	ldd	r19, Y+5	; 0x05
    1c74:	21 15       	cp	r18, r1
    1c76:	31 05       	cpc	r19, r1
    1c78:	71 f0       	breq	.+28     	; 0x1c96 <GPIO_readPin+0x58>
    1c7a:	84 c0       	rjmp	.+264    	; 0x1d84 <GPIO_readPin+0x146>
    1c7c:	4c 81       	ldd	r20, Y+4	; 0x04
    1c7e:	5d 81       	ldd	r21, Y+5	; 0x05
    1c80:	42 30       	cpi	r20, 0x02	; 2
    1c82:	51 05       	cpc	r21, r1
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <GPIO_readPin+0x4a>
    1c86:	43 c0       	rjmp	.+134    	; 0x1d0e <GPIO_readPin+0xd0>
    1c88:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8c:	83 30       	cpi	r24, 0x03	; 3
    1c8e:	91 05       	cpc	r25, r1
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <GPIO_readPin+0x56>
    1c92:	5b c0       	rjmp	.+182    	; 0x1d4a <GPIO_readPin+0x10c>
    1c94:	77 c0       	rjmp	.+238    	; 0x1d84 <GPIO_readPin+0x146>
	{

	case PORTIDA:
               read=GET_BIT(PINA,PinNo);
    1c96:	e9 e3       	ldi	r30, 0x39	; 57
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	48 2f       	mov	r20, r24
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <GPIO_readPin+0x72>
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	2a 95       	dec	r18
    1cb2:	e2 f7       	brpl	.-8      	; 0x1cac <GPIO_readPin+0x6e>
    1cb4:	9a 01       	movw	r18, r20
    1cb6:	28 23       	and	r18, r24
    1cb8:	39 23       	and	r19, r25
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a9 01       	movw	r20, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <GPIO_readPin+0x8a>
    1cc4:	55 95       	asr	r21
    1cc6:	47 95       	ror	r20
    1cc8:	8a 95       	dec	r24
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <GPIO_readPin+0x86>
    1ccc:	ca 01       	movw	r24, r20
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	59 c0       	rjmp	.+178    	; 0x1d84 <GPIO_readPin+0x146>
                              break;


	case PORTIDB:
		read=GET_BIT(PINB,PinNo);
    1cd2:	e6 e3       	ldi	r30, 0x36	; 54
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	50 e0       	ldi	r21, 0x00	; 0
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <GPIO_readPin+0xae>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	2a 95       	dec	r18
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <GPIO_readPin+0xaa>
    1cf0:	9a 01       	movw	r18, r20
    1cf2:	28 23       	and	r18, r24
    1cf4:	39 23       	and	r19, r25
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a9 01       	movw	r20, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <GPIO_readPin+0xc6>
    1d00:	55 95       	asr	r21
    1d02:	47 95       	ror	r20
    1d04:	8a 95       	dec	r24
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <GPIO_readPin+0xc2>
    1d08:	ca 01       	movw	r24, r20
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	3b c0       	rjmp	.+118    	; 0x1d84 <GPIO_readPin+0x146>
                              break;
	case PORTIDC:
		read=GET_BIT(PINC,PinNo);
    1d0e:	e3 e3       	ldi	r30, 0x33	; 51
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	48 2f       	mov	r20, r24
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <GPIO_readPin+0xea>
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	2a 95       	dec	r18
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <GPIO_readPin+0xe6>
    1d2c:	9a 01       	movw	r18, r20
    1d2e:	28 23       	and	r18, r24
    1d30:	39 23       	and	r19, r25
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	a9 01       	movw	r20, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <GPIO_readPin+0x102>
    1d3c:	55 95       	asr	r21
    1d3e:	47 95       	ror	r20
    1d40:	8a 95       	dec	r24
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <GPIO_readPin+0xfe>
    1d44:	ca 01       	movw	r24, r20
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	1d c0       	rjmp	.+58     	; 0x1d84 <GPIO_readPin+0x146>
		                      break;


	case PORTIDD:
		read=GET_BIT(PIND,PinNo);
    1d4a:	e0 e3       	ldi	r30, 0x30	; 48
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <GPIO_readPin+0x126>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	2a 95       	dec	r18
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <GPIO_readPin+0x122>
    1d68:	9a 01       	movw	r18, r20
    1d6a:	28 23       	and	r18, r24
    1d6c:	39 23       	and	r19, r25
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	88 2f       	mov	r24, r24
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a9 01       	movw	r20, r18
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <GPIO_readPin+0x13e>
    1d78:	55 95       	asr	r21
    1d7a:	47 95       	ror	r20
    1d7c:	8a 95       	dec	r24
    1d7e:	e2 f7       	brpl	.-8      	; 0x1d78 <GPIO_readPin+0x13a>
    1d80:	ca 01       	movw	r24, r20
    1d82:	89 83       	std	Y+1, r24	; 0x01
		break;

          }

	return read;
    1d84:	89 81       	ldd	r24, Y+1	; 0x01





}
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <GPIO_setupPortDirection>:


/* Set Port Direction Func */
void GPIO_setupPortDirection(PortIdType port ,PortDirectionType Dir)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <GPIO_setupPortDirection+0x6>
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <GPIO_setupPortDirection+0x8>
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	6a 83       	std	Y+2, r22	; 0x02


		switch (port)
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	3c 83       	std	Y+4, r19	; 0x04
    1dae:	2b 83       	std	Y+3, r18	; 0x03
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	91 05       	cpc	r25, r1
    1db8:	d1 f0       	breq	.+52     	; 0x1dee <GPIO_setupPortDirection+0x58>
    1dba:	2b 81       	ldd	r18, Y+3	; 0x03
    1dbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbe:	22 30       	cpi	r18, 0x02	; 2
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <GPIO_setupPortDirection+0x38>
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	61 f0       	breq	.+24     	; 0x1de4 <GPIO_setupPortDirection+0x4e>
    1dcc:	1e c0       	rjmp	.+60     	; 0x1e0a <GPIO_setupPortDirection+0x74>
    1dce:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd2:	22 30       	cpi	r18, 0x02	; 2
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	81 f0       	breq	.+32     	; 0x1df8 <GPIO_setupPortDirection+0x62>
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	83 30       	cpi	r24, 0x03	; 3
    1dde:	91 05       	cpc	r25, r1
    1de0:	81 f0       	breq	.+32     	; 0x1e02 <GPIO_setupPortDirection+0x6c>
    1de2:	13 c0       	rjmp	.+38     	; 0x1e0a <GPIO_setupPortDirection+0x74>
		{

		case PORTIDA:
	               DDRA=Dir;
    1de4:	ea e3       	ldi	r30, 0x3A	; 58
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	80 83       	st	Z, r24
    1dec:	0e c0       	rjmp	.+28     	; 0x1e0a <GPIO_setupPortDirection+0x74>
	               break;


		case PORTIDB:
			     DDRB=Dir;
    1dee:	e7 e3       	ldi	r30, 0x37	; 55
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	80 83       	st	Z, r24
    1df6:	09 c0       	rjmp	.+18     	; 0x1e0a <GPIO_setupPortDirection+0x74>
			     break;
		case PORTIDC:
			     DDRC=Dir;
    1df8:	e4 e3       	ldi	r30, 0x34	; 52
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	80 83       	st	Z, r24
    1e00:	04 c0       	rjmp	.+8      	; 0x1e0a <GPIO_setupPortDirection+0x74>
			     break;


		case PORTIDD:
			DDRD=Dir;
    1e02:	e1 e3       	ldi	r30, 0x31	; 49
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	80 83       	st	Z, r24

	          }



}
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <GPIO_writePort>:

/* Write Port Value */
void GPIO_writePort(PortIdType port , uint8 value)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <GPIO_writePort+0x6>
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <GPIO_writePort+0x8>
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	6a 83       	std	Y+2, r22	; 0x02


	switch (port)
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	3c 83       	std	Y+4, r19	; 0x04
    1e30:	2b 83       	std	Y+3, r18	; 0x03
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	91 05       	cpc	r25, r1
    1e3a:	d1 f0       	breq	.+52     	; 0x1e70 <GPIO_writePort+0x58>
    1e3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e40:	22 30       	cpi	r18, 0x02	; 2
    1e42:	31 05       	cpc	r19, r1
    1e44:	2c f4       	brge	.+10     	; 0x1e50 <GPIO_writePort+0x38>
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	61 f0       	breq	.+24     	; 0x1e66 <GPIO_writePort+0x4e>
    1e4e:	1e c0       	rjmp	.+60     	; 0x1e8c <GPIO_writePort+0x74>
    1e50:	2b 81       	ldd	r18, Y+3	; 0x03
    1e52:	3c 81       	ldd	r19, Y+4	; 0x04
    1e54:	22 30       	cpi	r18, 0x02	; 2
    1e56:	31 05       	cpc	r19, r1
    1e58:	81 f0       	breq	.+32     	; 0x1e7a <GPIO_writePort+0x62>
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	83 30       	cpi	r24, 0x03	; 3
    1e60:	91 05       	cpc	r25, r1
    1e62:	81 f0       	breq	.+32     	; 0x1e84 <GPIO_writePort+0x6c>
    1e64:	13 c0       	rjmp	.+38     	; 0x1e8c <GPIO_writePort+0x74>
			{

			case PORTIDA:
		             PORTA=value;
    1e66:	eb e3       	ldi	r30, 0x3B	; 59
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	80 83       	st	Z, r24
    1e6e:	0e c0       	rjmp	.+28     	; 0x1e8c <GPIO_writePort+0x74>
		             break;


			case PORTIDB:
				     PORTB=value;
    1e70:	e8 e3       	ldi	r30, 0x38	; 56
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	80 83       	st	Z, r24
    1e78:	09 c0       	rjmp	.+18     	; 0x1e8c <GPIO_writePort+0x74>
				     break;
			case PORTIDC:
				     PORTC=value;
    1e7a:	e5 e3       	ldi	r30, 0x35	; 53
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	80 83       	st	Z, r24
    1e82:	04 c0       	rjmp	.+8      	; 0x1e8c <GPIO_writePort+0x74>
				     break;


			case PORTIDD:
				     PORTD=value;
    1e84:	e2 e3       	ldi	r30, 0x32	; 50
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	80 83       	st	Z, r24
		          }




}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <GPIO_readPort>:

/* Read Port Value */
uint8 GPIO_readPort(PortIdType port)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <GPIO_readPort+0x6>
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <GPIO_readPort+0x8>
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value=0;
    1ea8:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	3c 83       	std	Y+4, r19	; 0x04
    1eb2:	2b 83       	std	Y+3, r18	; 0x03
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	91 05       	cpc	r25, r1
    1ebc:	d1 f0       	breq	.+52     	; 0x1ef2 <GPIO_readPort+0x58>
    1ebe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec2:	22 30       	cpi	r18, 0x02	; 2
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	2c f4       	brge	.+10     	; 0x1ed2 <GPIO_readPort+0x38>
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	61 f0       	breq	.+24     	; 0x1ee8 <GPIO_readPort+0x4e>
    1ed0:	1e c0       	rjmp	.+60     	; 0x1f0e <GPIO_readPort+0x74>
    1ed2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed6:	22 30       	cpi	r18, 0x02	; 2
    1ed8:	31 05       	cpc	r19, r1
    1eda:	81 f0       	breq	.+32     	; 0x1efc <GPIO_readPort+0x62>
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee0:	83 30       	cpi	r24, 0x03	; 3
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	81 f0       	breq	.+32     	; 0x1f06 <GPIO_readPort+0x6c>
    1ee6:	13 c0       	rjmp	.+38     	; 0x1f0e <GPIO_readPort+0x74>
				{

				case PORTIDA:
			             value=PINA;
    1ee8:	e9 e3       	ldi	r30, 0x39	; 57
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	0e c0       	rjmp	.+28     	; 0x1f0e <GPIO_readPort+0x74>
			             break;


				case PORTIDB:
					     value=PINB;
    1ef2:	e6 e3       	ldi	r30, 0x36	; 54
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	09 c0       	rjmp	.+18     	; 0x1f0e <GPIO_readPort+0x74>
					     break;
				case PORTIDC:
					     value=PINC;
    1efc:	e3 e3       	ldi	r30, 0x33	; 51
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <GPIO_readPort+0x74>
					     break;


				case PORTIDD:
					     value=PIND;
    1f06:	e0 e3       	ldi	r30, 0x30	; 48
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	89 83       	std	Y+1, r24	; 0x01
				     	 break;

			          }

return value;
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <LCD_SendCommand>:




void LCD_SendCommand(uint8 Comm) /* Send Commands Func */
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	6d 97       	sbiw	r28, 0x1d	; 29
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	8d 8f       	std	Y+29, r24	; 0x1d

	GPIO_writePin(LCD_RS_E_PORT,LCD_RS_PIN,PLOW); /* LCD RS Command Select */
    1f34:	83 e0       	ldi	r24, 0x03	; 3
    1f36:	66 e0       	ldi	r22, 0x06	; 6
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a0 e8       	ldi	r26, 0x80	; 128
    1f44:	bf e3       	ldi	r27, 0x3F	; 63
    1f46:	89 8f       	std	Y+25, r24	; 0x19
    1f48:	9a 8f       	std	Y+26, r25	; 0x1a
    1f4a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	4a ef       	ldi	r20, 0xFA	; 250
    1f5c:	54 e4       	ldi	r21, 0x44	; 68
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	8d 8b       	std	Y+21, r24	; 0x15
    1f68:	9e 8b       	std	Y+22, r25	; 0x16
    1f6a:	af 8b       	std	Y+23, r26	; 0x17
    1f6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f70:	7e 89       	ldd	r23, Y+22	; 0x16
    1f72:	8f 89       	ldd	r24, Y+23	; 0x17
    1f74:	98 8d       	ldd	r25, Y+24	; 0x18
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f82:	88 23       	and	r24, r24
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <LCD_SendCommand+0x72>
		__ticks = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9c 8b       	std	Y+20, r25	; 0x14
    1f8c:	8b 8b       	std	Y+19, r24	; 0x13
    1f8e:	3f c0       	rjmp	.+126    	; 0x200e <LCD_SendCommand+0xf0>
	else if (__tmp > 65535)
    1f90:	6d 89       	ldd	r22, Y+21	; 0x15
    1f92:	7e 89       	ldd	r23, Y+22	; 0x16
    1f94:	8f 89       	ldd	r24, Y+23	; 0x17
    1f96:	98 8d       	ldd	r25, Y+24	; 0x18
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	3f ef       	ldi	r19, 0xFF	; 255
    1f9c:	4f e7       	ldi	r20, 0x7F	; 127
    1f9e:	57 e4       	ldi	r21, 0x47	; 71
    1fa0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	4c f5       	brge	.+82     	; 0x1ffa <LCD_SendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa8:	69 8d       	ldd	r22, Y+25	; 0x19
    1faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9c 8b       	std	Y+20, r25	; 0x14
    1fce:	8b 8b       	std	Y+19, r24	; 0x13
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <LCD_SendCommand+0xd2>
    1fd2:	88 ec       	ldi	r24, 0xC8	; 200
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9a 8b       	std	Y+18, r25	; 0x12
    1fd8:	89 8b       	std	Y+17, r24	; 0x11
    1fda:	89 89       	ldd	r24, Y+17	; 0x11
    1fdc:	9a 89       	ldd	r25, Y+18	; 0x12
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_SendCommand+0xc0>
    1fe2:	9a 8b       	std	Y+18, r25	; 0x12
    1fe4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	9c 8b       	std	Y+20, r25	; 0x14
    1fee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <LCD_SendCommand+0xb4>
    1ff8:	14 c0       	rjmp	.+40     	; 0x2022 <LCD_SendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    2000:	98 8d       	ldd	r25, Y+24	; 0x18
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9c 8b       	std	Y+20, r25	; 0x14
    200c:	8b 8b       	std	Y+19, r24	; 0x13
    200e:	8b 89       	ldd	r24, Y+19	; 0x13
    2010:	9c 89       	ldd	r25, Y+20	; 0x14
    2012:	98 8b       	std	Y+16, r25	; 0x10
    2014:	8f 87       	std	Y+15, r24	; 0x0f
    2016:	8f 85       	ldd	r24, Y+15	; 0x0f
    2018:	98 89       	ldd	r25, Y+16	; 0x10
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_SendCommand+0xfc>
    201e:	98 8b       	std	Y+16, r25	; 0x10
    2020:	8f 87       	std	Y+15, r24	; 0x0f


#elif   LCD_PINNUMBER==8 /* Used 8 bits */


		   GPIO_writePort(LCD_PORT, Comm);
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2026:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_writePort>

	  /* Enable Sending */
		GPIO_writePin(LCD_RS_E_PORT,LCD_E_PIN,PHIGH);
    202a:	83 e0       	ldi	r24, 0x03	; 3
    202c:	67 e0       	ldi	r22, 0x07	; 7
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e0       	ldi	r26, 0x00	; 0
    203a:	b0 e4       	ldi	r27, 0x40	; 64
    203c:	8b 87       	std	Y+11, r24	; 0x0b
    203e:	9c 87       	std	Y+12, r25	; 0x0c
    2040:	ad 87       	std	Y+13, r26	; 0x0d
    2042:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2044:	6b 85       	ldd	r22, Y+11	; 0x0b
    2046:	7c 85       	ldd	r23, Y+12	; 0x0c
    2048:	8d 85       	ldd	r24, Y+13	; 0x0d
    204a:	9e 85       	ldd	r25, Y+14	; 0x0e
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	4a ef       	ldi	r20, 0xFA	; 250
    2052:	54 e4       	ldi	r21, 0x44	; 68
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	8f 83       	std	Y+7, r24	; 0x07
    205e:	98 87       	std	Y+8, r25	; 0x08
    2060:	a9 87       	std	Y+9, r26	; 0x09
    2062:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2064:	6f 81       	ldd	r22, Y+7	; 0x07
    2066:	78 85       	ldd	r23, Y+8	; 0x08
    2068:	89 85       	ldd	r24, Y+9	; 0x09
    206a:	9a 85       	ldd	r25, Y+10	; 0x0a
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e8       	ldi	r20, 0x80	; 128
    2072:	5f e3       	ldi	r21, 0x3F	; 63
    2074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2078:	88 23       	and	r24, r24
    207a:	2c f4       	brge	.+10     	; 0x2086 <LCD_SendCommand+0x168>
		__ticks = 1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9e 83       	std	Y+6, r25	; 0x06
    2082:	8d 83       	std	Y+5, r24	; 0x05
    2084:	3f c0       	rjmp	.+126    	; 0x2104 <LCD_SendCommand+0x1e6>
	else if (__tmp > 65535)
    2086:	6f 81       	ldd	r22, Y+7	; 0x07
    2088:	78 85       	ldd	r23, Y+8	; 0x08
    208a:	89 85       	ldd	r24, Y+9	; 0x09
    208c:	9a 85       	ldd	r25, Y+10	; 0x0a
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	3f ef       	ldi	r19, 0xFF	; 255
    2092:	4f e7       	ldi	r20, 0x7F	; 127
    2094:	57 e4       	ldi	r21, 0x47	; 71
    2096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    209a:	18 16       	cp	r1, r24
    209c:	4c f5       	brge	.+82     	; 0x20f0 <LCD_SendCommand+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209e:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e2       	ldi	r20, 0x20	; 32
    20ac:	51 e4       	ldi	r21, 0x41	; 65
    20ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	bc 01       	movw	r22, r24
    20b8:	cd 01       	movw	r24, r26
    20ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	9e 83       	std	Y+6, r25	; 0x06
    20c4:	8d 83       	std	Y+5, r24	; 0x05
    20c6:	0f c0       	rjmp	.+30     	; 0x20e6 <LCD_SendCommand+0x1c8>
    20c8:	88 ec       	ldi	r24, 0xC8	; 200
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9c 83       	std	Y+4, r25	; 0x04
    20ce:	8b 83       	std	Y+3, r24	; 0x03
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <LCD_SendCommand+0x1b6>
    20d8:	9c 83       	std	Y+4, r25	; 0x04
    20da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	9e 81       	ldd	r25, Y+6	; 0x06
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	9e 83       	std	Y+6, r25	; 0x06
    20e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e6:	8d 81       	ldd	r24, Y+5	; 0x05
    20e8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	69 f7       	brne	.-38     	; 0x20c8 <LCD_SendCommand+0x1aa>
    20ee:	14 c0       	rjmp	.+40     	; 0x2118 <LCD_SendCommand+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f0:	6f 81       	ldd	r22, Y+7	; 0x07
    20f2:	78 85       	ldd	r23, Y+8	; 0x08
    20f4:	89 85       	ldd	r24, Y+9	; 0x09
    20f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	9a 83       	std	Y+2, r25	; 0x02
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <LCD_SendCommand+0x1f2>
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01

		/* Delay for Some Seconds */
		_delay_ms(2);

		/* Disable Sending */
		GPIO_writePin(LCD_RS_E_PORT,LCD_E_PIN,PLOW);
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	67 e0       	ldi	r22, 0x07	; 7
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
#endif



}
    2122:	6d 96       	adiw	r28, 0x1d	; 29
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <LCD_Init>:


void LCD_Init(void) /* Init Func */
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	2e 97       	sbiw	r28, 0x0e	; 14
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a0 e2       	ldi	r26, 0x20	; 32
    214e:	b2 e4       	ldi	r27, 0x42	; 66
    2150:	8b 87       	std	Y+11, r24	; 0x0b
    2152:	9c 87       	std	Y+12, r25	; 0x0c
    2154:	ad 87       	std	Y+13, r26	; 0x0d
    2156:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2158:	6b 85       	ldd	r22, Y+11	; 0x0b
    215a:	7c 85       	ldd	r23, Y+12	; 0x0c
    215c:	8d 85       	ldd	r24, Y+13	; 0x0d
    215e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4a ef       	ldi	r20, 0xFA	; 250
    2166:	54 e4       	ldi	r21, 0x44	; 68
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8f 83       	std	Y+7, r24	; 0x07
    2172:	98 87       	std	Y+8, r25	; 0x08
    2174:	a9 87       	std	Y+9, r26	; 0x09
    2176:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	2c f4       	brge	.+10     	; 0x219a <LCD_Init+0x66>
		__ticks = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	3f c0       	rjmp	.+126    	; 0x2218 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    219a:	6f 81       	ldd	r22, Y+7	; 0x07
    219c:	78 85       	ldd	r23, Y+8	; 0x08
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	4c f5       	brge	.+82     	; 0x2204 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <LCD_Init+0xc6>
    21dc:	88 ec       	ldi	r24, 0xC8	; 200
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <LCD_Init+0xb4>
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f7       	brne	.-38     	; 0x21dc <LCD_Init+0xa8>
    2202:	14 c0       	rjmp	.+40     	; 0x222c <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_Init+0xf0>
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40); /* Delay As Data Sheet */


	/* Make Enable Pin Output */
	GPIO_setupPinDirection(LCD_RS_E_PORT, LCD_E_PIN, POUTPUT);
    222c:	83 e0       	ldi	r24, 0x03	; 3
    222e:	67 e0       	ldi	r22, 0x07	; 7
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>
	/* Make RS Pin Output */
    GPIO_setupPinDirection(LCD_RS_E_PORT, LCD_RS_PIN, POUTPUT);
    2236:	83 e0       	ldi	r24, 0x03	; 3
    2238:	66 e0       	ldi	r22, 0x06	; 6
    223a:	41 e0       	ldi	r20, 0x01	; 1
    223c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>

#if LCD_PINNUMBER==8
	/* LCD PORTS Init */
	GPIO_setupPortDirection(LCD_PORT, PORTOUT);
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	6f ef       	ldi	r22, 0xFF	; 255
    2244:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPortDirection>
	GPIO_setupPinDirection(LCD_PORT, LCD_PIN3, POUTPUT);

#endif

	/* Mode Selection */
	LCD_SendCommand(LCD_INITCOMM);
    2248:	88 e3       	ldi	r24, 0x38	; 56
    224a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_SendCommand>

	/* Display and Cursor Selection */
	LCD_SendCommand(LCD_DisplayOnCursorOff);
    224e:	8c e0       	ldi	r24, 0x0C	; 12
    2250:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_SendCommand>

	/* Clear Screen */
	LCD_SendCommand(LCD_CLEAR);
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_SendCommand>
}
    225a:	2e 96       	adiw	r28, 0x0e	; 14
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <LCD_DisplayChar>:




void LCD_DisplayChar(uint8 data) /* Send char Func */
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	6d 97       	sbiw	r28, 0x1d	; 29
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	8d 8f       	std	Y+29, r24	; 0x1d


	GPIO_writePin(LCD_RS_E_PORT,LCD_RS_PIN,PHIGH); /* LCD RS Command Select */ /* LCD RS Command Select */
    2282:	83 e0       	ldi	r24, 0x03	; 3
    2284:	66 e0       	ldi	r22, 0x06	; 6
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a0 e8       	ldi	r26, 0x80	; 128
    2292:	bf e3       	ldi	r27, 0x3F	; 63
    2294:	89 8f       	std	Y+25, r24	; 0x19
    2296:	9a 8f       	std	Y+26, r25	; 0x1a
    2298:	ab 8f       	std	Y+27, r26	; 0x1b
    229a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	69 8d       	ldd	r22, Y+25	; 0x19
    229e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a ef       	ldi	r20, 0xFA	; 250
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8d 8b       	std	Y+21, r24	; 0x15
    22b6:	9e 8b       	std	Y+22, r25	; 0x16
    22b8:	af 8b       	std	Y+23, r26	; 0x17
    22ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22bc:	6d 89       	ldd	r22, Y+21	; 0x15
    22be:	7e 89       	ldd	r23, Y+22	; 0x16
    22c0:	8f 89       	ldd	r24, Y+23	; 0x17
    22c2:	98 8d       	ldd	r25, Y+24	; 0x18
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <LCD_DisplayChar+0x72>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9c 8b       	std	Y+20, r25	; 0x14
    22da:	8b 8b       	std	Y+19, r24	; 0x13
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <LCD_DisplayChar+0xf0>
	else if (__tmp > 65535)
    22de:	6d 89       	ldd	r22, Y+21	; 0x15
    22e0:	7e 89       	ldd	r23, Y+22	; 0x16
    22e2:	8f 89       	ldd	r24, Y+23	; 0x17
    22e4:	98 8d       	ldd	r25, Y+24	; 0x18
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <LCD_DisplayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	69 8d       	ldd	r22, Y+25	; 0x19
    22f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9c 8b       	std	Y+20, r25	; 0x14
    231c:	8b 8b       	std	Y+19, r24	; 0x13
    231e:	0f c0       	rjmp	.+30     	; 0x233e <LCD_DisplayChar+0xd2>
    2320:	88 ec       	ldi	r24, 0xC8	; 200
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9a 8b       	std	Y+18, r25	; 0x12
    2326:	89 8b       	std	Y+17, r24	; 0x11
    2328:	89 89       	ldd	r24, Y+17	; 0x11
    232a:	9a 89       	ldd	r25, Y+18	; 0x12
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <LCD_DisplayChar+0xc0>
    2330:	9a 8b       	std	Y+18, r25	; 0x12
    2332:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	8b 89       	ldd	r24, Y+19	; 0x13
    2336:	9c 89       	ldd	r25, Y+20	; 0x14
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9c 8b       	std	Y+20, r25	; 0x14
    233c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	8b 89       	ldd	r24, Y+19	; 0x13
    2340:	9c 89       	ldd	r25, Y+20	; 0x14
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <LCD_DisplayChar+0xb4>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <LCD_DisplayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	6d 89       	ldd	r22, Y+21	; 0x15
    234a:	7e 89       	ldd	r23, Y+22	; 0x16
    234c:	8f 89       	ldd	r24, Y+23	; 0x17
    234e:	98 8d       	ldd	r25, Y+24	; 0x18
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9c 8b       	std	Y+20, r25	; 0x14
    235a:	8b 8b       	std	Y+19, r24	; 0x13
    235c:	8b 89       	ldd	r24, Y+19	; 0x13
    235e:	9c 89       	ldd	r25, Y+20	; 0x14
    2360:	98 8b       	std	Y+16, r25	; 0x10
    2362:	8f 87       	std	Y+15, r24	; 0x0f
    2364:	8f 85       	ldd	r24, Y+15	; 0x0f
    2366:	98 89       	ldd	r25, Y+16	; 0x10
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_DisplayChar+0xfc>
    236c:	98 8b       	std	Y+16, r25	; 0x10
    236e:	8f 87       	std	Y+15, r24	; 0x0f


#elif   LCD_PINNUMBER==8 /* Used 8 bits */


	   GPIO_writePort(LCD_PORT, data);
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2374:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_writePort>

	  /* Enable Sending */
		GPIO_writePin(LCD_RS_E_PORT,LCD_E_PIN,PHIGH);
    2378:	83 e0       	ldi	r24, 0x03	; 3
    237a:	67 e0       	ldi	r22, 0x07	; 7
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a0 e0       	ldi	r26, 0x00	; 0
    2388:	b0 e4       	ldi	r27, 0x40	; 64
    238a:	8b 87       	std	Y+11, r24	; 0x0b
    238c:	9c 87       	std	Y+12, r25	; 0x0c
    238e:	ad 87       	std	Y+13, r26	; 0x0d
    2390:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2392:	6b 85       	ldd	r22, Y+11	; 0x0b
    2394:	7c 85       	ldd	r23, Y+12	; 0x0c
    2396:	8d 85       	ldd	r24, Y+13	; 0x0d
    2398:	9e 85       	ldd	r25, Y+14	; 0x0e
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4a ef       	ldi	r20, 0xFA	; 250
    23a0:	54 e4       	ldi	r21, 0x44	; 68
    23a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	8f 83       	std	Y+7, r24	; 0x07
    23ac:	98 87       	std	Y+8, r25	; 0x08
    23ae:	a9 87       	std	Y+9, r26	; 0x09
    23b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23b2:	6f 81       	ldd	r22, Y+7	; 0x07
    23b4:	78 85       	ldd	r23, Y+8	; 0x08
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e8       	ldi	r20, 0x80	; 128
    23c0:	5f e3       	ldi	r21, 0x3F	; 63
    23c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c6:	88 23       	and	r24, r24
    23c8:	2c f4       	brge	.+10     	; 0x23d4 <LCD_DisplayChar+0x168>
		__ticks = 1;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	9e 83       	std	Y+6, r25	; 0x06
    23d0:	8d 83       	std	Y+5, r24	; 0x05
    23d2:	3f c0       	rjmp	.+126    	; 0x2452 <LCD_DisplayChar+0x1e6>
	else if (__tmp > 65535)
    23d4:	6f 81       	ldd	r22, Y+7	; 0x07
    23d6:	78 85       	ldd	r23, Y+8	; 0x08
    23d8:	89 85       	ldd	r24, Y+9	; 0x09
    23da:	9a 85       	ldd	r25, Y+10	; 0x0a
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	3f ef       	ldi	r19, 0xFF	; 255
    23e0:	4f e7       	ldi	r20, 0x7F	; 127
    23e2:	57 e4       	ldi	r21, 0x47	; 71
    23e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e8:	18 16       	cp	r1, r24
    23ea:	4c f5       	brge	.+82     	; 0x243e <LCD_DisplayChar+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e2       	ldi	r20, 0x20	; 32
    23fa:	51 e4       	ldi	r21, 0x41	; 65
    23fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	9e 83       	std	Y+6, r25	; 0x06
    2412:	8d 83       	std	Y+5, r24	; 0x05
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <LCD_DisplayChar+0x1c8>
    2416:	88 ec       	ldi	r24, 0xC8	; 200
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9c 83       	std	Y+4, r25	; 0x04
    241c:	8b 83       	std	Y+3, r24	; 0x03
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	9c 81       	ldd	r25, Y+4	; 0x04
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_DisplayChar+0x1b6>
    2426:	9c 83       	std	Y+4, r25	; 0x04
    2428:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242a:	8d 81       	ldd	r24, Y+5	; 0x05
    242c:	9e 81       	ldd	r25, Y+6	; 0x06
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	9e 83       	std	Y+6, r25	; 0x06
    2432:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	9e 81       	ldd	r25, Y+6	; 0x06
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	69 f7       	brne	.-38     	; 0x2416 <LCD_DisplayChar+0x1aa>
    243c:	14 c0       	rjmp	.+40     	; 0x2466 <LCD_DisplayChar+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243e:	6f 81       	ldd	r22, Y+7	; 0x07
    2440:	78 85       	ldd	r23, Y+8	; 0x08
    2442:	89 85       	ldd	r24, Y+9	; 0x09
    2444:	9a 85       	ldd	r25, Y+10	; 0x0a
    2446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	9e 83       	std	Y+6, r25	; 0x06
    2450:	8d 83       	std	Y+5, r24	; 0x05
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
    2454:	9e 81       	ldd	r25, Y+6	; 0x06
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	9a 81       	ldd	r25, Y+2	; 0x02
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <LCD_DisplayChar+0x1f2>
    2462:	9a 83       	std	Y+2, r25	; 0x02
    2464:	89 83       	std	Y+1, r24	; 0x01

		/* Delay for Some Seconds */
		_delay_ms(2);

		/* Disable Sending */
		GPIO_writePin(LCD_RS_E_PORT,LCD_E_PIN,PLOW);
    2466:	83 e0       	ldi	r24, 0x03	; 3
    2468:	67 e0       	ldi	r22, 0x07	; 7
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>





}
    2470:	6d 96       	adiw	r28, 0x1d	; 29
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <LCD_DisplayString>:
void LCD_DisplayString(const uint8* data) /* Send String Func */
{
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	00 d0       	rcall	.+0      	; 0x2488 <LCD_DisplayString+0x6>
    2488:	0f 92       	push	r0
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	9b 83       	std	Y+3, r25	; 0x03
    2490:	8a 83       	std	Y+2, r24	; 0x02
uint8 count=0;
    2492:	19 82       	std	Y+1, r1	; 0x01
    2494:	0f c0       	rjmp	.+30     	; 0x24b4 <LCD_DisplayString+0x32>
	/* Looping Over The String till The End and Send data */
    while(*(data+count) != '\0' )
    {
       /* Send Char Via lcd */
    	LCD_DisplayChar(*(data+count)+'0');
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	9b 81       	ldd	r25, Y+3	; 0x03
    24a0:	fc 01       	movw	r30, r24
    24a2:	e2 0f       	add	r30, r18
    24a4:	f3 1f       	adc	r31, r19
    24a6:	80 81       	ld	r24, Z
    24a8:	80 5d       	subi	r24, 0xD0	; 208
    24aa:	0e 94 36 11 	call	0x226c	; 0x226c <LCD_DisplayChar>

    	/* Increment count */
    	count++;
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	8f 5f       	subi	r24, 0xFF	; 255
    24b2:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_DisplayString(const uint8* data) /* Send String Func */
{
uint8 count=0;
	/* Looping Over The String till The End and Send data */
    while(*(data+count) != '\0' )
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	fc 01       	movw	r30, r24
    24c0:	e2 0f       	add	r30, r18
    24c2:	f3 1f       	adc	r31, r19
    24c4:	80 81       	ld	r24, Z
    24c6:	88 23       	and	r24, r24
    24c8:	31 f7       	brne	.-52     	; 0x2496 <LCD_DisplayString+0x14>
    	/* Increment count */
    	count++;

    }

}
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <LCD_MoveCursor>:
void LCD_MoveCursor(uint8 row,uint8 column)/* Move Cursor Func */
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	00 d0       	rcall	.+0      	; 0x24dc <LCD_MoveCursor+0x6>
    24dc:	0f 92       	push	r0
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	8a 83       	std	Y+2, r24	; 0x02
    24e4:	6b 83       	std	Y+3, r22	; 0x03



	// Initialising a Variable To store the address we want to write in
		uint8 Address=0;
    24e6:	19 82       	std	Y+1, r1	; 0x01

		// Test cases for the invalid inputs
		if(column>15 || column<0)
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	80 31       	cpi	r24, 0x10	; 16
    24ec:	08 f0       	brcs	.+2      	; 0x24f0 <LCD_MoveCursor+0x1a>
		{
			column=0;
    24ee:	1b 82       	std	Y+3, r1	; 0x03
		}
		if(row != 1 && row != 0 )
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	81 30       	cpi	r24, 0x01	; 1
    24f4:	29 f0       	breq	.+10     	; 0x2500 <LCD_MoveCursor+0x2a>
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	88 23       	and	r24, r24
    24fa:	11 f0       	breq	.+4      	; 0x2500 <LCD_MoveCursor+0x2a>
			{
				row=1;
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	8a 83       	std	Y+2, r24	; 0x02
			}

		// if we want to write at the first row we select the position directlcolumn from column Number
		if(row==0)
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	88 23       	and	r24, r24
    2504:	19 f4       	brne	.+6      	; 0x250c <LCD_MoveCursor+0x36>
		{
			Address=column;
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	89 83       	std	Y+1, r24	; 0x01
    250a:	06 c0       	rjmp	.+12     	; 0x2518 <LCD_MoveCursor+0x42>
		}

		/* if we want to write at the 2nd row we select the position
		 * by adding column Number +0x40 (data sheet)*/

		else if(row==1)
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	81 30       	cpi	r24, 0x01	; 1
    2510:	19 f4       	brne	.+6      	; 0x2518 <LCD_MoveCursor+0x42>
			{
				Address=0x40+column;
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	80 5c       	subi	r24, 0xC0	; 192
    2516:	89 83       	std	Y+1, r24	; 0x01

			}
		// address is 7 bits and MSB must be = 1 (data sheet )
			SET_BIT(Address,7);
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	80 68       	ori	r24, 0x80	; 128
    251c:	89 83       	std	Y+1, r24	; 0x01
			// sending command to LCD
			LCD_SendCommand(Address);
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_SendCommand>




}
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <LCD_MoveAndDisplayString>:


void LCD_MoveAndDisplayString(uint8* data,uint8 row,uint8 column) /* Move Cursor And Display String Func */
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	00 d0       	rcall	.+0      	; 0x2536 <LCD_MoveAndDisplayString+0x6>
    2536:	00 d0       	rcall	.+0      	; 0x2538 <LCD_MoveAndDisplayString+0x8>
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	9a 83       	std	Y+2, r25	; 0x02
    253e:	89 83       	std	Y+1, r24	; 0x01
    2540:	6b 83       	std	Y+3, r22	; 0x03
    2542:	4c 83       	std	Y+4, r20	; 0x04
	/* Setting The Cursor to The right position */
	LCD_MoveCursor(row,column);
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	6c 81       	ldd	r22, Y+4	; 0x04
    2548:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <LCD_MoveCursor>

	/* Sending The String */

	LCD_DisplayString(data);
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	9a 81       	ldd	r25, Y+2	; 0x02
    2550:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_DisplayString>

}
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <LCD_ClearScreen>:
void LCD_ClearScreen(void) /* Clear Screen */
{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    /* Send Clear Command */
	LCD_SendCommand(LCD_CLEAR);
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_SendCommand>



}
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <LCD_IntegerDisplay>:
void LCD_IntegerDisplay(uint8 data) /* Display Integers */
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	61 97       	sbiw	r28, 0x11	; 17
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	89 8b       	std	Y+17, r24	; 0x11
	char digits[16];/* String to hold the ascii result */
	itoa(data,digits,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    258c:	89 89       	ldd	r24, Y+17	; 0x11
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9e 01       	movw	r18, r28
    2594:	2f 5f       	subi	r18, 0xFF	; 255
    2596:	3f 4f       	sbci	r19, 0xFF	; 255
    2598:	b9 01       	movw	r22, r18
    259a:	4a e0       	ldi	r20, 0x0A	; 10
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <itoa>
    LCD_DisplayString(digits); /* Display String */
    25a2:	ce 01       	movw	r24, r28
    25a4:	01 96       	adiw	r24, 0x01	; 1
    25a6:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_DisplayString>

}
    25aa:	61 96       	adiw	r28, 0x11	; 17
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <__vector_7>:
 /*******************************************************************************
  *                            ISRS                                              *
  *******************************************************************************/

ISR(TIMER1_COMPA_vect)
 {
    25bc:	1f 92       	push	r1
    25be:	0f 92       	push	r0
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	0f 92       	push	r0
    25c4:	11 24       	eor	r1, r1
    25c6:	2f 93       	push	r18
    25c8:	3f 93       	push	r19
    25ca:	4f 93       	push	r20
    25cc:	5f 93       	push	r21
    25ce:	6f 93       	push	r22
    25d0:	7f 93       	push	r23
    25d2:	8f 93       	push	r24
    25d4:	9f 93       	push	r25
    25d6:	af 93       	push	r26
    25d8:	bf 93       	push	r27
    25da:	ef 93       	push	r30
    25dc:	ff 93       	push	r31
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
	/* Compare Mode Interrupt*/
	if(G_FuncPtr !=NULL)
    25e6:	80 91 79 00 	lds	r24, 0x0079
    25ea:	90 91 7a 00 	lds	r25, 0x007A
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	29 f0       	breq	.+10     	; 0x25fc <__vector_7+0x40>
	   (*G_FuncPtr)();
    25f2:	e0 91 79 00 	lds	r30, 0x0079
    25f6:	f0 91 7a 00 	lds	r31, 0x007A
    25fa:	09 95       	icall

 }
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	ff 91       	pop	r31
    2602:	ef 91       	pop	r30
    2604:	bf 91       	pop	r27
    2606:	af 91       	pop	r26
    2608:	9f 91       	pop	r25
    260a:	8f 91       	pop	r24
    260c:	7f 91       	pop	r23
    260e:	6f 91       	pop	r22
    2610:	5f 91       	pop	r21
    2612:	4f 91       	pop	r20
    2614:	3f 91       	pop	r19
    2616:	2f 91       	pop	r18
    2618:	0f 90       	pop	r0
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	0f 90       	pop	r0
    261e:	1f 90       	pop	r1
    2620:	18 95       	reti

00002622 <__vector_9>:

ISR(TIMER1_OVF_vect)
 {
    2622:	1f 92       	push	r1
    2624:	0f 92       	push	r0
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	0f 92       	push	r0
    262a:	11 24       	eor	r1, r1
    262c:	2f 93       	push	r18
    262e:	3f 93       	push	r19
    2630:	4f 93       	push	r20
    2632:	5f 93       	push	r21
    2634:	6f 93       	push	r22
    2636:	7f 93       	push	r23
    2638:	8f 93       	push	r24
    263a:	9f 93       	push	r25
    263c:	af 93       	push	r26
    263e:	bf 93       	push	r27
    2640:	ef 93       	push	r30
    2642:	ff 93       	push	r31
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
	/* Compare Mode Interrupt*/
	if(G_FuncPtr !=NULL)
    264c:	80 91 79 00 	lds	r24, 0x0079
    2650:	90 91 7a 00 	lds	r25, 0x007A
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	29 f0       	breq	.+10     	; 0x2662 <__vector_9+0x40>
	   (*G_FuncPtr)();
    2658:	e0 91 79 00 	lds	r30, 0x0079
    265c:	f0 91 7a 00 	lds	r31, 0x007A
    2660:	09 95       	icall

 }
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	ff 91       	pop	r31
    2668:	ef 91       	pop	r30
    266a:	bf 91       	pop	r27
    266c:	af 91       	pop	r26
    266e:	9f 91       	pop	r25
    2670:	8f 91       	pop	r24
    2672:	7f 91       	pop	r23
    2674:	6f 91       	pop	r22
    2676:	5f 91       	pop	r21
    2678:	4f 91       	pop	r20
    267a:	3f 91       	pop	r19
    267c:	2f 91       	pop	r18
    267e:	0f 90       	pop	r0
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	0f 90       	pop	r0
    2684:	1f 90       	pop	r1
    2686:	18 95       	reti

00002688 <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
/* Init Function For Timer 1 Module */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	00 d0       	rcall	.+0      	; 0x268e <Timer1_init+0x6>
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	9a 83       	std	Y+2, r25	; 0x02
    2694:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A); /* Setting These Bits As Working in non PWM Modes */
    2696:	ef e4       	ldi	r30, 0x4F	; 79
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	88 e0       	ldi	r24, 0x08	; 8
    269c:	80 83       	st	Z, r24

	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler); /* Adding The Clock Prescaler */
    269e:	ae e4       	ldi	r26, 0x4E	; 78
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	ee e4       	ldi	r30, 0x4E	; 78
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	98 2f       	mov	r25, r24
    26aa:	98 7f       	andi	r25, 0xF8	; 248
    26ac:	e9 81       	ldd	r30, Y+1	; 0x01
    26ae:	fa 81       	ldd	r31, Y+2	; 0x02
    26b0:	84 81       	ldd	r24, Z+4	; 0x04
    26b2:	89 2b       	or	r24, r25
    26b4:	8c 93       	st	X, r24

	TCNT1=Config_Ptr->initial_value; /* Inital Counting Value */
    26b6:	ac e4       	ldi	r26, 0x4C	; 76
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e9 81       	ldd	r30, Y+1	; 0x01
    26bc:	fa 81       	ldd	r31, Y+2	; 0x02
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	11 96       	adiw	r26, 0x01	; 1
    26c4:	9c 93       	st	X, r25
    26c6:	8e 93       	st	-X, r24

	if ( Config_Ptr->mode == TIMER1_COMPAREMODE)
    26c8:	e9 81       	ldd	r30, Y+1	; 0x01
    26ca:	fa 81       	ldd	r31, Y+2	; 0x02
    26cc:	85 81       	ldd	r24, Z+5	; 0x05
    26ce:	81 30       	cpi	r24, 0x01	; 1
    26d0:	a9 f4       	brne	.+42     	; 0x26fc <Timer1_init+0x74>
	{
	/* Enable The Outcompare Mode               */
		TCCR1B = (TCCR1B & 0xF7) | (1<<WGM12);
    26d2:	ae e4       	ldi	r26, 0x4E	; 78
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	ee e4       	ldi	r30, 0x4E	; 78
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	88 60       	ori	r24, 0x08	; 8
    26de:	8c 93       	st	X, r24

	/* Adding The Value To the Compare Register */
		OCR1A = Config_Ptr->compare_value;
    26e0:	aa e4       	ldi	r26, 0x4A	; 74
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	e9 81       	ldd	r30, Y+1	; 0x01
    26e6:	fa 81       	ldd	r31, Y+2	; 0x02
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	11 96       	adiw	r26, 0x01	; 1
    26ee:	9c 93       	st	X, r25
    26f0:	8e 93       	st	-X, r24

    /* Enable The Outputcompare Interrupt */
		TIMSK=(1<<OCIE1A);
    26f2:	e9 e5       	ldi	r30, 0x59	; 89
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 e1       	ldi	r24, 0x10	; 16
    26f8:	80 83       	st	Z, r24
    26fa:	04 c0       	rjmp	.+8      	; 0x2704 <Timer1_init+0x7c>

	}
	else
		TIMSK=(1<<TOIE1); /* over flow mode interrupt enable */
    26fc:	e9 e5       	ldi	r30, 0x59	; 89
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	84 e0       	ldi	r24, 0x04	; 4
    2702:	80 83       	st	Z, r24


}
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <Timer1_deInit>:


/* Deinit Function */
void Timer1_deInit(void)
{
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2716:	ef e4       	ldi	r30, 0x4F	; 79
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	10 82       	st	Z, r1
	TCCR1B=0;
    271c:	ee e4       	ldi	r30, 0x4E	; 78
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	10 82       	st	Z, r1
	TCNT1=0;
    2722:	ec e4       	ldi	r30, 0x4C	; 76
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	11 82       	std	Z+1, r1	; 0x01
    2728:	10 82       	st	Z, r1
	OCR1A=0;
    272a:	ea e4       	ldi	r30, 0x4A	; 74
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	11 82       	std	Z+1, r1	; 0x01
    2730:	10 82       	st	Z, r1
	TIMSK=0;
    2732:	e9 e5       	ldi	r30, 0x59	; 89
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	10 82       	st	Z, r1

}
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	08 95       	ret

0000273e <Timer1_setCallBack>:

/* Setting The Call Back For the Timer MOdule */

void Timer1_setCallBack(void(*a_ptr)(void))
{
    273e:	df 93       	push	r29
    2740:	cf 93       	push	r28
    2742:	00 d0       	rcall	.+0      	; 0x2744 <Timer1_setCallBack+0x6>
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	9a 83       	std	Y+2, r25	; 0x02
    274a:	89 83       	std	Y+1, r24	; 0x01
	G_FuncPtr = a_ptr ;
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	9a 81       	ldd	r25, Y+2	; 0x02
    2750:	90 93 7a 00 	sts	0x007A, r25
    2754:	80 93 79 00 	sts	0x0079, r24

}
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <EEPROM_writeByte+0x6>
    2768:	00 d0       	rcall	.+0      	; 0x276a <EEPROM_writeByte+0x8>
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	9a 83       	std	Y+2, r25	; 0x02
    2770:	89 83       	std	Y+1, r24	; 0x01
    2772:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2774:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2778:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <TWI_getStatus>
    277c:	88 30       	cpi	r24, 0x08	; 8
    277e:	11 f0       	breq	.+4      	; 0x2784 <EEPROM_writeByte+0x22>
        return ERROR;
    2780:	1c 82       	std	Y+4, r1	; 0x04
    2782:	28 c0       	rjmp	.+80     	; 0x27d4 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	80 70       	andi	r24, 0x00	; 0
    278a:	97 70       	andi	r25, 0x07	; 7
    278c:	88 0f       	add	r24, r24
    278e:	89 2f       	mov	r24, r25
    2790:	88 1f       	adc	r24, r24
    2792:	99 0b       	sbc	r25, r25
    2794:	91 95       	neg	r25
    2796:	80 6a       	ori	r24, 0xA0	; 160
    2798:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    279c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <TWI_getStatus>
    27a0:	88 31       	cpi	r24, 0x18	; 24
    27a2:	11 f0       	breq	.+4      	; 0x27a8 <EEPROM_writeByte+0x46>
        return ERROR; 
    27a4:	1c 82       	std	Y+4, r1	; 0x04
    27a6:	16 c0       	rjmp	.+44     	; 0x27d4 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    27ae:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <TWI_getStatus>
    27b2:	88 32       	cpi	r24, 0x28	; 40
    27b4:	11 f0       	breq	.+4      	; 0x27ba <EEPROM_writeByte+0x58>
        return ERROR;
    27b6:	1c 82       	std	Y+4, r1	; 0x04
    27b8:	0d c0       	rjmp	.+26     	; 0x27d4 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    27c0:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <TWI_getStatus>
    27c4:	88 32       	cpi	r24, 0x28	; 40
    27c6:	11 f0       	breq	.+4      	; 0x27cc <EEPROM_writeByte+0x6a>
        return ERROR;
    27c8:	1c 82       	std	Y+4, r1	; 0x04
    27ca:	04 c0       	rjmp	.+8      	; 0x27d4 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    27cc:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <TWI_stop>
	
    return SUCCESS;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	8c 83       	std	Y+4, r24	; 0x04
    27d4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	08 95       	ret

000027e4 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <EEPROM_readByte+0x6>
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <EEPROM_readByte+0x8>
    27ec:	0f 92       	push	r0
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	9a 83       	std	Y+2, r25	; 0x02
    27f4:	89 83       	std	Y+1, r24	; 0x01
    27f6:	7c 83       	std	Y+4, r23	; 0x04
    27f8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    27fa:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    27fe:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <TWI_getStatus>
    2802:	88 30       	cpi	r24, 0x08	; 8
    2804:	11 f0       	breq	.+4      	; 0x280a <EEPROM_readByte+0x26>
        return ERROR;
    2806:	1d 82       	std	Y+5, r1	; 0x05
    2808:	44 c0       	rjmp	.+136    	; 0x2892 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	9a 81       	ldd	r25, Y+2	; 0x02
    280e:	80 70       	andi	r24, 0x00	; 0
    2810:	97 70       	andi	r25, 0x07	; 7
    2812:	88 0f       	add	r24, r24
    2814:	89 2f       	mov	r24, r25
    2816:	88 1f       	adc	r24, r24
    2818:	99 0b       	sbc	r25, r25
    281a:	91 95       	neg	r25
    281c:	80 6a       	ori	r24, 0xA0	; 160
    281e:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2822:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <TWI_getStatus>
    2826:	88 31       	cpi	r24, 0x18	; 24
    2828:	11 f0       	breq	.+4      	; 0x282e <EEPROM_readByte+0x4a>
        return ERROR;
    282a:	1d 82       	std	Y+5, r1	; 0x05
    282c:	32 c0       	rjmp	.+100    	; 0x2892 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2834:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <TWI_getStatus>
    2838:	88 32       	cpi	r24, 0x28	; 40
    283a:	11 f0       	breq	.+4      	; 0x2840 <EEPROM_readByte+0x5c>
        return ERROR;
    283c:	1d 82       	std	Y+5, r1	; 0x05
    283e:	29 c0       	rjmp	.+82     	; 0x2892 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2840:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2844:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <TWI_getStatus>
    2848:	80 31       	cpi	r24, 0x10	; 16
    284a:	11 f0       	breq	.+4      	; 0x2850 <EEPROM_readByte+0x6c>
        return ERROR;
    284c:	1d 82       	std	Y+5, r1	; 0x05
    284e:	21 c0       	rjmp	.+66     	; 0x2892 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	9a 81       	ldd	r25, Y+2	; 0x02
    2854:	80 70       	andi	r24, 0x00	; 0
    2856:	97 70       	andi	r25, 0x07	; 7
    2858:	88 0f       	add	r24, r24
    285a:	89 2f       	mov	r24, r25
    285c:	88 1f       	adc	r24, r24
    285e:	99 0b       	sbc	r25, r25
    2860:	91 95       	neg	r25
    2862:	81 6a       	ori	r24, 0xA1	; 161
    2864:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2868:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <TWI_getStatus>
    286c:	80 34       	cpi	r24, 0x40	; 64
    286e:	11 f0       	breq	.+4      	; 0x2874 <EEPROM_readByte+0x90>
        return ERROR;
    2870:	1d 82       	std	Y+5, r1	; 0x05
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2874:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <TWI_readByteWithNACK>
    2878:	eb 81       	ldd	r30, Y+3	; 0x03
    287a:	fc 81       	ldd	r31, Y+4	; 0x04
    287c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    287e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <TWI_getStatus>
    2882:	88 35       	cpi	r24, 0x58	; 88
    2884:	11 f0       	breq	.+4      	; 0x288a <EEPROM_readByte+0xa6>
        return ERROR;
    2886:	1d 82       	std	Y+5, r1	; 0x05
    2888:	04 c0       	rjmp	.+8      	; 0x2892 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    288a:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <TWI_stop>

    return SUCCESS;
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	8d 83       	std	Y+5, r24	; 0x05
    2892:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	cf 91       	pop	r28
    28a0:	df 91       	pop	r29
    28a2:	08 95       	ret

000028a4 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <KEYPAD_getPressedKey+0x6>
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, POUTPUT);
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	41 e0       	ldi	r20, 0x01	; 1
    28b4:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, POUTPUT);
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	41 e0       	ldi	r20, 0x01	; 1
    28be:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, POUTPUT);
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	62 e0       	ldi	r22, 0x02	; 2
    28c6:	41 e0       	ldi	r20, 0x01	; 1
    28c8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, POUTPUT);
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	63 e0       	ldi	r22, 0x03	; 3
    28d0:	41 e0       	ldi	r20, 0x01	; 1
    28d2:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>

	/* Set/Clear the row output pin */
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_RELEASED);
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	60 e0       	ldi	r22, 0x00	; 0
    28da:	41 e0       	ldi	r20, 0x01	; 1
    28dc:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, KEYPAD_BUTTON_RELEASED);
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	61 e0       	ldi	r22, 0x01	; 1
    28e4:	41 e0       	ldi	r20, 0x01	; 1
    28e6:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, KEYPAD_BUTTON_RELEASED);
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	62 e0       	ldi	r22, 0x02	; 2
    28ee:	41 e0       	ldi	r20, 0x01	; 1
    28f0:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_BUTTON_RELEASED);
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	63 e0       	ldi	r22, 0x03	; 3
    28f8:	41 e0       	ldi	r20, 0x01	; 1
    28fa:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PINPUT);
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	64 e0       	ldi	r22, 0x04	; 4
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PINPUT);
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	65 e0       	ldi	r22, 0x05	; 5
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PINPUT);
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	66 e0       	ldi	r22, 0x06	; 6
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PINPUT);
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	67 e0       	ldi	r22, 0x07	; 7
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2926:	19 82       	std	Y+1, r1	; 0x01
    2928:	35 c0       	rjmp	.+106    	; 0x2994 <KEYPAD_getPressedKey+0xf0>
			 * except this row will be output pin
			 */
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,POUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	69 81       	ldd	r22, Y+1	; 0x01
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2934:	1a 82       	std	Y+2, r1	; 0x02
    2936:	23 c0       	rjmp	.+70     	; 0x297e <KEYPAD_getPressedKey+0xda>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	98 2f       	mov	r25, r24
    293c:	9c 5f       	subi	r25, 0xFC	; 252
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	69 2f       	mov	r22, r25
    2942:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <GPIO_readPin>
    2946:	88 23       	and	r24, r24
    2948:	b9 f4       	brne	.+46     	; 0x2978 <KEYPAD_getPressedKey+0xd4>
				{
//					GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PINPUT);
					GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	69 81       	ldd	r22, Y+1	; 0x01
    294e:	41 e0       	ldi	r20, 0x01	; 1
    2950:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	88 2f       	mov	r24, r24
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	98 2f       	mov	r25, r24
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	89 0f       	add	r24, r25
    2968:	8f 5f       	subi	r24, 0xFF	; 255
    296a:	0e 94 ce 14 	call	0x299c	; 0x299c <KEYPAD_4x4_adjustKeyNumber>
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PINPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
		}
	}
}
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,POUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	8f 5f       	subi	r24, 0xFF	; 255
    297c:	8a 83       	std	Y+2, r24	; 0x02
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	84 30       	cpi	r24, 0x04	; 4
    2982:	d0 f2       	brcs	.-76     	; 0x2938 <KEYPAD_getPressedKey+0x94>
						#endif
					#endif
				}
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PINPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	69 81       	ldd	r22, Y+1	; 0x01
    2988:	41 e0       	ldi	r20, 0x01	; 1
    298a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PINPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	8f 5f       	subi	r24, 0xFF	; 255
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	84 30       	cpi	r24, 0x04	; 4
    2998:	40 f2       	brcs	.-112    	; 0x292a <KEYPAD_getPressedKey+0x86>
    299a:	c5 cf       	rjmp	.-118    	; 0x2926 <KEYPAD_getPressedKey+0x82>

0000299c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    29aa:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	3c 83       	std	Y+4, r19	; 0x04
    29b4:	2b 83       	std	Y+3, r18	; 0x03
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ba:	88 30       	cpi	r24, 0x08	; 8
    29bc:	91 05       	cpc	r25, r1
    29be:	09 f4       	brne	.+2      	; 0x29c2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    29c0:	70 c0       	rjmp	.+224    	; 0x2aa2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    29c2:	2b 81       	ldd	r18, Y+3	; 0x03
    29c4:	3c 81       	ldd	r19, Y+4	; 0x04
    29c6:	29 30       	cpi	r18, 0x09	; 9
    29c8:	31 05       	cpc	r19, r1
    29ca:	5c f5       	brge	.+86     	; 0x2a22 <KEYPAD_4x4_adjustKeyNumber+0x86>
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	9c 81       	ldd	r25, Y+4	; 0x04
    29d0:	84 30       	cpi	r24, 0x04	; 4
    29d2:	91 05       	cpc	r25, r1
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    29d6:	59 c0       	rjmp	.+178    	; 0x2a8a <KEYPAD_4x4_adjustKeyNumber+0xee>
    29d8:	2b 81       	ldd	r18, Y+3	; 0x03
    29da:	3c 81       	ldd	r19, Y+4	; 0x04
    29dc:	25 30       	cpi	r18, 0x05	; 5
    29de:	31 05       	cpc	r19, r1
    29e0:	9c f4       	brge	.+38     	; 0x2a08 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	9c 81       	ldd	r25, Y+4	; 0x04
    29e6:	82 30       	cpi	r24, 0x02	; 2
    29e8:	91 05       	cpc	r25, r1
    29ea:	09 f4       	brne	.+2      	; 0x29ee <KEYPAD_4x4_adjustKeyNumber+0x52>
    29ec:	48 c0       	rjmp	.+144    	; 0x2a7e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    29ee:	2b 81       	ldd	r18, Y+3	; 0x03
    29f0:	3c 81       	ldd	r19, Y+4	; 0x04
    29f2:	23 30       	cpi	r18, 0x03	; 3
    29f4:	31 05       	cpc	r19, r1
    29f6:	0c f0       	brlt	.+2      	; 0x29fa <KEYPAD_4x4_adjustKeyNumber+0x5e>
    29f8:	45 c0       	rjmp	.+138    	; 0x2a84 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03
    29fc:	9c 81       	ldd	r25, Y+4	; 0x04
    29fe:	81 30       	cpi	r24, 0x01	; 1
    2a00:	91 05       	cpc	r25, r1
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2a04:	39 c0       	rjmp	.+114    	; 0x2a78 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2a06:	67 c0       	rjmp	.+206    	; 0x2ad6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2a08:	2b 81       	ldd	r18, Y+3	; 0x03
    2a0a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a0c:	26 30       	cpi	r18, 0x06	; 6
    2a0e:	31 05       	cpc	r19, r1
    2a10:	09 f4       	brne	.+2      	; 0x2a14 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2a12:	41 c0       	rjmp	.+130    	; 0x2a96 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	9c 81       	ldd	r25, Y+4	; 0x04
    2a18:	87 30       	cpi	r24, 0x07	; 7
    2a1a:	91 05       	cpc	r25, r1
    2a1c:	0c f0       	brlt	.+2      	; 0x2a20 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2a1e:	3e c0       	rjmp	.+124    	; 0x2a9c <KEYPAD_4x4_adjustKeyNumber+0x100>
    2a20:	37 c0       	rjmp	.+110    	; 0x2a90 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2a22:	2b 81       	ldd	r18, Y+3	; 0x03
    2a24:	3c 81       	ldd	r19, Y+4	; 0x04
    2a26:	2c 30       	cpi	r18, 0x0C	; 12
    2a28:	31 05       	cpc	r19, r1
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <KEYPAD_4x4_adjustKeyNumber+0x92>
    2a2c:	46 c0       	rjmp	.+140    	; 0x2aba <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	9c 81       	ldd	r25, Y+4	; 0x04
    2a32:	8d 30       	cpi	r24, 0x0D	; 13
    2a34:	91 05       	cpc	r25, r1
    2a36:	5c f4       	brge	.+22     	; 0x2a4e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2a38:	2b 81       	ldd	r18, Y+3	; 0x03
    2a3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a3c:	2a 30       	cpi	r18, 0x0A	; 10
    2a3e:	31 05       	cpc	r19, r1
    2a40:	b1 f1       	breq	.+108    	; 0x2aae <KEYPAD_4x4_adjustKeyNumber+0x112>
    2a42:	8b 81       	ldd	r24, Y+3	; 0x03
    2a44:	9c 81       	ldd	r25, Y+4	; 0x04
    2a46:	8b 30       	cpi	r24, 0x0B	; 11
    2a48:	91 05       	cpc	r25, r1
    2a4a:	a4 f5       	brge	.+104    	; 0x2ab4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2a4c:	2d c0       	rjmp	.+90     	; 0x2aa8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2a4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a50:	3c 81       	ldd	r19, Y+4	; 0x04
    2a52:	2e 30       	cpi	r18, 0x0E	; 14
    2a54:	31 05       	cpc	r19, r1
    2a56:	b9 f1       	breq	.+110    	; 0x2ac6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5c:	8e 30       	cpi	r24, 0x0E	; 14
    2a5e:	91 05       	cpc	r25, r1
    2a60:	7c f1       	brlt	.+94     	; 0x2ac0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2a62:	2b 81       	ldd	r18, Y+3	; 0x03
    2a64:	3c 81       	ldd	r19, Y+4	; 0x04
    2a66:	2f 30       	cpi	r18, 0x0F	; 15
    2a68:	31 05       	cpc	r19, r1
    2a6a:	79 f1       	breq	.+94     	; 0x2aca <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a70:	80 31       	cpi	r24, 0x10	; 16
    2a72:	91 05       	cpc	r25, r1
    2a74:	69 f1       	breq	.+90     	; 0x2ad0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2a76:	2f c0       	rjmp	.+94     	; 0x2ad6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2a78:	87 e0       	ldi	r24, 0x07	; 7
    2a7a:	89 83       	std	Y+1, r24	; 0x01
    2a7c:	2e c0       	rjmp	.+92     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2a7e:	88 e0       	ldi	r24, 0x08	; 8
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	2b c0       	rjmp	.+86     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2a84:	89 e0       	ldi	r24, 0x09	; 9
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	28 c0       	rjmp	.+80     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2a8a:	85 e2       	ldi	r24, 0x25	; 37
    2a8c:	89 83       	std	Y+1, r24	; 0x01
    2a8e:	25 c0       	rjmp	.+74     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2a90:	84 e0       	ldi	r24, 0x04	; 4
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	22 c0       	rjmp	.+68     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2a96:	85 e0       	ldi	r24, 0x05	; 5
    2a98:	89 83       	std	Y+1, r24	; 0x01
    2a9a:	1f c0       	rjmp	.+62     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2a9c:	86 e0       	ldi	r24, 0x06	; 6
    2a9e:	89 83       	std	Y+1, r24	; 0x01
    2aa0:	1c c0       	rjmp	.+56     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2aa2:	8a e2       	ldi	r24, 0x2A	; 42
    2aa4:	89 83       	std	Y+1, r24	; 0x01
    2aa6:	19 c0       	rjmp	.+50     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	89 83       	std	Y+1, r24	; 0x01
    2aac:	16 c0       	rjmp	.+44     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	89 83       	std	Y+1, r24	; 0x01
    2ab2:	13 c0       	rjmp	.+38     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2ab4:	83 e0       	ldi	r24, 0x03	; 3
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	10 c0       	rjmp	.+32     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2aba:	8d e2       	ldi	r24, 0x2D	; 45
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	0d c0       	rjmp	.+26     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2ac0:	8d e0       	ldi	r24, 0x0D	; 13
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	0a c0       	rjmp	.+20     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    2ac6:	19 82       	std	Y+1, r1	; 0x01
    2ac8:	08 c0       	rjmp	.+16     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2aca:	8d e3       	ldi	r24, 0x3D	; 61
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	05 c0       	rjmp	.+10     	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2ad0:	8b e2       	ldi	r24, 0x2B	; 43
    2ad2:	89 83       	std	Y+1, r24	; 0x01
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
}
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    2af2:	e0 e2       	ldi	r30, 0x20	; 32
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	80 83       	st	Z, r24
	TWSR = 0x00;
    2afa:	e1 e2       	ldi	r30, 0x21	; 33
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    2b00:	e2 e2       	ldi	r30, 0x22	; 34
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	82 e0       	ldi	r24, 0x02	; 2
    2b06:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2b08:	e6 e5       	ldi	r30, 0x56	; 86
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	84 e0       	ldi	r24, 0x04	; 4
    2b0e:	80 83       	st	Z, r24
}
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <TWI_start>:

void TWI_start(void)
{
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2b1e:	e6 e5       	ldi	r30, 0x56	; 86
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	84 ea       	ldi	r24, 0xA4	; 164
    2b24:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b26:	e6 e5       	ldi	r30, 0x56	; 86
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	88 23       	and	r24, r24
    2b2e:	dc f7       	brge	.-10     	; 0x2b26 <TWI_start+0x10>
}
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	08 95       	ret

00002b36 <TWI_stop>:

void TWI_stop(void)
{
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2b3e:	e6 e5       	ldi	r30, 0x56	; 86
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	84 e9       	ldi	r24, 0x94	; 148
    2b44:	80 83       	st	Z, r24
}
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	08 95       	ret

00002b4c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	0f 92       	push	r0
    2b52:	cd b7       	in	r28, 0x3d	; 61
    2b54:	de b7       	in	r29, 0x3e	; 62
    2b56:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2b58:	e3 e2       	ldi	r30, 0x23	; 35
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2b60:	e6 e5       	ldi	r30, 0x56	; 86
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	84 e8       	ldi	r24, 0x84	; 132
    2b66:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b68:	e6 e5       	ldi	r30, 0x56	; 86
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	88 23       	and	r24, r24
    2b70:	dc f7       	brge	.-10     	; 0x2b68 <TWI_writeByte+0x1c>
}
    2b72:	0f 90       	pop	r0
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	08 95       	ret

00002b7a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2b7a:	df 93       	push	r29
    2b7c:	cf 93       	push	r28
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2b82:	e6 e5       	ldi	r30, 0x56	; 86
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	84 ec       	ldi	r24, 0xC4	; 196
    2b88:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b8a:	e6 e5       	ldi	r30, 0x56	; 86
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	88 23       	and	r24, r24
    2b92:	dc f7       	brge	.-10     	; 0x2b8a <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2b94:	e3 e2       	ldi	r30, 0x23	; 35
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
}
    2b9a:	cf 91       	pop	r28
    2b9c:	df 91       	pop	r29
    2b9e:	08 95       	ret

00002ba0 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2ba8:	e6 e5       	ldi	r30, 0x56	; 86
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	84 e8       	ldi	r24, 0x84	; 132
    2bae:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2bb0:	e6 e5       	ldi	r30, 0x56	; 86
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	88 23       	and	r24, r24
    2bb8:	dc f7       	brge	.-10     	; 0x2bb0 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2bba:	e3 e2       	ldi	r30, 0x23	; 35
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
}
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	0f 92       	push	r0
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2bd0:	e1 e2       	ldi	r30, 0x21	; 33
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	88 7f       	andi	r24, 0xF8	; 248
    2bd8:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bdc:	0f 90       	pop	r0
    2bde:	cf 91       	pop	r28
    2be0:	df 91       	pop	r29
    2be2:	08 95       	ret

00002be4 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)

{
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <UART_init+0x6>
    2bea:	00 d0       	rcall	.+0      	; 0x2bec <UART_init+0x8>
    2bec:	0f 92       	push	r0
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	9d 83       	std	Y+5, r25	; 0x05
    2bf4:	8c 83       	std	Y+4, r24	; 0x04
	uint16 ubrr_value = 0;
    2bf6:	1b 82       	std	Y+3, r1	; 0x03
    2bf8:	1a 82       	std	Y+2, r1	; 0x02
	uint8  Ucsrc_value= 0;
    2bfa:	19 82       	std	Y+1, r1	; 0x01


	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2bfc:	eb e2       	ldi	r30, 0x2B	; 43
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	82 e0       	ldi	r24, 0x02	; 2
    2c02:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2c04:	ea e2       	ldi	r30, 0x2A	; 42
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	88 e1       	ldi	r24, 0x18	; 24
    2c0a:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr->bit_data << 1 ) | (Config_Ptr->parity << 4 ) | (Config_Ptr->stopbit<<3) ;
    2c0c:	a0 e4       	ldi	r26, 0x40	; 64
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	ec 81       	ldd	r30, Y+4	; 0x04
    2c12:	fd 81       	ldd	r31, Y+5	; 0x05
    2c14:	80 81       	ld	r24, Z
    2c16:	88 2f       	mov	r24, r24
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	28 2f       	mov	r18, r24
    2c20:	20 68       	ori	r18, 0x80	; 128
    2c22:	ec 81       	ldd	r30, Y+4	; 0x04
    2c24:	fd 81       	ldd	r31, Y+5	; 0x05
    2c26:	81 81       	ldd	r24, Z+1	; 0x01
    2c28:	88 2f       	mov	r24, r24
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	82 95       	swap	r24
    2c2e:	92 95       	swap	r25
    2c30:	90 7f       	andi	r25, 0xF0	; 240
    2c32:	98 27       	eor	r25, r24
    2c34:	80 7f       	andi	r24, 0xF0	; 240
    2c36:	98 27       	eor	r25, r24
    2c38:	28 2b       	or	r18, r24
    2c3a:	ec 81       	ldd	r30, Y+4	; 0x04
    2c3c:	fd 81       	ldd	r31, Y+5	; 0x05
    2c3e:	82 81       	ldd	r24, Z+2	; 0x02
    2c40:	88 2f       	mov	r24, r24
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	88 0f       	add	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	88 0f       	add	r24, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	82 2b       	or	r24, r18
    2c52:	8c 93       	st	X, r24
	//UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baudrate * 8UL))) - 1);
    2c54:	ec 81       	ldd	r30, Y+4	; 0x04
    2c56:	fd 81       	ldd	r31, Y+5	; 0x05
    2c58:	83 81       	ldd	r24, Z+3	; 0x03
    2c5a:	94 81       	ldd	r25, Z+4	; 0x04
    2c5c:	cc 01       	movw	r24, r24
    2c5e:	a0 e0       	ldi	r26, 0x00	; 0
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	aa 1f       	adc	r26, r26
    2c68:	bb 1f       	adc	r27, r27
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	aa 1f       	adc	r26, r26
    2c70:	bb 1f       	adc	r27, r27
    2c72:	88 0f       	add	r24, r24
    2c74:	99 1f       	adc	r25, r25
    2c76:	aa 1f       	adc	r26, r26
    2c78:	bb 1f       	adc	r27, r27
    2c7a:	9c 01       	movw	r18, r24
    2c7c:	ad 01       	movw	r20, r26
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	92 e1       	ldi	r25, 0x12	; 18
    2c82:	aa e7       	ldi	r26, 0x7A	; 122
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	bc 01       	movw	r22, r24
    2c88:	cd 01       	movw	r24, r26
    2c8a:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__udivmodsi4>
    2c8e:	da 01       	movw	r26, r20
    2c90:	c9 01       	movw	r24, r18
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	9b 83       	std	Y+3, r25	; 0x03
    2c96:	8a 83       	std	Y+2, r24	; 0x02

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2c98:	e0 e4       	ldi	r30, 0x40	; 64
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca0:	89 2f       	mov	r24, r25
    2ca2:	99 27       	eor	r25, r25
    2ca4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2ca6:	e9 e2       	ldi	r30, 0x29	; 41
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	80 83       	st	Z, r24
}
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	0f 92       	push	r0
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2cca:	eb e2       	ldi	r30, 0x2B	; 43
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	88 2f       	mov	r24, r24
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	80 72       	andi	r24, 0x20	; 32
    2cd6:	90 70       	andi	r25, 0x00	; 0
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	b9 f3       	breq	.-18     	; 0x2cca <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2cdc:	ec e2       	ldi	r30, 0x2C	; 44
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2ce4:	0f 90       	pop	r0
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2cf4:	eb e2       	ldi	r30, 0x2B	; 43
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	88 23       	and	r24, r24
    2cfc:	dc f7       	brge	.-10     	; 0x2cf4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2cfe:	ec e2       	ldi	r30, 0x2C	; 44
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
}
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <UART_sendString+0x6>
    2d10:	0f 92       	push	r0
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	9b 83       	std	Y+3, r25	; 0x03
    2d18:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d1a:	19 82       	std	Y+1, r1	; 0x01
    2d1c:	0e c0       	rjmp	.+28     	; 0x2d3a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	28 2f       	mov	r18, r24
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	9b 81       	ldd	r25, Y+3	; 0x03
    2d28:	fc 01       	movw	r30, r24
    2d2a:	e2 0f       	add	r30, r18
    2d2c:	f3 1f       	adc	r31, r19
    2d2e:	80 81       	ld	r24, Z
    2d30:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <UART_sendByte>
		i++;
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	8f 5f       	subi	r24, 0xFF	; 255
    2d38:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	9b 81       	ldd	r25, Y+3	; 0x03
    2d44:	fc 01       	movw	r30, r24
    2d46:	e2 0f       	add	r30, r18
    2d48:	f3 1f       	adc	r31, r19
    2d4a:	80 81       	ld	r24, Z
    2d4c:	88 23       	and	r24, r24
    2d4e:	39 f7       	brne	.-50     	; 0x2d1e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <UART_receiveString+0xa>
    2d66:	0f 92       	push	r0
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	9b 83       	std	Y+3, r25	; 0x03
    2d6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d70:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7c:	8c 01       	movw	r16, r24
    2d7e:	02 0f       	add	r16, r18
    2d80:	13 1f       	adc	r17, r19
    2d82:	0e 94 76 16 	call	0x2cec	; 0x2cec <UART_recieveByte>
    2d86:	f8 01       	movw	r30, r16
    2d88:	80 83       	st	Z, r24
    2d8a:	0f c0       	rjmp	.+30     	; 0x2daa <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != 13)
	{
		i++;
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	8f 5f       	subi	r24, 0xFF	; 255
    2d90:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	28 2f       	mov	r18, r24
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9c:	8c 01       	movw	r16, r24
    2d9e:	02 0f       	add	r16, r18
    2da0:	13 1f       	adc	r17, r19
    2da2:	0e 94 76 16 	call	0x2cec	; 0x2cec <UART_recieveByte>
    2da6:	f8 01       	movw	r30, r16
    2da8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != 13)
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	8a 81       	ldd	r24, Y+2	; 0x02
    2db2:	9b 81       	ldd	r25, Y+3	; 0x03
    2db4:	fc 01       	movw	r30, r24
    2db6:	e2 0f       	add	r30, r18
    2db8:	f3 1f       	adc	r31, r19
    2dba:	80 81       	ld	r24, Z
    2dbc:	8d 30       	cpi	r24, 0x0D	; 13
    2dbe:	31 f7       	brne	.-52     	; 0x2d8c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	28 2f       	mov	r18, r24
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dca:	fc 01       	movw	r30, r24
    2dcc:	e2 0f       	add	r30, r18
    2dce:	f3 1f       	adc	r31, r19
    2dd0:	10 82       	st	Z, r1
}
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	cf 91       	pop	r28
    2dda:	df 91       	pop	r29
    2ddc:	1f 91       	pop	r17
    2dde:	0f 91       	pop	r16
    2de0:	08 95       	ret

00002de2 <__udivmodsi4>:
    2de2:	a1 e2       	ldi	r26, 0x21	; 33
    2de4:	1a 2e       	mov	r1, r26
    2de6:	aa 1b       	sub	r26, r26
    2de8:	bb 1b       	sub	r27, r27
    2dea:	fd 01       	movw	r30, r26
    2dec:	0d c0       	rjmp	.+26     	; 0x2e08 <__udivmodsi4_ep>

00002dee <__udivmodsi4_loop>:
    2dee:	aa 1f       	adc	r26, r26
    2df0:	bb 1f       	adc	r27, r27
    2df2:	ee 1f       	adc	r30, r30
    2df4:	ff 1f       	adc	r31, r31
    2df6:	a2 17       	cp	r26, r18
    2df8:	b3 07       	cpc	r27, r19
    2dfa:	e4 07       	cpc	r30, r20
    2dfc:	f5 07       	cpc	r31, r21
    2dfe:	20 f0       	brcs	.+8      	; 0x2e08 <__udivmodsi4_ep>
    2e00:	a2 1b       	sub	r26, r18
    2e02:	b3 0b       	sbc	r27, r19
    2e04:	e4 0b       	sbc	r30, r20
    2e06:	f5 0b       	sbc	r31, r21

00002e08 <__udivmodsi4_ep>:
    2e08:	66 1f       	adc	r22, r22
    2e0a:	77 1f       	adc	r23, r23
    2e0c:	88 1f       	adc	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	1a 94       	dec	r1
    2e12:	69 f7       	brne	.-38     	; 0x2dee <__udivmodsi4_loop>
    2e14:	60 95       	com	r22
    2e16:	70 95       	com	r23
    2e18:	80 95       	com	r24
    2e1a:	90 95       	com	r25
    2e1c:	9b 01       	movw	r18, r22
    2e1e:	ac 01       	movw	r20, r24
    2e20:	bd 01       	movw	r22, r26
    2e22:	cf 01       	movw	r24, r30
    2e24:	08 95       	ret

00002e26 <__prologue_saves__>:
    2e26:	2f 92       	push	r2
    2e28:	3f 92       	push	r3
    2e2a:	4f 92       	push	r4
    2e2c:	5f 92       	push	r5
    2e2e:	6f 92       	push	r6
    2e30:	7f 92       	push	r7
    2e32:	8f 92       	push	r8
    2e34:	9f 92       	push	r9
    2e36:	af 92       	push	r10
    2e38:	bf 92       	push	r11
    2e3a:	cf 92       	push	r12
    2e3c:	df 92       	push	r13
    2e3e:	ef 92       	push	r14
    2e40:	ff 92       	push	r15
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	ca 1b       	sub	r28, r26
    2e50:	db 0b       	sbc	r29, r27
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	f8 94       	cli
    2e56:	de bf       	out	0x3e, r29	; 62
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	cd bf       	out	0x3d, r28	; 61
    2e5c:	09 94       	ijmp

00002e5e <__epilogue_restores__>:
    2e5e:	2a 88       	ldd	r2, Y+18	; 0x12
    2e60:	39 88       	ldd	r3, Y+17	; 0x11
    2e62:	48 88       	ldd	r4, Y+16	; 0x10
    2e64:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e66:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e68:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e70:	b9 84       	ldd	r11, Y+9	; 0x09
    2e72:	c8 84       	ldd	r12, Y+8	; 0x08
    2e74:	df 80       	ldd	r13, Y+7	; 0x07
    2e76:	ee 80       	ldd	r14, Y+6	; 0x06
    2e78:	fd 80       	ldd	r15, Y+5	; 0x05
    2e7a:	0c 81       	ldd	r16, Y+4	; 0x04
    2e7c:	1b 81       	ldd	r17, Y+3	; 0x03
    2e7e:	aa 81       	ldd	r26, Y+2	; 0x02
    2e80:	b9 81       	ldd	r27, Y+1	; 0x01
    2e82:	ce 0f       	add	r28, r30
    2e84:	d1 1d       	adc	r29, r1
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	ed 01       	movw	r28, r26
    2e92:	08 95       	ret

00002e94 <strcmp>:
    2e94:	fb 01       	movw	r30, r22
    2e96:	dc 01       	movw	r26, r24
    2e98:	8d 91       	ld	r24, X+
    2e9a:	01 90       	ld	r0, Z+
    2e9c:	80 19       	sub	r24, r0
    2e9e:	01 10       	cpse	r0, r1
    2ea0:	d9 f3       	breq	.-10     	; 0x2e98 <strcmp+0x4>
    2ea2:	99 0b       	sbc	r25, r25
    2ea4:	08 95       	ret

00002ea6 <itoa>:
    2ea6:	fb 01       	movw	r30, r22
    2ea8:	9f 01       	movw	r18, r30
    2eaa:	e8 94       	clt
    2eac:	42 30       	cpi	r20, 0x02	; 2
    2eae:	c4 f0       	brlt	.+48     	; 0x2ee0 <itoa+0x3a>
    2eb0:	45 32       	cpi	r20, 0x25	; 37
    2eb2:	b4 f4       	brge	.+44     	; 0x2ee0 <itoa+0x3a>
    2eb4:	4a 30       	cpi	r20, 0x0A	; 10
    2eb6:	29 f4       	brne	.+10     	; 0x2ec2 <itoa+0x1c>
    2eb8:	97 fb       	bst	r25, 7
    2eba:	1e f4       	brtc	.+6      	; 0x2ec2 <itoa+0x1c>
    2ebc:	90 95       	com	r25
    2ebe:	81 95       	neg	r24
    2ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec2:	64 2f       	mov	r22, r20
    2ec4:	77 27       	eor	r23, r23
    2ec6:	0e 94 84 17 	call	0x2f08	; 0x2f08 <__udivmodhi4>
    2eca:	80 5d       	subi	r24, 0xD0	; 208
    2ecc:	8a 33       	cpi	r24, 0x3A	; 58
    2ece:	0c f0       	brlt	.+2      	; 0x2ed2 <itoa+0x2c>
    2ed0:	89 5d       	subi	r24, 0xD9	; 217
    2ed2:	81 93       	st	Z+, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	a1 f7       	brne	.-24     	; 0x2ec2 <itoa+0x1c>
    2eda:	16 f4       	brtc	.+4      	; 0x2ee0 <itoa+0x3a>
    2edc:	5d e2       	ldi	r21, 0x2D	; 45
    2ede:	51 93       	st	Z+, r21
    2ee0:	10 82       	st	Z, r1
    2ee2:	c9 01       	movw	r24, r18
    2ee4:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <strrev>

00002ee8 <strrev>:
    2ee8:	dc 01       	movw	r26, r24
    2eea:	fc 01       	movw	r30, r24
    2eec:	67 2f       	mov	r22, r23
    2eee:	71 91       	ld	r23, Z+
    2ef0:	77 23       	and	r23, r23
    2ef2:	e1 f7       	brne	.-8      	; 0x2eec <strrev+0x4>
    2ef4:	32 97       	sbiw	r30, 0x02	; 2
    2ef6:	04 c0       	rjmp	.+8      	; 0x2f00 <strrev+0x18>
    2ef8:	7c 91       	ld	r23, X
    2efa:	6d 93       	st	X+, r22
    2efc:	70 83       	st	Z, r23
    2efe:	62 91       	ld	r22, -Z
    2f00:	ae 17       	cp	r26, r30
    2f02:	bf 07       	cpc	r27, r31
    2f04:	c8 f3       	brcs	.-14     	; 0x2ef8 <strrev+0x10>
    2f06:	08 95       	ret

00002f08 <__udivmodhi4>:
    2f08:	aa 1b       	sub	r26, r26
    2f0a:	bb 1b       	sub	r27, r27
    2f0c:	51 e1       	ldi	r21, 0x11	; 17
    2f0e:	07 c0       	rjmp	.+14     	; 0x2f1e <__udivmodhi4_ep>

00002f10 <__udivmodhi4_loop>:
    2f10:	aa 1f       	adc	r26, r26
    2f12:	bb 1f       	adc	r27, r27
    2f14:	a6 17       	cp	r26, r22
    2f16:	b7 07       	cpc	r27, r23
    2f18:	10 f0       	brcs	.+4      	; 0x2f1e <__udivmodhi4_ep>
    2f1a:	a6 1b       	sub	r26, r22
    2f1c:	b7 0b       	sbc	r27, r23

00002f1e <__udivmodhi4_ep>:
    2f1e:	88 1f       	adc	r24, r24
    2f20:	99 1f       	adc	r25, r25
    2f22:	5a 95       	dec	r21
    2f24:	a9 f7       	brne	.-22     	; 0x2f10 <__udivmodhi4_loop>
    2f26:	80 95       	com	r24
    2f28:	90 95       	com	r25
    2f2a:	bc 01       	movw	r22, r24
    2f2c:	cd 01       	movw	r24, r26
    2f2e:	08 95       	ret

00002f30 <_exit>:
    2f30:	f8 94       	cli

00002f32 <__stop_program>:
    2f32:	ff cf       	rjmp	.-2      	; 0x2f32 <__stop_program>
