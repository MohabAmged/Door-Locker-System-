
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  000021fa  0000228e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  008000d0  008000d0  000022fe  2**0
                  ALLOC
  3 .stab         00002220  00000000  00000000  00002300  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001281  00000000  00000000  00004520  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000057a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000058e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000769a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008585  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009334  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009494  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009721  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009eef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3e       	cpi	r26, 0xED	; 237
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f7 08 	call	0x11ee	; 0x11ee <main>
      8a:	0c 94 fb 10 	jmp	0x21f6	; 0x21f6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ec       	ldi	r26, 0xC2	; 194
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ec       	ldi	r24, 0xC2	; 194
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
#include "GPIO_Types.h"
#include <avr/io.h>

/* Set Pin Direction Func */
void GPIO_setupPinDirection(PortIdType PORT , uint8 PinNo,PinDirectionType Dir)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	switch (PORT)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <GPIO_setupPinDirection+0x2a>
     b6e:	47 c0       	rjmp	.+142    	; 0xbfe <GPIO_setupPinDirection+0xb8>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <GPIO_setupPinDirection+0x3e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	71 f0       	breq	.+28     	; 0xb9e <GPIO_setupPinDirection+0x58>
     b82:	cb c0       	rjmp	.+406    	; 0xd1a <GPIO_setupPinDirection+0x1d4>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <GPIO_setupPinDirection+0x4a>
     b8e:	67 c0       	rjmp	.+206    	; 0xc5e <GPIO_setupPinDirection+0x118>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <GPIO_setupPinDirection+0x56>
     b9a:	91 c0       	rjmp	.+290    	; 0xcbe <GPIO_setupPinDirection+0x178>
     b9c:	be c0       	rjmp	.+380    	; 0xd1a <GPIO_setupPinDirection+0x1d4>
	{

	case PORTIDA:
               if(Dir==PINPUT)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	88 23       	and	r24, r24
     ba2:	a9 f4       	brne	.+42     	; 0xbce <GPIO_setupPinDirection+0x88>
                   {

            	   CLEAR_BIT(DDRA,PinNo);
     ba4:	aa e3       	ldi	r26, 0x3A	; 58
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <GPIO_setupPinDirection+0x7c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <GPIO_setupPinDirection+0x78>
     bc6:	80 95       	com	r24
     bc8:	84 23       	and	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	a6 c0       	rjmp	.+332    	; 0xd1a <GPIO_setupPinDirection+0x1d4>

                   }
               else if(Dir==POUTPUT)
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <GPIO_setupPinDirection+0x90>
     bd4:	a2 c0       	rjmp	.+324    	; 0xd1a <GPIO_setupPinDirection+0x1d4>

                        {

                           	SET_BIT(DDRA,PinNo);
     bd6:	aa e3       	ldi	r26, 0x3A	; 58
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	ea e3       	ldi	r30, 0x3A	; 58
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	48 2f       	mov	r20, r24
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	02 2e       	mov	r0, r18
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <GPIO_setupPinDirection+0xae>
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	0a 94       	dec	r0
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <GPIO_setupPinDirection+0xaa>
     bf8:	84 2b       	or	r24, r20
     bfa:	8c 93       	st	X, r24
     bfc:	8e c0       	rjmp	.+284    	; 0xd1a <GPIO_setupPinDirection+0x1d4>

                              break;


	case PORTIDB:
               if(Dir==PINPUT)
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	88 23       	and	r24, r24
     c02:	a9 f4       	brne	.+42     	; 0xc2e <GPIO_setupPinDirection+0xe8>
                   {

            	   CLEAR_BIT(DDRB,PinNo);
     c04:	a7 e3       	ldi	r26, 0x37	; 55
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e7 e3       	ldi	r30, 0x37	; 55
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 2e       	mov	r0, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <GPIO_setupPinDirection+0xdc>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <GPIO_setupPinDirection+0xd8>
     c26:	80 95       	com	r24
     c28:	84 23       	and	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	76 c0       	rjmp	.+236    	; 0xd1a <GPIO_setupPinDirection+0x1d4>

                   }
               else if(Dir==POUTPUT)
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	09 f0       	breq	.+2      	; 0xc36 <GPIO_setupPinDirection+0xf0>
     c34:	72 c0       	rjmp	.+228    	; 0xd1a <GPIO_setupPinDirection+0x1d4>

                        {

                           	SET_BIT(DDRB,PinNo);
     c36:	a7 e3       	ldi	r26, 0x37	; 55
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e7 e3       	ldi	r30, 0x37	; 55
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 2e       	mov	r0, r18
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <GPIO_setupPinDirection+0x10e>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <GPIO_setupPinDirection+0x10a>
     c58:	84 2b       	or	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	5e c0       	rjmp	.+188    	; 0xd1a <GPIO_setupPinDirection+0x1d4>

                        }

                              break;
	case PORTIDC:
               if(Dir==PINPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	88 23       	and	r24, r24
     c62:	a9 f4       	brne	.+42     	; 0xc8e <GPIO_setupPinDirection+0x148>
                   {

            	   CLEAR_BIT(DDRC,PinNo);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	80 95       	com	r24
     c88:	84 23       	and	r24, r20
     c8a:	8c 93       	st	X, r24
     c8c:	46 c0       	rjmp	.+140    	; 0xd1a <GPIO_setupPinDirection+0x1d4>

                   }
               else if(Dir==POUTPUT)
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	09 f0       	breq	.+2      	; 0xc96 <GPIO_setupPinDirection+0x150>
     c94:	42 c0       	rjmp	.+132    	; 0xd1a <GPIO_setupPinDirection+0x1d4>

                        {

                           	SET_BIT(DDRC,PinNo);
     c96:	a4 e3       	ldi	r26, 0x34	; 52
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e4 e3       	ldi	r30, 0x34	; 52
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	48 2f       	mov	r20, r24
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 2e       	mov	r0, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <GPIO_setupPinDirection+0x16e>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <GPIO_setupPinDirection+0x16a>
     cb8:	84 2b       	or	r24, r20
     cba:	8c 93       	st	X, r24
     cbc:	2e c0       	rjmp	.+92     	; 0xd1a <GPIO_setupPinDirection+0x1d4>

                              break;


	case PORTIDD:
               if(Dir==PINPUT)
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	88 23       	and	r24, r24
     cc2:	a9 f4       	brne	.+42     	; 0xcee <GPIO_setupPinDirection+0x1a8>
                   {

            	   CLEAR_BIT(DDRD,PinNo);
     cc4:	a1 e3       	ldi	r26, 0x31	; 49
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 e3       	ldi	r30, 0x31	; 49
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	48 2f       	mov	r20, r24
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 2e       	mov	r0, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <GPIO_setupPinDirection+0x19c>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	0a 94       	dec	r0
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <GPIO_setupPinDirection+0x198>
     ce6:	80 95       	com	r24
     ce8:	84 23       	and	r24, r20
     cea:	8c 93       	st	X, r24
     cec:	16 c0       	rjmp	.+44     	; 0xd1a <GPIO_setupPinDirection+0x1d4>

                   }
               else if(Dir==POUTPUT)
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	99 f4       	brne	.+38     	; 0xd1a <GPIO_setupPinDirection+0x1d4>

                        {

                           	SET_BIT(DDRD,PinNo);
     cf4:	a1 e3       	ldi	r26, 0x31	; 49
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e1 e3       	ldi	r30, 0x31	; 49
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <GPIO_setupPinDirection+0x1cc>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <GPIO_setupPinDirection+0x1c8>
     d16:	84 2b       	or	r24, r20
     d18:	8c 93       	st	X, r24


}


}
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <GPIO_writePin>:

/* Wirte Pin  Func */
void GPIO_writePin(PortIdType PORT , uint8 PinNo, OutputType Out)
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <GPIO_writePin+0x6>
     d30:	00 d0       	rcall	.+0      	; 0xd32 <GPIO_writePin+0x8>
     d32:	0f 92       	push	r0
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	6a 83       	std	Y+2, r22	; 0x02
     d3c:	4b 83       	std	Y+3, r20	; 0x03

	switch (PORT)
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	3d 83       	std	Y+5, r19	; 0x05
     d46:	2c 83       	std	Y+4, r18	; 0x04
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	9d 81       	ldd	r25, Y+5	; 0x05
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <GPIO_writePin+0x2a>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <GPIO_writePin+0xb8>
     d54:	2c 81       	ldd	r18, Y+4	; 0x04
     d56:	3d 81       	ldd	r19, Y+5	; 0x05
     d58:	22 30       	cpi	r18, 0x02	; 2
     d5a:	31 05       	cpc	r19, r1
     d5c:	2c f4       	brge	.+10     	; 0xd68 <GPIO_writePin+0x3e>
     d5e:	8c 81       	ldd	r24, Y+4	; 0x04
     d60:	9d 81       	ldd	r25, Y+5	; 0x05
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	71 f0       	breq	.+28     	; 0xd82 <GPIO_writePin+0x58>
     d66:	cb c0       	rjmp	.+406    	; 0xefe <GPIO_writePin+0x1d4>
     d68:	2c 81       	ldd	r18, Y+4	; 0x04
     d6a:	3d 81       	ldd	r19, Y+5	; 0x05
     d6c:	22 30       	cpi	r18, 0x02	; 2
     d6e:	31 05       	cpc	r19, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <GPIO_writePin+0x4a>
     d72:	67 c0       	rjmp	.+206    	; 0xe42 <GPIO_writePin+0x118>
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	83 30       	cpi	r24, 0x03	; 3
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <GPIO_writePin+0x56>
     d7e:	91 c0       	rjmp	.+290    	; 0xea2 <GPIO_writePin+0x178>
     d80:	be c0       	rjmp	.+380    	; 0xefe <GPIO_writePin+0x1d4>
	{

	case PORTIDA:
               if(Out==PLOW)
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	88 23       	and	r24, r24
     d86:	a9 f4       	brne	.+42     	; 0xdb2 <GPIO_writePin+0x88>
                   {

            	   CLEAR_BIT(PORTA,PinNo);
     d88:	ab e3       	ldi	r26, 0x3B	; 59
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	eb e3       	ldi	r30, 0x3B	; 59
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <GPIO_writePin+0x7c>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <GPIO_writePin+0x78>
     daa:	80 95       	com	r24
     dac:	84 23       	and	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	a6 c0       	rjmp	.+332    	; 0xefe <GPIO_writePin+0x1d4>

                   }
               else if(Out==PHIGH)
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	09 f0       	breq	.+2      	; 0xdba <GPIO_writePin+0x90>
     db8:	a2 c0       	rjmp	.+324    	; 0xefe <GPIO_writePin+0x1d4>

                        {

                           	SET_BIT(PORTA,PinNo);
     dba:	ab e3       	ldi	r26, 0x3B	; 59
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	eb e3       	ldi	r30, 0x3B	; 59
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <GPIO_writePin+0xae>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <GPIO_writePin+0xaa>
     ddc:	84 2b       	or	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	8e c0       	rjmp	.+284    	; 0xefe <GPIO_writePin+0x1d4>

                              break;


	case PORTIDB:
               if(Out==PLOW)
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	88 23       	and	r24, r24
     de6:	a9 f4       	brne	.+42     	; 0xe12 <GPIO_writePin+0xe8>
                   {

            	   CLEAR_BIT(PORTB,PinNo);
     de8:	a8 e3       	ldi	r26, 0x38	; 56
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e8 e3       	ldi	r30, 0x38	; 56
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <GPIO_writePin+0xdc>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <GPIO_writePin+0xd8>
     e0a:	80 95       	com	r24
     e0c:	84 23       	and	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	76 c0       	rjmp	.+236    	; 0xefe <GPIO_writePin+0x1d4>

                   }
               else if(Out==PHIGH)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	09 f0       	breq	.+2      	; 0xe1a <GPIO_writePin+0xf0>
     e18:	72 c0       	rjmp	.+228    	; 0xefe <GPIO_writePin+0x1d4>

                        {

                           	SET_BIT(PORTB,PinNo);
     e1a:	a8 e3       	ldi	r26, 0x38	; 56
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e8 e3       	ldi	r30, 0x38	; 56
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <GPIO_writePin+0x10e>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <GPIO_writePin+0x10a>
     e3c:	84 2b       	or	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	5e c0       	rjmp	.+188    	; 0xefe <GPIO_writePin+0x1d4>

                        }

                              break;
	case PORTIDC:
               if(Out==PLOW)
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	88 23       	and	r24, r24
     e46:	a9 f4       	brne	.+42     	; 0xe72 <GPIO_writePin+0x148>
                   {

            	   CLEAR_BIT(PORTC,PinNo);
     e48:	a5 e3       	ldi	r26, 0x35	; 53
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e5 e3       	ldi	r30, 0x35	; 53
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <GPIO_writePin+0x13c>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <GPIO_writePin+0x138>
     e6a:	80 95       	com	r24
     e6c:	84 23       	and	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	46 c0       	rjmp	.+140    	; 0xefe <GPIO_writePin+0x1d4>

                   }
               else if(Out==PHIGH)
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	09 f0       	breq	.+2      	; 0xe7a <GPIO_writePin+0x150>
     e78:	42 c0       	rjmp	.+132    	; 0xefe <GPIO_writePin+0x1d4>

                        {

                           	SET_BIT(PORTC,PinNo);
     e7a:	a5 e3       	ldi	r26, 0x35	; 53
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e5 e3       	ldi	r30, 0x35	; 53
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <GPIO_writePin+0x16e>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <GPIO_writePin+0x16a>
     e9c:	84 2b       	or	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	2e c0       	rjmp	.+92     	; 0xefe <GPIO_writePin+0x1d4>

                              break;


	case PORTIDD:
               if(Out==PLOW)
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	88 23       	and	r24, r24
     ea6:	a9 f4       	brne	.+42     	; 0xed2 <GPIO_writePin+0x1a8>
                   {

            	   CLEAR_BIT(PORTD,PinNo);
     ea8:	a2 e3       	ldi	r26, 0x32	; 50
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e2 e3       	ldi	r30, 0x32	; 50
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <GPIO_writePin+0x19c>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <GPIO_writePin+0x198>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	16 c0       	rjmp	.+44     	; 0xefe <GPIO_writePin+0x1d4>

                   }
               else if(Out==PHIGH)
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	99 f4       	brne	.+38     	; 0xefe <GPIO_writePin+0x1d4>

                        {

                           	SET_BIT(PORTD,PinNo);
     ed8:	a2 e3       	ldi	r26, 0x32	; 50
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e2 e3       	ldi	r30, 0x32	; 50
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <GPIO_writePin+0x1cc>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <GPIO_writePin+0x1c8>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24



}

}
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <GPIO_readPin>:

/* Read Pin  Func */
uint8 GPIO_readPin(PortIdType PORT , uint8 PinNo)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <GPIO_readPin+0x6>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <GPIO_readPin+0x8>
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	8a 83       	std	Y+2, r24	; 0x02
     f1e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 read=0;
     f20:	19 82       	std	Y+1, r1	; 0x01
	switch (PORT)
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	3d 83       	std	Y+5, r19	; 0x05
     f2a:	2c 83       	std	Y+4, r18	; 0x04
     f2c:	4c 81       	ldd	r20, Y+4	; 0x04
     f2e:	5d 81       	ldd	r21, Y+5	; 0x05
     f30:	41 30       	cpi	r20, 0x01	; 1
     f32:	51 05       	cpc	r21, r1
     f34:	b1 f1       	breq	.+108    	; 0xfa2 <GPIO_readPin+0x94>
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	91 05       	cpc	r25, r1
     f3e:	34 f4       	brge	.+12     	; 0xf4c <GPIO_readPin+0x3e>
     f40:	2c 81       	ldd	r18, Y+4	; 0x04
     f42:	3d 81       	ldd	r19, Y+5	; 0x05
     f44:	21 15       	cp	r18, r1
     f46:	31 05       	cpc	r19, r1
     f48:	71 f0       	breq	.+28     	; 0xf66 <GPIO_readPin+0x58>
     f4a:	84 c0       	rjmp	.+264    	; 0x1054 <GPIO_readPin+0x146>
     f4c:	4c 81       	ldd	r20, Y+4	; 0x04
     f4e:	5d 81       	ldd	r21, Y+5	; 0x05
     f50:	42 30       	cpi	r20, 0x02	; 2
     f52:	51 05       	cpc	r21, r1
     f54:	09 f4       	brne	.+2      	; 0xf58 <GPIO_readPin+0x4a>
     f56:	43 c0       	rjmp	.+134    	; 0xfde <GPIO_readPin+0xd0>
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	91 05       	cpc	r25, r1
     f60:	09 f4       	brne	.+2      	; 0xf64 <GPIO_readPin+0x56>
     f62:	5b c0       	rjmp	.+182    	; 0x101a <GPIO_readPin+0x10c>
     f64:	77 c0       	rjmp	.+238    	; 0x1054 <GPIO_readPin+0x146>
	{

	case PORTIDA:
               read=GET_BIT(PINA,PinNo);
     f66:	e9 e3       	ldi	r30, 0x39	; 57
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <GPIO_readPin+0x72>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	2a 95       	dec	r18
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <GPIO_readPin+0x6e>
     f84:	9a 01       	movw	r18, r20
     f86:	28 23       	and	r18, r24
     f88:	39 23       	and	r19, r25
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	a9 01       	movw	r20, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <GPIO_readPin+0x8a>
     f94:	55 95       	asr	r21
     f96:	47 95       	ror	r20
     f98:	8a 95       	dec	r24
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <GPIO_readPin+0x86>
     f9c:	ca 01       	movw	r24, r20
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	59 c0       	rjmp	.+178    	; 0x1054 <GPIO_readPin+0x146>
                              break;


	case PORTIDB:
		read=GET_BIT(PINB,PinNo);
     fa2:	e6 e3       	ldi	r30, 0x36	; 54
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <GPIO_readPin+0xae>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	2a 95       	dec	r18
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <GPIO_readPin+0xaa>
     fc0:	9a 01       	movw	r18, r20
     fc2:	28 23       	and	r18, r24
     fc4:	39 23       	and	r19, r25
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	a9 01       	movw	r20, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <GPIO_readPin+0xc6>
     fd0:	55 95       	asr	r21
     fd2:	47 95       	ror	r20
     fd4:	8a 95       	dec	r24
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <GPIO_readPin+0xc2>
     fd8:	ca 01       	movw	r24, r20
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	3b c0       	rjmp	.+118    	; 0x1054 <GPIO_readPin+0x146>
                              break;
	case PORTIDC:
		read=GET_BIT(PINC,PinNo);
     fde:	e3 e3       	ldi	r30, 0x33	; 51
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	50 e0       	ldi	r21, 0x00	; 0
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <GPIO_readPin+0xea>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	2a 95       	dec	r18
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <GPIO_readPin+0xe6>
     ffc:	9a 01       	movw	r18, r20
     ffe:	28 23       	and	r18, r24
    1000:	39 23       	and	r19, r25
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	a9 01       	movw	r20, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <GPIO_readPin+0x102>
    100c:	55 95       	asr	r21
    100e:	47 95       	ror	r20
    1010:	8a 95       	dec	r24
    1012:	e2 f7       	brpl	.-8      	; 0x100c <GPIO_readPin+0xfe>
    1014:	ca 01       	movw	r24, r20
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	1d c0       	rjmp	.+58     	; 0x1054 <GPIO_readPin+0x146>
		                      break;


	case PORTIDD:
		read=GET_BIT(PIND,PinNo);
    101a:	e0 e3       	ldi	r30, 0x30	; 48
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <GPIO_readPin+0x126>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	2a 95       	dec	r18
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <GPIO_readPin+0x122>
    1038:	9a 01       	movw	r18, r20
    103a:	28 23       	and	r18, r24
    103c:	39 23       	and	r19, r25
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a9 01       	movw	r20, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <GPIO_readPin+0x13e>
    1048:	55 95       	asr	r21
    104a:	47 95       	ror	r20
    104c:	8a 95       	dec	r24
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <GPIO_readPin+0x13a>
    1050:	ca 01       	movw	r24, r20
    1052:	89 83       	std	Y+1, r24	; 0x01
		break;

          }

	return read;
    1054:	89 81       	ldd	r24, Y+1	; 0x01





}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <GPIO_setupPortDirection>:


/* Set Port Direction Func */
void GPIO_setupPortDirection(PortIdType port ,PortDirectionType Dir)
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <GPIO_setupPortDirection+0x6>
    106c:	00 d0       	rcall	.+0      	; 0x106e <GPIO_setupPortDirection+0x8>
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	6a 83       	std	Y+2, r22	; 0x02


		switch (port)
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3c 83       	std	Y+4, r19	; 0x04
    107e:	2b 83       	std	Y+3, r18	; 0x03
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	91 05       	cpc	r25, r1
    1088:	d1 f0       	breq	.+52     	; 0x10be <GPIO_setupPortDirection+0x58>
    108a:	2b 81       	ldd	r18, Y+3	; 0x03
    108c:	3c 81       	ldd	r19, Y+4	; 0x04
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	2c f4       	brge	.+10     	; 0x109e <GPIO_setupPortDirection+0x38>
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	61 f0       	breq	.+24     	; 0x10b4 <GPIO_setupPortDirection+0x4e>
    109c:	1e c0       	rjmp	.+60     	; 0x10da <GPIO_setupPortDirection+0x74>
    109e:	2b 81       	ldd	r18, Y+3	; 0x03
    10a0:	3c 81       	ldd	r19, Y+4	; 0x04
    10a2:	22 30       	cpi	r18, 0x02	; 2
    10a4:	31 05       	cpc	r19, r1
    10a6:	81 f0       	breq	.+32     	; 0x10c8 <GPIO_setupPortDirection+0x62>
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	83 30       	cpi	r24, 0x03	; 3
    10ae:	91 05       	cpc	r25, r1
    10b0:	81 f0       	breq	.+32     	; 0x10d2 <GPIO_setupPortDirection+0x6c>
    10b2:	13 c0       	rjmp	.+38     	; 0x10da <GPIO_setupPortDirection+0x74>
		{

		case PORTIDA:
	               DDRA=Dir;
    10b4:	ea e3       	ldi	r30, 0x3A	; 58
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	80 83       	st	Z, r24
    10bc:	0e c0       	rjmp	.+28     	; 0x10da <GPIO_setupPortDirection+0x74>
	               break;


		case PORTIDB:
			     DDRB=Dir;
    10be:	e7 e3       	ldi	r30, 0x37	; 55
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	80 83       	st	Z, r24
    10c6:	09 c0       	rjmp	.+18     	; 0x10da <GPIO_setupPortDirection+0x74>
			     break;
		case PORTIDC:
			     DDRC=Dir;
    10c8:	e4 e3       	ldi	r30, 0x34	; 52
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	80 83       	st	Z, r24
    10d0:	04 c0       	rjmp	.+8      	; 0x10da <GPIO_setupPortDirection+0x74>
			     break;


		case PORTIDD:
			DDRD=Dir;
    10d2:	e1 e3       	ldi	r30, 0x31	; 49
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	80 83       	st	Z, r24

	          }



}
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <GPIO_writePort>:

/* Write Port Value */
void GPIO_writePort(PortIdType port , uint8 value)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <GPIO_writePort+0x6>
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <GPIO_writePort+0x8>
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	6a 83       	std	Y+2, r22	; 0x02


	switch (port)
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	3c 83       	std	Y+4, r19	; 0x04
    1100:	2b 83       	std	Y+3, r18	; 0x03
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	91 05       	cpc	r25, r1
    110a:	d1 f0       	breq	.+52     	; 0x1140 <GPIO_writePort+0x58>
    110c:	2b 81       	ldd	r18, Y+3	; 0x03
    110e:	3c 81       	ldd	r19, Y+4	; 0x04
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	2c f4       	brge	.+10     	; 0x1120 <GPIO_writePort+0x38>
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	61 f0       	breq	.+24     	; 0x1136 <GPIO_writePort+0x4e>
    111e:	1e c0       	rjmp	.+60     	; 0x115c <GPIO_writePort+0x74>
    1120:	2b 81       	ldd	r18, Y+3	; 0x03
    1122:	3c 81       	ldd	r19, Y+4	; 0x04
    1124:	22 30       	cpi	r18, 0x02	; 2
    1126:	31 05       	cpc	r19, r1
    1128:	81 f0       	breq	.+32     	; 0x114a <GPIO_writePort+0x62>
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	91 05       	cpc	r25, r1
    1132:	81 f0       	breq	.+32     	; 0x1154 <GPIO_writePort+0x6c>
    1134:	13 c0       	rjmp	.+38     	; 0x115c <GPIO_writePort+0x74>
			{

			case PORTIDA:
		             PORTA=value;
    1136:	eb e3       	ldi	r30, 0x3B	; 59
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	80 83       	st	Z, r24
    113e:	0e c0       	rjmp	.+28     	; 0x115c <GPIO_writePort+0x74>
		             break;


			case PORTIDB:
				     PORTB=value;
    1140:	e8 e3       	ldi	r30, 0x38	; 56
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	80 83       	st	Z, r24
    1148:	09 c0       	rjmp	.+18     	; 0x115c <GPIO_writePort+0x74>
				     break;
			case PORTIDC:
				     PORTC=value;
    114a:	e5 e3       	ldi	r30, 0x35	; 53
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	80 83       	st	Z, r24
    1152:	04 c0       	rjmp	.+8      	; 0x115c <GPIO_writePort+0x74>
				     break;


			case PORTIDD:
				     PORTD=value;
    1154:	e2 e3       	ldi	r30, 0x32	; 50
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	80 83       	st	Z, r24
		          }




}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <GPIO_readPort>:

/* Read Port Value */
uint8 GPIO_readPort(PortIdType port)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <GPIO_readPort+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <GPIO_readPort+0x8>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value=0;
    1178:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	3c 83       	std	Y+4, r19	; 0x04
    1182:	2b 83       	std	Y+3, r18	; 0x03
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	91 05       	cpc	r25, r1
    118c:	d1 f0       	breq	.+52     	; 0x11c2 <GPIO_readPort+0x58>
    118e:	2b 81       	ldd	r18, Y+3	; 0x03
    1190:	3c 81       	ldd	r19, Y+4	; 0x04
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	2c f4       	brge	.+10     	; 0x11a2 <GPIO_readPort+0x38>
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	61 f0       	breq	.+24     	; 0x11b8 <GPIO_readPort+0x4e>
    11a0:	1e c0       	rjmp	.+60     	; 0x11de <GPIO_readPort+0x74>
    11a2:	2b 81       	ldd	r18, Y+3	; 0x03
    11a4:	3c 81       	ldd	r19, Y+4	; 0x04
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	81 f0       	breq	.+32     	; 0x11cc <GPIO_readPort+0x62>
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	91 05       	cpc	r25, r1
    11b4:	81 f0       	breq	.+32     	; 0x11d6 <GPIO_readPort+0x6c>
    11b6:	13 c0       	rjmp	.+38     	; 0x11de <GPIO_readPort+0x74>
				{

				case PORTIDA:
			             value=PINA;
    11b8:	e9 e3       	ldi	r30, 0x39	; 57
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	0e c0       	rjmp	.+28     	; 0x11de <GPIO_readPort+0x74>
			             break;


				case PORTIDB:
					     value=PINB;
    11c2:	e6 e3       	ldi	r30, 0x36	; 54
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	09 c0       	rjmp	.+18     	; 0x11de <GPIO_readPort+0x74>
					     break;
				case PORTIDC:
					     value=PINC;
    11cc:	e3 e3       	ldi	r30, 0x33	; 51
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <GPIO_readPort+0x74>
					     break;


				case PORTIDD:
					     value=PIND;
    11d6:	e0 e3       	ldi	r30, 0x30	; 48
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	89 83       	std	Y+1, r24	; 0x01
				     	 break;

			          }

return value;
    11de:	89 81       	ldd	r24, Y+1	; 0x01

}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <main>:

/*******************************************************************************
 *                              MAIN                                           *
 *******************************************************************************/
int main (void)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	63 97       	sbiw	r28, 0x13	; 19
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
	/* Init Variables */
 uint8 menu=0;
    1202:	1b 82       	std	Y+3, r1	; 0x03
 uint8 pass_array[6]={0,0,0,0,0,0};
    1204:	86 e0       	ldi	r24, 0x06	; 6
    1206:	fe 01       	movw	r30, r28
    1208:	34 96       	adiw	r30, 0x04	; 4
    120a:	df 01       	movw	r26, r30
    120c:	98 2f       	mov	r25, r24
    120e:	1d 92       	st	X+, r1
    1210:	9a 95       	dec	r25
    1212:	e9 f7       	brne	.-6      	; 0x120e <main+0x20>
 uint8 pass=0;
    1214:	1a 82       	std	Y+2, r1	; 0x02
 uint8 pass_count=0;
    1216:	19 82       	std	Y+1, r1	; 0x01
 UART_ConfigType UART_Config= {
		  .bit_data = UART_CHAR8,
		  .parity = UART_PARITY_DISABLE,
		  .stopbit = UART_STOP1,
		  .baudrate = 9600
 };
    1218:	de 01       	movw	r26, r28
    121a:	1a 96       	adiw	r26, 0x0a	; 10
    121c:	b8 8b       	std	Y+16, r27	; 0x10
    121e:	af 87       	std	Y+15, r26	; 0x0f
    1220:	ea ec       	ldi	r30, 0xCA	; 202
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	fa 8b       	std	Y+18, r31	; 0x12
    1226:	e9 8b       	std	Y+17, r30	; 0x11
    1228:	f5 e0       	ldi	r31, 0x05	; 5
    122a:	fb 8b       	std	Y+19, r31	; 0x13
    122c:	a9 89       	ldd	r26, Y+17	; 0x11
    122e:	ba 89       	ldd	r27, Y+18	; 0x12
    1230:	0c 90       	ld	r0, X
    1232:	e9 89       	ldd	r30, Y+17	; 0x11
    1234:	fa 89       	ldd	r31, Y+18	; 0x12
    1236:	31 96       	adiw	r30, 0x01	; 1
    1238:	fa 8b       	std	Y+18, r31	; 0x12
    123a:	e9 8b       	std	Y+17, r30	; 0x11
    123c:	af 85       	ldd	r26, Y+15	; 0x0f
    123e:	b8 89       	ldd	r27, Y+16	; 0x10
    1240:	0c 92       	st	X, r0
    1242:	ef 85       	ldd	r30, Y+15	; 0x0f
    1244:	f8 89       	ldd	r31, Y+16	; 0x10
    1246:	31 96       	adiw	r30, 0x01	; 1
    1248:	f8 8b       	std	Y+16, r31	; 0x10
    124a:	ef 87       	std	Y+15, r30	; 0x0f
    124c:	fb 89       	ldd	r31, Y+19	; 0x13
    124e:	f1 50       	subi	r31, 0x01	; 1
    1250:	fb 8b       	std	Y+19, r31	; 0x13
    1252:	8b 89       	ldd	r24, Y+19	; 0x13
    1254:	88 23       	and	r24, r24
    1256:	51 f7       	brne	.-44     	; 0x122c <main+0x3e>

 UART_Config_Ptr=&UART_Config;
    1258:	ce 01       	movw	r24, r28
    125a:	0a 96       	adiw	r24, 0x0a	; 10
    125c:	90 93 d4 00 	sts	0x00D4, r25
    1260:	80 93 d3 00 	sts	0x00D3, r24


 /* LCD Init */
 LCD_Init();
    1264:	0e 94 39 0b 	call	0x1672	; 0x1672 <LCD_Init>

 /*UART Init */

 UART_init(UART_Config_Ptr);
    1268:	80 91 d3 00 	lds	r24, 0x00D3
    126c:	90 91 d4 00 	lds	r25, 0x00D4
    1270:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_init>
    1274:	13 c0       	rjmp	.+38     	; 0x129c <main+0xae>
{


   while(System_State==0)
    {
	    HMI_System_Init(); /* Adding password */
    1276:	0e 94 c4 09 	call	0x1388	; 0x1388 <HMI_System_Init>
	    UART_sendString(G_strptr1); /* Sending The First String */
    127a:	81 ee       	ldi	r24, 0xE1	; 225
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <UART_sendString>
	    UART_sendString(G_strptr2); /* Sending The Second String */
    1282:	85 ed       	ldi	r24, 0xD5	; 213
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <UART_sendString>
	    System_State=UART_recieveByte(); /* Wait To Receive The State */
    128a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <UART_recieveByte>
    128e:	80 93 d0 00 	sts	0x00D0, r24
        System_State=System_State - '0'; /* Getting The Number From The ASCII VALUE */
    1292:	80 91 d0 00 	lds	r24, 0x00D0
    1296:	80 53       	subi	r24, 0x30	; 48
    1298:	80 93 d0 00 	sts	0x00D0, r24

while (1)
{


   while(System_State==0)
    129c:	80 91 d0 00 	lds	r24, 0x00D0
    12a0:	88 23       	and	r24, r24
    12a2:	49 f3       	breq	.-46     	; 0x1276 <main+0x88>
    12a4:	6b c0       	rjmp	.+214    	; 0x137c <main+0x18e>
        System_State=System_State - '0'; /* Getting The Number From The ASCII VALUE */
    }
    while(System_State==1)
    {
    	/* Displaying The Main Menu */
    	LCD_ClearScreen();
    12a6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_ClearScreen>
    	LCD_MoveAndDisplayString("+ : Open Door",0,0);
    12aa:	80 e6       	ldi	r24, 0x60	; 96
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <LCD_MoveAndDisplayString>
    	LCD_MoveAndDisplayString("- : Change Pass", 1 ,0);
    12b6:	8e e6       	ldi	r24, 0x6E	; 110
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	40 e0       	ldi	r20, 0x00	; 0
    12be:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <LCD_MoveAndDisplayString>

    	/*  Getting The Input */
    	menu=KEYPAD_getPressedKey();
    12c2:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <KEYPAD_getPressedKey>
    12c6:	8b 83       	std	Y+3, r24	; 0x03

    	/* Cheking The input */
    if (menu == '+')
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	8b 32       	cpi	r24, 0x2B	; 43
    12cc:	41 f5       	brne	.+80     	; 0x131e <main+0x130>
    12ce:	20 c0       	rjmp	.+64     	; 0x1310 <main+0x122>
    {
      while (pass == 0)
      {
        LCD_ClearScreen();
    12d0:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_ClearScreen>
        LCD_MoveAndDisplayString("Plz Enter Pass: ", 0 , 0);
    12d4:	8e e7       	ldi	r24, 0x7E	; 126
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <LCD_MoveAndDisplayString>
        LCD_MoveCursor(1, 0);
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_MoveCursor>
        Get_Input(pass_array); /* Get The Input */
    12e8:	ce 01       	movw	r24, r28
    12ea:	04 96       	adiw	r24, 0x04	; 4
    12ec:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <Get_Input>
        UART_sendString(pass_array); /* Send For Comparison */
    12f0:	ce 01       	movw	r24, r28
    12f2:	04 96       	adiw	r24, 0x04	; 4
    12f4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <UART_sendString>
        pass = UART_recieveByte() ; /* Get The Check Result */
    12f8:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <UART_recieveByte>
    12fc:	8a 83       	std	Y+2, r24	; 0x02

        if(pass==1)
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	19 f4       	brne	.+6      	; 0x130a <main+0x11c>
        {
        	pass_count=3;
    1304:	83 e0       	ldi	r24, 0x03	; 3
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <main+0x122>
        }
        else
        {
        	pass_count++;
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	8f 5f       	subi	r24, 0xFF	; 255
    130e:	89 83       	std	Y+1, r24	; 0x01
    	menu=KEYPAD_getPressedKey();

    	/* Cheking The input */
    if (menu == '+')
    {
      while (pass == 0)
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	88 23       	and	r24, r24
    1314:	e9 f2       	breq	.-70     	; 0x12d0 <main+0xe2>


      }


      pass=0;
    1316:	1a 82       	std	Y+2, r1	; 0x02
      pass_count=0;
    1318:	19 82       	std	Y+1, r1	; 0x01
      menu=0;
    131a:	1b 82       	std	Y+3, r1	; 0x03
    131c:	2f c0       	rjmp	.+94     	; 0x137c <main+0x18e>

    }

    else if (menu == '-')
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	8d 32       	cpi	r24, 0x2D	; 45
    1322:	61 f5       	brne	.+88     	; 0x137c <main+0x18e>
    1324:	20 c0       	rjmp	.+64     	; 0x1366 <main+0x178>
    {

    	while (pass_count <3 )
    	   {
    	        LCD_ClearScreen();
    1326:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_ClearScreen>
    	        LCD_MoveAndDisplayString("Plz Enter Pass: ", 0 , 0);
    132a:	8e e7       	ldi	r24, 0x7E	; 126
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <LCD_MoveAndDisplayString>
    	        LCD_MoveCursor(1, 0);
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_MoveCursor>
    	        Get_Input(pass_array); /* Get The Input */
    133e:	ce 01       	movw	r24, r28
    1340:	04 96       	adiw	r24, 0x04	; 4
    1342:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <Get_Input>
    	        UART_sendString(pass_array); /* Send For Comparison */
    1346:	ce 01       	movw	r24, r28
    1348:	04 96       	adiw	r24, 0x04	; 4
    134a:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <UART_sendString>
    	        pass = UART_recieveByte() ; /* Get The Check Result */
    134e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <UART_recieveByte>
    1352:	8a 83       	std	Y+2, r24	; 0x02
    	        if(pass==1)
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	19 f4       	brne	.+6      	; 0x1360 <main+0x172>
    	        {
    	        	pass_count=3;
    135a:	83 e0       	ldi	r24, 0x03	; 3
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <main+0x178>
    	        }
    	        else
    	        {
    	        	pass_count++;
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	8f 5f       	subi	r24, 0xFF	; 255
    1364:	89 83       	std	Y+1, r24	; 0x01
    }

    else if (menu == '-')
    {

    	while (pass_count <3 )
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	e8 f2       	brcs	.-70     	; 0x1326 <main+0x138>
    	        }

    	   }


    	if(pass==3)
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	11 f4       	brne	.+4      	; 0x1376 <main+0x188>
    	{
           HMI_System_Init();
    1372:	0e 94 c4 09 	call	0x1388	; 0x1388 <HMI_System_Init>


    	}

        pass=0;
    1376:	1a 82       	std	Y+2, r1	; 0x02
        pass_count=0;
    1378:	19 82       	std	Y+1, r1	; 0x01
        menu=0;
    137a:	1b 82       	std	Y+3, r1	; 0x03
	    UART_sendString(G_strptr1); /* Sending The First String */
	    UART_sendString(G_strptr2); /* Sending The Second String */
	    System_State=UART_recieveByte(); /* Wait To Receive The State */
        System_State=System_State - '0'; /* Getting The Number From The ASCII VALUE */
    }
    while(System_State==1)
    137c:	80 91 d0 00 	lds	r24, 0x00D0
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	09 f4       	brne	.+2      	; 0x1386 <main+0x198>
    1384:	90 cf       	rjmp	.-224    	; 0x12a6 <main+0xb8>
    1386:	8a cf       	rjmp	.-236    	; 0x129c <main+0xae>

00001388 <HMI_System_Init>:

/*******************************************************************************
 *                              Functions                                      *
 *******************************************************************************/
void HMI_System_Init(void)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	0f 92       	push	r0
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	uint8 done=0xff;
    1392:	8f ef       	ldi	r24, 0xFF	; 255
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	21 c0       	rjmp	.+66     	; 0x13da <HMI_System_Init+0x52>
	while( done )
	  {

	LCD_DisplayString("Plz Enter Pass : "); /* Display Enter Password */
    1398:	8f e8       	ldi	r24, 0x8F	; 143
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_DisplayString>
    LCD_MoveCursor(1,0);  /* To Start From The next Lcd Line */
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_MoveCursor>

    /* Saving The Pressed Keys To The First Variable */
    Get_Input(G_strptr1);
    13a8:	81 ee       	ldi	r24, 0xE1	; 225
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <Get_Input>

    /* Clearing the Screen And Asking For the pass Again */
	LCD_ClearScreen();
    13b0:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_ClearScreen>
	LCD_MoveAndDisplayString("Please Re-enter The ", 0, 0);
    13b4:	81 ea       	ldi	r24, 0xA1	; 161
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <LCD_MoveAndDisplayString>
	LCD_MoveAndDisplayString("Same Pass: ", 1, 0);
    13c0:	86 eb       	ldi	r24, 0xB6	; 182
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <LCD_MoveAndDisplayString>

	/* Saving The Pressed Keys To The 2nd Variable */
	Get_Input(G_strptr2);
    13cc:	85 ed       	ldi	r24, 0xD5	; 213
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <Get_Input>

	/* Wait To Have An Ach For Completing receiving */
    done=UART_recieveByte();
    13d4:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <UART_recieveByte>
    13d8:	89 83       	std	Y+1, r24	; 0x01
 *                              Functions                                      *
 *******************************************************************************/
void HMI_System_Init(void)
{
	uint8 done=0xff;
	while( done )
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	88 23       	and	r24, r24
    13de:	e1 f6       	brne	.-72     	; 0x1398 <HMI_System_Init+0x10>


	}


}
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <Get_Input>:

void Get_Input (uint8* ptr)
{
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <Get_Input+0xa>
    13f2:	0f 92       	push	r0
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	9b 83       	std	Y+3, r25	; 0x03
    13fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count =0;
    13fc:	19 82       	std	Y+1, r1	; 0x01
    13fe:	12 c0       	rjmp	.+36     	; 0x1424 <Get_Input+0x3c>
	   while (ptr[count] != '=')
		{
		    ptr[count]=KEYPAD_getPressedKey();
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	9b 81       	ldd	r25, Y+3	; 0x03
    140a:	8c 01       	movw	r16, r24
    140c:	02 0f       	add	r16, r18
    140e:	13 1f       	adc	r17, r19
    1410:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <KEYPAD_getPressedKey>
    1414:	f8 01       	movw	r30, r16
    1416:	80 83       	st	Z, r24
		    LCD_DisplayChar('*');
    1418:	8a e2       	ldi	r24, 0x2A	; 42
    141a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <LCD_DisplayChar>
		    count++;
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	89 83       	std	Y+1, r24	; 0x01
}

void Get_Input (uint8* ptr)
{
	uint8 count =0;
	   while (ptr[count] != '=')
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	9b 81       	ldd	r25, Y+3	; 0x03
    142e:	fc 01       	movw	r30, r24
    1430:	e2 0f       	add	r30, r18
    1432:	f3 1f       	adc	r31, r19
    1434:	80 81       	ld	r24, Z
    1436:	8d 33       	cpi	r24, 0x3D	; 61
    1438:	19 f7       	brne	.-58     	; 0x1400 <Get_Input+0x18>
		{
		    ptr[count]=KEYPAD_getPressedKey();
		    LCD_DisplayChar('*');
		    count++;
		}
	     ptr[count]='\0';
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	fc 01       	movw	r30, r24
    1446:	e2 0f       	add	r30, r18
    1448:	f3 1f       	adc	r31, r19
    144a:	10 82       	st	Z, r1

}
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	08 95       	ret

0000145c <LCD_SendCommand>:




void LCD_SendCommand(uint8 Comm) /* Send Commands Func */
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	6d 97       	sbiw	r28, 0x1d	; 29
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	8d 8f       	std	Y+29, r24	; 0x1d

	GPIO_writePin(LCD_RS_E_PORT,LCD_RS_PIN,PLOW); /* LCD RS Command Select */
    1472:	83 e0       	ldi	r24, 0x03	; 3
    1474:	66 e0       	ldi	r22, 0x06	; 6
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a0 e8       	ldi	r26, 0x80	; 128
    1482:	bf e3       	ldi	r27, 0x3F	; 63
    1484:	89 8f       	std	Y+25, r24	; 0x19
    1486:	9a 8f       	std	Y+26, r25	; 0x1a
    1488:	ab 8f       	std	Y+27, r26	; 0x1b
    148a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148c:	69 8d       	ldd	r22, Y+25	; 0x19
    148e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	4a e7       	ldi	r20, 0x7A	; 122
    149a:	53 e4       	ldi	r21, 0x43	; 67
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8d 8b       	std	Y+21, r24	; 0x15
    14a6:	9e 8b       	std	Y+22, r25	; 0x16
    14a8:	af 8b       	std	Y+23, r26	; 0x17
    14aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14ac:	6d 89       	ldd	r22, Y+21	; 0x15
    14ae:	7e 89       	ldd	r23, Y+22	; 0x16
    14b0:	8f 89       	ldd	r24, Y+23	; 0x17
    14b2:	98 8d       	ldd	r25, Y+24	; 0x18
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	2c f4       	brge	.+10     	; 0x14ce <LCD_SendCommand+0x72>
		__ticks = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9c 8b       	std	Y+20, r25	; 0x14
    14ca:	8b 8b       	std	Y+19, r24	; 0x13
    14cc:	3f c0       	rjmp	.+126    	; 0x154c <LCD_SendCommand+0xf0>
	else if (__tmp > 65535)
    14ce:	6d 89       	ldd	r22, Y+21	; 0x15
    14d0:	7e 89       	ldd	r23, Y+22	; 0x16
    14d2:	8f 89       	ldd	r24, Y+23	; 0x17
    14d4:	98 8d       	ldd	r25, Y+24	; 0x18
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	57 e4       	ldi	r21, 0x47	; 71
    14de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	4c f5       	brge	.+82     	; 0x1538 <LCD_SendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e6:	69 8d       	ldd	r22, Y+25	; 0x19
    14e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e2       	ldi	r20, 0x20	; 32
    14f4:	51 e4       	ldi	r21, 0x41	; 65
    14f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	9c 8b       	std	Y+20, r25	; 0x14
    150c:	8b 8b       	std	Y+19, r24	; 0x13
    150e:	0f c0       	rjmp	.+30     	; 0x152e <LCD_SendCommand+0xd2>
    1510:	89 e1       	ldi	r24, 0x19	; 25
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9a 8b       	std	Y+18, r25	; 0x12
    1516:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1518:	89 89       	ldd	r24, Y+17	; 0x11
    151a:	9a 89       	ldd	r25, Y+18	; 0x12
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <LCD_SendCommand+0xc0>
    1520:	9a 8b       	std	Y+18, r25	; 0x12
    1522:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1524:	8b 89       	ldd	r24, Y+19	; 0x13
    1526:	9c 89       	ldd	r25, Y+20	; 0x14
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	9c 8b       	std	Y+20, r25	; 0x14
    152c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	8b 89       	ldd	r24, Y+19	; 0x13
    1530:	9c 89       	ldd	r25, Y+20	; 0x14
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	69 f7       	brne	.-38     	; 0x1510 <LCD_SendCommand+0xb4>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <LCD_SendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1538:	6d 89       	ldd	r22, Y+21	; 0x15
    153a:	7e 89       	ldd	r23, Y+22	; 0x16
    153c:	8f 89       	ldd	r24, Y+23	; 0x17
    153e:	98 8d       	ldd	r25, Y+24	; 0x18
    1540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9c 8b       	std	Y+20, r25	; 0x14
    154a:	8b 8b       	std	Y+19, r24	; 0x13
    154c:	8b 89       	ldd	r24, Y+19	; 0x13
    154e:	9c 89       	ldd	r25, Y+20	; 0x14
    1550:	98 8b       	std	Y+16, r25	; 0x10
    1552:	8f 87       	std	Y+15, r24	; 0x0f
    1554:	8f 85       	ldd	r24, Y+15	; 0x0f
    1556:	98 89       	ldd	r25, Y+16	; 0x10
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <LCD_SendCommand+0xfc>
    155c:	98 8b       	std	Y+16, r25	; 0x10
    155e:	8f 87       	std	Y+15, r24	; 0x0f


#elif   LCD_PINNUMBER==8 /* Used 8 bits */


		   GPIO_writePort(LCD_PORT, Comm);
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1564:	0e 94 74 08 	call	0x10e8	; 0x10e8 <GPIO_writePort>

	  /* Enable Sending */
		GPIO_writePin(LCD_RS_E_PORT,LCD_E_PIN,PHIGH);
    1568:	83 e0       	ldi	r24, 0x03	; 3
    156a:	67 e0       	ldi	r22, 0x07	; 7
    156c:	41 e0       	ldi	r20, 0x01	; 1
    156e:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a0 e0       	ldi	r26, 0x00	; 0
    1578:	b0 e4       	ldi	r27, 0x40	; 64
    157a:	8b 87       	std	Y+11, r24	; 0x0b
    157c:	9c 87       	std	Y+12, r25	; 0x0c
    157e:	ad 87       	std	Y+13, r26	; 0x0d
    1580:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1582:	6b 85       	ldd	r22, Y+11	; 0x0b
    1584:	7c 85       	ldd	r23, Y+12	; 0x0c
    1586:	8d 85       	ldd	r24, Y+13	; 0x0d
    1588:	9e 85       	ldd	r25, Y+14	; 0x0e
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	4a e7       	ldi	r20, 0x7A	; 122
    1590:	53 e4       	ldi	r21, 0x43	; 67
    1592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	8f 83       	std	Y+7, r24	; 0x07
    159c:	98 87       	std	Y+8, r25	; 0x08
    159e:	a9 87       	std	Y+9, r26	; 0x09
    15a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15a2:	6f 81       	ldd	r22, Y+7	; 0x07
    15a4:	78 85       	ldd	r23, Y+8	; 0x08
    15a6:	89 85       	ldd	r24, Y+9	; 0x09
    15a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e8       	ldi	r20, 0x80	; 128
    15b0:	5f e3       	ldi	r21, 0x3F	; 63
    15b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b6:	88 23       	and	r24, r24
    15b8:	2c f4       	brge	.+10     	; 0x15c4 <LCD_SendCommand+0x168>
		__ticks = 1;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9e 83       	std	Y+6, r25	; 0x06
    15c0:	8d 83       	std	Y+5, r24	; 0x05
    15c2:	3f c0       	rjmp	.+126    	; 0x1642 <LCD_SendCommand+0x1e6>
	else if (__tmp > 65535)
    15c4:	6f 81       	ldd	r22, Y+7	; 0x07
    15c6:	78 85       	ldd	r23, Y+8	; 0x08
    15c8:	89 85       	ldd	r24, Y+9	; 0x09
    15ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	3f ef       	ldi	r19, 0xFF	; 255
    15d0:	4f e7       	ldi	r20, 0x7F	; 127
    15d2:	57 e4       	ldi	r21, 0x47	; 71
    15d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d8:	18 16       	cp	r1, r24
    15da:	4c f5       	brge	.+82     	; 0x162e <LCD_SendCommand+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15de:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e2       	ldi	r20, 0x20	; 32
    15ea:	51 e4       	ldi	r21, 0x41	; 65
    15ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	9e 83       	std	Y+6, r25	; 0x06
    1602:	8d 83       	std	Y+5, r24	; 0x05
    1604:	0f c0       	rjmp	.+30     	; 0x1624 <LCD_SendCommand+0x1c8>
    1606:	89 e1       	ldi	r24, 0x19	; 25
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	9c 83       	std	Y+4, r25	; 0x04
    160c:	8b 83       	std	Y+3, r24	; 0x03
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <LCD_SendCommand+0x1b6>
    1616:	9c 83       	std	Y+4, r25	; 0x04
    1618:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	9e 83       	std	Y+6, r25	; 0x06
    1622:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	9e 81       	ldd	r25, Y+6	; 0x06
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	69 f7       	brne	.-38     	; 0x1606 <LCD_SendCommand+0x1aa>
    162c:	14 c0       	rjmp	.+40     	; 0x1656 <LCD_SendCommand+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    162e:	6f 81       	ldd	r22, Y+7	; 0x07
    1630:	78 85       	ldd	r23, Y+8	; 0x08
    1632:	89 85       	ldd	r24, Y+9	; 0x09
    1634:	9a 85       	ldd	r25, Y+10	; 0x0a
    1636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	9e 83       	std	Y+6, r25	; 0x06
    1640:	8d 83       	std	Y+5, r24	; 0x05
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	9e 81       	ldd	r25, Y+6	; 0x06
    1646:	9a 83       	std	Y+2, r25	; 0x02
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <LCD_SendCommand+0x1f2>
    1652:	9a 83       	std	Y+2, r25	; 0x02
    1654:	89 83       	std	Y+1, r24	; 0x01

		/* Delay for Some Seconds */
		_delay_ms(2);

		/* Disable Sending */
		GPIO_writePin(LCD_RS_E_PORT,LCD_E_PIN,PLOW);
    1656:	83 e0       	ldi	r24, 0x03	; 3
    1658:	67 e0       	ldi	r22, 0x07	; 7
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
#endif



}
    1660:	6d 96       	adiw	r28, 0x1d	; 29
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <LCD_Init>:


void LCD_Init(void) /* Init Func */
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	2e 97       	sbiw	r28, 0x0e	; 14
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a0 e2       	ldi	r26, 0x20	; 32
    168c:	b2 e4       	ldi	r27, 0x42	; 66
    168e:	8b 87       	std	Y+11, r24	; 0x0b
    1690:	9c 87       	std	Y+12, r25	; 0x0c
    1692:	ad 87       	std	Y+13, r26	; 0x0d
    1694:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1696:	6b 85       	ldd	r22, Y+11	; 0x0b
    1698:	7c 85       	ldd	r23, Y+12	; 0x0c
    169a:	8d 85       	ldd	r24, Y+13	; 0x0d
    169c:	9e 85       	ldd	r25, Y+14	; 0x0e
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	4a e7       	ldi	r20, 0x7A	; 122
    16a4:	53 e4       	ldi	r21, 0x43	; 67
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	8f 83       	std	Y+7, r24	; 0x07
    16b0:	98 87       	std	Y+8, r25	; 0x08
    16b2:	a9 87       	std	Y+9, r26	; 0x09
    16b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b6:	6f 81       	ldd	r22, Y+7	; 0x07
    16b8:	78 85       	ldd	r23, Y+8	; 0x08
    16ba:	89 85       	ldd	r24, Y+9	; 0x09
    16bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e8       	ldi	r20, 0x80	; 128
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ca:	88 23       	and	r24, r24
    16cc:	2c f4       	brge	.+10     	; 0x16d8 <LCD_Init+0x66>
		__ticks = 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	8d 83       	std	Y+5, r24	; 0x05
    16d6:	3f c0       	rjmp	.+126    	; 0x1756 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    16d8:	6f 81       	ldd	r22, Y+7	; 0x07
    16da:	78 85       	ldd	r23, Y+8	; 0x08
    16dc:	89 85       	ldd	r24, Y+9	; 0x09
    16de:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	3f ef       	ldi	r19, 0xFF	; 255
    16e4:	4f e7       	ldi	r20, 0x7F	; 127
    16e6:	57 e4       	ldi	r21, 0x47	; 71
    16e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	4c f5       	brge	.+82     	; 0x1742 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e2       	ldi	r20, 0x20	; 32
    16fe:	51 e4       	ldi	r21, 0x41	; 65
    1700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	9e 83       	std	Y+6, r25	; 0x06
    1716:	8d 83       	std	Y+5, r24	; 0x05
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <LCD_Init+0xc6>
    171a:	89 e1       	ldi	r24, 0x19	; 25
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9c 83       	std	Y+4, r25	; 0x04
    1720:	8b 83       	std	Y+3, r24	; 0x03
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_Init+0xb4>
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
    1730:	9e 81       	ldd	r25, Y+6	; 0x06
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	9e 83       	std	Y+6, r25	; 0x06
    1736:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	9e 81       	ldd	r25, Y+6	; 0x06
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	69 f7       	brne	.-38     	; 0x171a <LCD_Init+0xa8>
    1740:	14 c0       	rjmp	.+40     	; 0x176a <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1742:	6f 81       	ldd	r22, Y+7	; 0x07
    1744:	78 85       	ldd	r23, Y+8	; 0x08
    1746:	89 85       	ldd	r24, Y+9	; 0x09
    1748:	9a 85       	ldd	r25, Y+10	; 0x0a
    174a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	9e 83       	std	Y+6, r25	; 0x06
    1754:	8d 83       	std	Y+5, r24	; 0x05
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	9e 81       	ldd	r25, Y+6	; 0x06
    175a:	9a 83       	std	Y+2, r25	; 0x02
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	9a 81       	ldd	r25, Y+2	; 0x02
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	f1 f7       	brne	.-4      	; 0x1762 <LCD_Init+0xf0>
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40); /* Delay As Data Sheet */


	/* Make Enable Pin Output */
	GPIO_setupPinDirection(LCD_RS_E_PORT, LCD_E_PIN, POUTPUT);
    176a:	83 e0       	ldi	r24, 0x03	; 3
    176c:	67 e0       	ldi	r22, 0x07	; 7
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	/* Make RS Pin Output */
    GPIO_setupPinDirection(LCD_RS_E_PORT, LCD_RS_PIN, POUTPUT);
    1774:	83 e0       	ldi	r24, 0x03	; 3
    1776:	66 e0       	ldi	r22, 0x06	; 6
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

#if LCD_PINNUMBER==8
	/* LCD PORTS Init */
	GPIO_setupPortDirection(LCD_PORT, PORTOUT);
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	6f ef       	ldi	r22, 0xFF	; 255
    1782:	0e 94 33 08 	call	0x1066	; 0x1066 <GPIO_setupPortDirection>
	GPIO_setupPinDirection(LCD_PORT, LCD_PIN3, POUTPUT);

#endif

	/* Mode Selection */
	LCD_SendCommand(LCD_INITCOMM);
    1786:	88 e3       	ldi	r24, 0x38	; 56
    1788:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_SendCommand>

	/* Display and Cursor Selection */
	LCD_SendCommand(LCD_DisplayOnCursorOff);
    178c:	8c e0       	ldi	r24, 0x0C	; 12
    178e:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_SendCommand>

	/* Clear Screen */
	LCD_SendCommand(LCD_CLEAR);
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_SendCommand>
}
    1798:	2e 96       	adiw	r28, 0x0e	; 14
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <LCD_DisplayChar>:




void LCD_DisplayChar(uint8 data) /* Send char Func */
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	6d 97       	sbiw	r28, 0x1d	; 29
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	8d 8f       	std	Y+29, r24	; 0x1d


	GPIO_writePin(LCD_RS_E_PORT,LCD_RS_PIN,PHIGH); /* LCD RS Command Select */ /* LCD RS Command Select */
    17c0:	83 e0       	ldi	r24, 0x03	; 3
    17c2:	66 e0       	ldi	r22, 0x06	; 6
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	a0 e8       	ldi	r26, 0x80	; 128
    17d0:	bf e3       	ldi	r27, 0x3F	; 63
    17d2:	89 8f       	std	Y+25, r24	; 0x19
    17d4:	9a 8f       	std	Y+26, r25	; 0x1a
    17d6:	ab 8f       	std	Y+27, r26	; 0x1b
    17d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17da:	69 8d       	ldd	r22, Y+25	; 0x19
    17dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	4a e7       	ldi	r20, 0x7A	; 122
    17e8:	53 e4       	ldi	r21, 0x43	; 67
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	8d 8b       	std	Y+21, r24	; 0x15
    17f4:	9e 8b       	std	Y+22, r25	; 0x16
    17f6:	af 8b       	std	Y+23, r26	; 0x17
    17f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17fa:	6d 89       	ldd	r22, Y+21	; 0x15
    17fc:	7e 89       	ldd	r23, Y+22	; 0x16
    17fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1800:	98 8d       	ldd	r25, Y+24	; 0x18
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	5f e3       	ldi	r21, 0x3F	; 63
    180a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    180e:	88 23       	and	r24, r24
    1810:	2c f4       	brge	.+10     	; 0x181c <LCD_DisplayChar+0x72>
		__ticks = 1;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9c 8b       	std	Y+20, r25	; 0x14
    1818:	8b 8b       	std	Y+19, r24	; 0x13
    181a:	3f c0       	rjmp	.+126    	; 0x189a <LCD_DisplayChar+0xf0>
	else if (__tmp > 65535)
    181c:	6d 89       	ldd	r22, Y+21	; 0x15
    181e:	7e 89       	ldd	r23, Y+22	; 0x16
    1820:	8f 89       	ldd	r24, Y+23	; 0x17
    1822:	98 8d       	ldd	r25, Y+24	; 0x18
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	3f ef       	ldi	r19, 0xFF	; 255
    1828:	4f e7       	ldi	r20, 0x7F	; 127
    182a:	57 e4       	ldi	r21, 0x47	; 71
    182c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1830:	18 16       	cp	r1, r24
    1832:	4c f5       	brge	.+82     	; 0x1886 <LCD_DisplayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1834:	69 8d       	ldd	r22, Y+25	; 0x19
    1836:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1838:	8b 8d       	ldd	r24, Y+27	; 0x1b
    183a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e2       	ldi	r20, 0x20	; 32
    1842:	51 e4       	ldi	r21, 0x41	; 65
    1844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	9c 8b       	std	Y+20, r25	; 0x14
    185a:	8b 8b       	std	Y+19, r24	; 0x13
    185c:	0f c0       	rjmp	.+30     	; 0x187c <LCD_DisplayChar+0xd2>
    185e:	89 e1       	ldi	r24, 0x19	; 25
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9a 8b       	std	Y+18, r25	; 0x12
    1864:	89 8b       	std	Y+17, r24	; 0x11
    1866:	89 89       	ldd	r24, Y+17	; 0x11
    1868:	9a 89       	ldd	r25, Y+18	; 0x12
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <LCD_DisplayChar+0xc0>
    186e:	9a 8b       	std	Y+18, r25	; 0x12
    1870:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1872:	8b 89       	ldd	r24, Y+19	; 0x13
    1874:	9c 89       	ldd	r25, Y+20	; 0x14
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	9c 8b       	std	Y+20, r25	; 0x14
    187a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187c:	8b 89       	ldd	r24, Y+19	; 0x13
    187e:	9c 89       	ldd	r25, Y+20	; 0x14
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	69 f7       	brne	.-38     	; 0x185e <LCD_DisplayChar+0xb4>
    1884:	14 c0       	rjmp	.+40     	; 0x18ae <LCD_DisplayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1886:	6d 89       	ldd	r22, Y+21	; 0x15
    1888:	7e 89       	ldd	r23, Y+22	; 0x16
    188a:	8f 89       	ldd	r24, Y+23	; 0x17
    188c:	98 8d       	ldd	r25, Y+24	; 0x18
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	9c 8b       	std	Y+20, r25	; 0x14
    1898:	8b 8b       	std	Y+19, r24	; 0x13
    189a:	8b 89       	ldd	r24, Y+19	; 0x13
    189c:	9c 89       	ldd	r25, Y+20	; 0x14
    189e:	98 8b       	std	Y+16, r25	; 0x10
    18a0:	8f 87       	std	Y+15, r24	; 0x0f
    18a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a4:	98 89       	ldd	r25, Y+16	; 0x10
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <LCD_DisplayChar+0xfc>
    18aa:	98 8b       	std	Y+16, r25	; 0x10
    18ac:	8f 87       	std	Y+15, r24	; 0x0f


#elif   LCD_PINNUMBER==8 /* Used 8 bits */


	   GPIO_writePort(LCD_PORT, data);
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    18b2:	0e 94 74 08 	call	0x10e8	; 0x10e8 <GPIO_writePort>

	  /* Enable Sending */
		GPIO_writePin(LCD_RS_E_PORT,LCD_E_PIN,PHIGH);
    18b6:	83 e0       	ldi	r24, 0x03	; 3
    18b8:	67 e0       	ldi	r22, 0x07	; 7
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a0 e0       	ldi	r26, 0x00	; 0
    18c6:	b0 e4       	ldi	r27, 0x40	; 64
    18c8:	8b 87       	std	Y+11, r24	; 0x0b
    18ca:	9c 87       	std	Y+12, r25	; 0x0c
    18cc:	ad 87       	std	Y+13, r26	; 0x0d
    18ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	4a e7       	ldi	r20, 0x7A	; 122
    18de:	53 e4       	ldi	r21, 0x43	; 67
    18e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	8f 83       	std	Y+7, r24	; 0x07
    18ea:	98 87       	std	Y+8, r25	; 0x08
    18ec:	a9 87       	std	Y+9, r26	; 0x09
    18ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f0:	6f 81       	ldd	r22, Y+7	; 0x07
    18f2:	78 85       	ldd	r23, Y+8	; 0x08
    18f4:	89 85       	ldd	r24, Y+9	; 0x09
    18f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e8       	ldi	r20, 0x80	; 128
    18fe:	5f e3       	ldi	r21, 0x3F	; 63
    1900:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1904:	88 23       	and	r24, r24
    1906:	2c f4       	brge	.+10     	; 0x1912 <LCD_DisplayChar+0x168>
		__ticks = 1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9e 83       	std	Y+6, r25	; 0x06
    190e:	8d 83       	std	Y+5, r24	; 0x05
    1910:	3f c0       	rjmp	.+126    	; 0x1990 <LCD_DisplayChar+0x1e6>
	else if (__tmp > 65535)
    1912:	6f 81       	ldd	r22, Y+7	; 0x07
    1914:	78 85       	ldd	r23, Y+8	; 0x08
    1916:	89 85       	ldd	r24, Y+9	; 0x09
    1918:	9a 85       	ldd	r25, Y+10	; 0x0a
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	3f ef       	ldi	r19, 0xFF	; 255
    191e:	4f e7       	ldi	r20, 0x7F	; 127
    1920:	57 e4       	ldi	r21, 0x47	; 71
    1922:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1926:	18 16       	cp	r1, r24
    1928:	4c f5       	brge	.+82     	; 0x197c <LCD_DisplayChar+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192a:	6b 85       	ldd	r22, Y+11	; 0x0b
    192c:	7c 85       	ldd	r23, Y+12	; 0x0c
    192e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1930:	9e 85       	ldd	r25, Y+14	; 0x0e
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e2       	ldi	r20, 0x20	; 32
    1938:	51 e4       	ldi	r21, 0x41	; 65
    193a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9e 83       	std	Y+6, r25	; 0x06
    1950:	8d 83       	std	Y+5, r24	; 0x05
    1952:	0f c0       	rjmp	.+30     	; 0x1972 <LCD_DisplayChar+0x1c8>
    1954:	89 e1       	ldi	r24, 0x19	; 25
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9c 83       	std	Y+4, r25	; 0x04
    195a:	8b 83       	std	Y+3, r24	; 0x03
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <LCD_DisplayChar+0x1b6>
    1964:	9c 83       	std	Y+4, r25	; 0x04
    1966:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	9e 83       	std	Y+6, r25	; 0x06
    1970:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	9e 81       	ldd	r25, Y+6	; 0x06
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	69 f7       	brne	.-38     	; 0x1954 <LCD_DisplayChar+0x1aa>
    197a:	14 c0       	rjmp	.+40     	; 0x19a4 <LCD_DisplayChar+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197c:	6f 81       	ldd	r22, Y+7	; 0x07
    197e:	78 85       	ldd	r23, Y+8	; 0x08
    1980:	89 85       	ldd	r24, Y+9	; 0x09
    1982:	9a 85       	ldd	r25, Y+10	; 0x0a
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
    1990:	8d 81       	ldd	r24, Y+5	; 0x05
    1992:	9e 81       	ldd	r25, Y+6	; 0x06
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	9a 81       	ldd	r25, Y+2	; 0x02
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <LCD_DisplayChar+0x1f2>
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	89 83       	std	Y+1, r24	; 0x01

		/* Delay for Some Seconds */
		_delay_ms(2);

		/* Disable Sending */
		GPIO_writePin(LCD_RS_E_PORT,LCD_E_PIN,PLOW);
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	67 e0       	ldi	r22, 0x07	; 7
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>





}
    19ae:	6d 96       	adiw	r28, 0x1d	; 29
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <LCD_DisplayString>:
void LCD_DisplayString(const uint8* data) /* Send String Func */
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <LCD_DisplayString+0x6>
    19c6:	0f 92       	push	r0
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	9b 83       	std	Y+3, r25	; 0x03
    19ce:	8a 83       	std	Y+2, r24	; 0x02
uint8 count=0;
    19d0:	19 82       	std	Y+1, r1	; 0x01
    19d2:	0e c0       	rjmp	.+28     	; 0x19f0 <LCD_DisplayString+0x30>
	/* Looping Over The String till The End and Send data */
    while(*(data+count) != '\0' )
    {
       /* Send Char Via lcd */
    	LCD_DisplayChar(*(data+count));
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	9b 81       	ldd	r25, Y+3	; 0x03
    19de:	fc 01       	movw	r30, r24
    19e0:	e2 0f       	add	r30, r18
    19e2:	f3 1f       	adc	r31, r19
    19e4:	80 81       	ld	r24, Z
    19e6:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <LCD_DisplayChar>

    	/* Increment count */
    	count++;
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	8f 5f       	subi	r24, 0xFF	; 255
    19ee:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_DisplayString(const uint8* data) /* Send String Func */
{
uint8 count=0;
	/* Looping Over The String till The End and Send data */
    while(*(data+count) != '\0' )
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	9b 81       	ldd	r25, Y+3	; 0x03
    19fa:	fc 01       	movw	r30, r24
    19fc:	e2 0f       	add	r30, r18
    19fe:	f3 1f       	adc	r31, r19
    1a00:	80 81       	ld	r24, Z
    1a02:	88 23       	and	r24, r24
    1a04:	39 f7       	brne	.-50     	; 0x19d4 <LCD_DisplayString+0x14>
    	/* Increment count */
    	count++;

    }

}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <LCD_MoveCursor>:
void LCD_MoveCursor(uint8 row,uint8 column)/* Move Cursor Func */
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <LCD_MoveCursor+0x6>
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
    1a20:	6b 83       	std	Y+3, r22	; 0x03



	// Initialising a Variable To store the address we want to write in
		uint8 Address=0;
    1a22:	19 82       	std	Y+1, r1	; 0x01

		// Test cases for the invalid inputs
		if(column>15 || column<0)
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	80 31       	cpi	r24, 0x10	; 16
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <LCD_MoveCursor+0x1a>
		{
			column=0;
    1a2a:	1b 82       	std	Y+3, r1	; 0x03
		}
		if(row != 1 && row != 0 )
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	29 f0       	breq	.+10     	; 0x1a3c <LCD_MoveCursor+0x2a>
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	88 23       	and	r24, r24
    1a36:	11 f0       	breq	.+4      	; 0x1a3c <LCD_MoveCursor+0x2a>
			{
				row=1;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
			}

		// if we want to write at the first row we select the position directlcolumn from column Number
		if(row==0)
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	88 23       	and	r24, r24
    1a40:	19 f4       	brne	.+6      	; 0x1a48 <LCD_MoveCursor+0x36>
		{
			Address=column;
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	06 c0       	rjmp	.+12     	; 0x1a54 <LCD_MoveCursor+0x42>
		}

		/* if we want to write at the 2nd row we select the position
		 * by adding column Number +0x40 (data sheet)*/

		else if(row==1)
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	81 30       	cpi	r24, 0x01	; 1
    1a4c:	19 f4       	brne	.+6      	; 0x1a54 <LCD_MoveCursor+0x42>
			{
				Address=0x40+column;
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	80 5c       	subi	r24, 0xC0	; 192
    1a52:	89 83       	std	Y+1, r24	; 0x01

			}
		// address is 7 bits and MSB must be = 1 (data sheet )
			SET_BIT(Address,7);
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	80 68       	ori	r24, 0x80	; 128
    1a58:	89 83       	std	Y+1, r24	; 0x01
			// sending command to LCD
			LCD_SendCommand(Address);
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_SendCommand>




}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <LCD_MoveAndDisplayString>:


void LCD_MoveAndDisplayString(uint8* data,uint8 row,uint8 column) /* Move Cursor And Display String Func */
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <LCD_MoveAndDisplayString+0x6>
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <LCD_MoveAndDisplayString+0x8>
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	9a 83       	std	Y+2, r25	; 0x02
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	6b 83       	std	Y+3, r22	; 0x03
    1a7e:	4c 83       	std	Y+4, r20	; 0x04
	/* Setting The Cursor to The right position */
	LCD_MoveCursor(row,column);
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	6c 81       	ldd	r22, Y+4	; 0x04
    1a84:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_MoveCursor>

	/* Sending The String */

	LCD_DisplayString(data);
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_DisplayString>

}
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <LCD_ClearScreen>:
void LCD_ClearScreen(void) /* Clear Screen */
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    /* Send Clear Command */
	LCD_SendCommand(LCD_CLEAR);
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_SendCommand>



}
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <LCD_IntegerDisplay>:
void LCD_IntegerDisplay(uint8 data) /* Display Integers */
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	61 97       	sbiw	r28, 0x11	; 17
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	89 8b       	std	Y+17, r24	; 0x11
	char digits[16];/* String to hold the ascii result */
	itoa(data,digits,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1ac8:	89 89       	ldd	r24, Y+17	; 0x11
    1aca:	88 2f       	mov	r24, r24
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9e 01       	movw	r18, r28
    1ad0:	2f 5f       	subi	r18, 0xFF	; 255
    1ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad4:	b9 01       	movw	r22, r18
    1ad6:	4a e0       	ldi	r20, 0x0A	; 10
    1ad8:	50 e0       	ldi	r21, 0x00	; 0
    1ada:	0e 94 b6 10 	call	0x216c	; 0x216c <itoa>
    LCD_DisplayString(digits); /* Display String */
    1ade:	ce 01       	movw	r24, r28
    1ae0:	01 96       	adiw	r24, 0x01	; 1
    1ae2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_DisplayString>

}
    1ae6:	61 96       	adiw	r28, 0x11	; 17
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <__vector_7>:
 /*******************************************************************************
  *                            ISRS                                              *
  *******************************************************************************/

ISR(TIMER1_COMPA_vect)
 {
    1af8:	1f 92       	push	r1
    1afa:	0f 92       	push	r0
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	0f 92       	push	r0
    1b00:	11 24       	eor	r1, r1
    1b02:	2f 93       	push	r18
    1b04:	3f 93       	push	r19
    1b06:	4f 93       	push	r20
    1b08:	5f 93       	push	r21
    1b0a:	6f 93       	push	r22
    1b0c:	7f 93       	push	r23
    1b0e:	8f 93       	push	r24
    1b10:	9f 93       	push	r25
    1b12:	af 93       	push	r26
    1b14:	bf 93       	push	r27
    1b16:	ef 93       	push	r30
    1b18:	ff 93       	push	r31
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
	/* Compare Mode Interrupt*/
	if(G_FuncPtr !=NULL)
    1b22:	80 91 d1 00 	lds	r24, 0x00D1
    1b26:	90 91 d2 00 	lds	r25, 0x00D2
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	29 f0       	breq	.+10     	; 0x1b38 <__vector_7+0x40>
	   (*G_FuncPtr)();
    1b2e:	e0 91 d1 00 	lds	r30, 0x00D1
    1b32:	f0 91 d2 00 	lds	r31, 0x00D2
    1b36:	09 95       	icall

 }
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	ff 91       	pop	r31
    1b3e:	ef 91       	pop	r30
    1b40:	bf 91       	pop	r27
    1b42:	af 91       	pop	r26
    1b44:	9f 91       	pop	r25
    1b46:	8f 91       	pop	r24
    1b48:	7f 91       	pop	r23
    1b4a:	6f 91       	pop	r22
    1b4c:	5f 91       	pop	r21
    1b4e:	4f 91       	pop	r20
    1b50:	3f 91       	pop	r19
    1b52:	2f 91       	pop	r18
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <__vector_9>:

ISR(TIMER1_OVF_vect)
 {
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	2f 93       	push	r18
    1b6a:	3f 93       	push	r19
    1b6c:	4f 93       	push	r20
    1b6e:	5f 93       	push	r21
    1b70:	6f 93       	push	r22
    1b72:	7f 93       	push	r23
    1b74:	8f 93       	push	r24
    1b76:	9f 93       	push	r25
    1b78:	af 93       	push	r26
    1b7a:	bf 93       	push	r27
    1b7c:	ef 93       	push	r30
    1b7e:	ff 93       	push	r31
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
	/* Compare Mode Interrupt*/
	if(G_FuncPtr !=NULL)
    1b88:	80 91 d1 00 	lds	r24, 0x00D1
    1b8c:	90 91 d2 00 	lds	r25, 0x00D2
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	29 f0       	breq	.+10     	; 0x1b9e <__vector_9+0x40>
	   (*G_FuncPtr)();
    1b94:	e0 91 d1 00 	lds	r30, 0x00D1
    1b98:	f0 91 d2 00 	lds	r31, 0x00D2
    1b9c:	09 95       	icall

 }
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	ff 91       	pop	r31
    1ba4:	ef 91       	pop	r30
    1ba6:	bf 91       	pop	r27
    1ba8:	af 91       	pop	r26
    1baa:	9f 91       	pop	r25
    1bac:	8f 91       	pop	r24
    1bae:	7f 91       	pop	r23
    1bb0:	6f 91       	pop	r22
    1bb2:	5f 91       	pop	r21
    1bb4:	4f 91       	pop	r20
    1bb6:	3f 91       	pop	r19
    1bb8:	2f 91       	pop	r18
    1bba:	0f 90       	pop	r0
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	0f 90       	pop	r0
    1bc0:	1f 90       	pop	r1
    1bc2:	18 95       	reti

00001bc4 <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
/* Init Function For Timer 1 Module */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <Timer1_init+0x6>
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A) | (1<<FOC1B); /* Setting These Bits As Working in non PWM Modes */
    1bd2:	ef e4       	ldi	r30, 0x4F	; 79
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	8c e0       	ldi	r24, 0x0C	; 12
    1bd8:	80 83       	st	Z, r24

	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler); /* Adding The Clock Prescaler */
    1bda:	ae e4       	ldi	r26, 0x4E	; 78
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	ee e4       	ldi	r30, 0x4E	; 78
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	98 2f       	mov	r25, r24
    1be6:	98 7f       	andi	r25, 0xF8	; 248
    1be8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bea:	fa 81       	ldd	r31, Y+2	; 0x02
    1bec:	84 81       	ldd	r24, Z+4	; 0x04
    1bee:	89 2b       	or	r24, r25
    1bf0:	8c 93       	st	X, r24

	TCNT1=Config_Ptr->initial_value; /* Inital Counting Value */
    1bf2:	ac e4       	ldi	r26, 0x4C	; 76
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bfa:	80 81       	ld	r24, Z
    1bfc:	91 81       	ldd	r25, Z+1	; 0x01
    1bfe:	11 96       	adiw	r26, 0x01	; 1
    1c00:	9c 93       	st	X, r25
    1c02:	8e 93       	st	-X, r24

	if ( Config_Ptr->mode == TIMER1_COMPAREMODE)
    1c04:	e9 81       	ldd	r30, Y+1	; 0x01
    1c06:	fa 81       	ldd	r31, Y+2	; 0x02
    1c08:	85 81       	ldd	r24, Z+5	; 0x05
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	a9 f4       	brne	.+42     	; 0x1c38 <Timer1_init+0x74>
	{
	/* Enable The Outcompare Mode               */
		TCCR1B = (TCCR1B & 0xF7) | (1<<WGM12);
    1c0e:	ae e4       	ldi	r26, 0x4E	; 78
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	ee e4       	ldi	r30, 0x4E	; 78
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	88 60       	ori	r24, 0x08	; 8
    1c1a:	8c 93       	st	X, r24

	/* Adding The Value To the Compare Register */
		OCR1A = Config_Ptr->compare_value;
    1c1c:	aa e4       	ldi	r26, 0x4A	; 74
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e9 81       	ldd	r30, Y+1	; 0x01
    1c22:	fa 81       	ldd	r31, Y+2	; 0x02
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	11 96       	adiw	r26, 0x01	; 1
    1c2a:	9c 93       	st	X, r25
    1c2c:	8e 93       	st	-X, r24

    /* Enable The Outputcompare Interrupt */
		TIMSK=(1<<OCIE1A);
    1c2e:	e9 e5       	ldi	r30, 0x59	; 89
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 e1       	ldi	r24, 0x10	; 16
    1c34:	80 83       	st	Z, r24
    1c36:	04 c0       	rjmp	.+8      	; 0x1c40 <Timer1_init+0x7c>

	}
	else
		TIMSK=(1<<TOIE1); /* over flow mode interrupt enable */
    1c38:	e9 e5       	ldi	r30, 0x59	; 89
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	84 e0       	ldi	r24, 0x04	; 4
    1c3e:	80 83       	st	Z, r24


}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <Timer1_deInit>:


/* Deinit Function */
void Timer1_deInit(void)
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    1c52:	ef e4       	ldi	r30, 0x4F	; 79
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	10 82       	st	Z, r1
	TCCR1B=0;
    1c58:	ee e4       	ldi	r30, 0x4E	; 78
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	10 82       	st	Z, r1
	TCNT1=0;
    1c5e:	ec e4       	ldi	r30, 0x4C	; 76
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	11 82       	std	Z+1, r1	; 0x01
    1c64:	10 82       	st	Z, r1
	OCR1A=0;
    1c66:	ea e4       	ldi	r30, 0x4A	; 74
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	11 82       	std	Z+1, r1	; 0x01
    1c6c:	10 82       	st	Z, r1
	TIMSK=0;
    1c6e:	e9 e5       	ldi	r30, 0x59	; 89
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	10 82       	st	Z, r1

}
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <Timer1_setCallBack>:

/* Setting The Call Back For the Timer MOdule */

void Timer1_setCallBack(void(*a_ptr)(void))
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <Timer1_setCallBack+0x6>
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
	G_FuncPtr = a_ptr ;
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	90 93 d2 00 	sts	0x00D2, r25
    1c90:	80 93 d1 00 	sts	0x00D1, r24

}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <KEYPAD_getPressedKey+0x6>
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PINPUT);
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	40 e0       	ldi	r20, 0x00	; 0
    1cae:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1,PINPUT);
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2,PINPUT);
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	62 e0       	ldi	r22, 0x02	; 2
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PINPUT);
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	63 e0       	ldi	r22, 0x03	; 3
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PINPUT);
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	64 e0       	ldi	r22, 0x04	; 4
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1,PINPUT);
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	65 e0       	ldi	r22, 0x05	; 5
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2,PINPUT);
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	66 e0       	ldi	r22, 0x06	; 6
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PINPUT);
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	67 e0       	ldi	r22, 0x07	; 7
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1cf8:	19 82       	std	Y+1, r1	; 0x01
    1cfa:	35 c0       	rjmp	.+106    	; 0x1d66 <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,POUTPUT);
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	69 81       	ldd	r22, Y+1	; 0x01
    1d00:	41 e0       	ldi	r20, 0x01	; 1
    1d02:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	69 81       	ldd	r22, Y+1	; 0x01
    1d0a:	40 e0       	ldi	r20, 0x00	; 0
    1d0c:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d10:	1a 82       	std	Y+2, r1	; 0x02
    1d12:	1e c0       	rjmp	.+60     	; 0x1d50 <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	98 2f       	mov	r25, r24
    1d18:	9c 5f       	subi	r25, 0xFC	; 252
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	69 2f       	mov	r22, r25
    1d1e:	0e 94 87 07 	call	0xf0e	; 0xf0e <GPIO_readPin>
    1d22:	88 23       	and	r24, r24
    1d24:	91 f4       	brne	.+36     	; 0x1d4a <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	98 2f       	mov	r25, r24
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	89 0f       	add	r24, r25
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PINPUT);
		}
	}	
}
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,POUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	84 30       	cpi	r24, 0x04	; 4
    1d54:	f8 f2       	brcs	.-66     	; 0x1d14 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PINPUT);
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	69 81       	ldd	r22, Y+1	; 0x01
    1d5a:	40 e0       	ldi	r20, 0x00	; 0
    1d5c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PINPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	8f 5f       	subi	r24, 0xFF	; 255
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	84 30       	cpi	r24, 0x04	; 4
    1d6a:	40 f2       	brcs	.-112    	; 0x1cfc <KEYPAD_getPressedKey+0x5e>
    1d6c:	c5 cf       	rjmp	.-118    	; 0x1cf8 <KEYPAD_getPressedKey+0x5a>

00001d6e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d7c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	3c 83       	std	Y+4, r19	; 0x04
    1d86:	2b 83       	std	Y+3, r18	; 0x03
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	88 30       	cpi	r24, 0x08	; 8
    1d8e:	91 05       	cpc	r25, r1
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d92:	70 c0       	rjmp	.+224    	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d94:	2b 81       	ldd	r18, Y+3	; 0x03
    1d96:	3c 81       	ldd	r19, Y+4	; 0x04
    1d98:	29 30       	cpi	r18, 0x09	; 9
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	5c f5       	brge	.+86     	; 0x1df4 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	84 30       	cpi	r24, 0x04	; 4
    1da4:	91 05       	cpc	r25, r1
    1da6:	09 f4       	brne	.+2      	; 0x1daa <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1da8:	59 c0       	rjmp	.+178    	; 0x1e5c <KEYPAD_4x4_adjustKeyNumber+0xee>
    1daa:	2b 81       	ldd	r18, Y+3	; 0x03
    1dac:	3c 81       	ldd	r19, Y+4	; 0x04
    1dae:	25 30       	cpi	r18, 0x05	; 5
    1db0:	31 05       	cpc	r19, r1
    1db2:	9c f4       	brge	.+38     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	82 30       	cpi	r24, 0x02	; 2
    1dba:	91 05       	cpc	r25, r1
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1dbe:	48 c0       	rjmp	.+144    	; 0x1e50 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc4:	23 30       	cpi	r18, 0x03	; 3
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	0c f0       	brlt	.+2      	; 0x1dcc <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1dca:	45 c0       	rjmp	.+138    	; 0x1e56 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	81 30       	cpi	r24, 0x01	; 1
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1dd6:	39 c0       	rjmp	.+114    	; 0x1e4a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1dd8:	67 c0       	rjmp	.+206    	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1dda:	2b 81       	ldd	r18, Y+3	; 0x03
    1ddc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dde:	26 30       	cpi	r18, 0x06	; 6
    1de0:	31 05       	cpc	r19, r1
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1de4:	41 c0       	rjmp	.+130    	; 0x1e68 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	87 30       	cpi	r24, 0x07	; 7
    1dec:	91 05       	cpc	r25, r1
    1dee:	0c f0       	brlt	.+2      	; 0x1df2 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1df0:	3e c0       	rjmp	.+124    	; 0x1e6e <KEYPAD_4x4_adjustKeyNumber+0x100>
    1df2:	37 c0       	rjmp	.+110    	; 0x1e62 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1df4:	2b 81       	ldd	r18, Y+3	; 0x03
    1df6:	3c 81       	ldd	r19, Y+4	; 0x04
    1df8:	2c 30       	cpi	r18, 0x0C	; 12
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1dfe:	46 c0       	rjmp	.+140    	; 0x1e8c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	8d 30       	cpi	r24, 0x0D	; 13
    1e06:	91 05       	cpc	r25, r1
    1e08:	5c f4       	brge	.+22     	; 0x1e20 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0e:	2a 30       	cpi	r18, 0x0A	; 10
    1e10:	31 05       	cpc	r19, r1
    1e12:	b1 f1       	breq	.+108    	; 0x1e80 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	8b 30       	cpi	r24, 0x0B	; 11
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	a4 f5       	brge	.+104    	; 0x1e86 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e1e:	2d c0       	rjmp	.+90     	; 0x1e7a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e20:	2b 81       	ldd	r18, Y+3	; 0x03
    1e22:	3c 81       	ldd	r19, Y+4	; 0x04
    1e24:	2e 30       	cpi	r18, 0x0E	; 14
    1e26:	31 05       	cpc	r19, r1
    1e28:	b9 f1       	breq	.+110    	; 0x1e98 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	8e 30       	cpi	r24, 0x0E	; 14
    1e30:	91 05       	cpc	r25, r1
    1e32:	7c f1       	brlt	.+94     	; 0x1e92 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e34:	2b 81       	ldd	r18, Y+3	; 0x03
    1e36:	3c 81       	ldd	r19, Y+4	; 0x04
    1e38:	2f 30       	cpi	r18, 0x0F	; 15
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	79 f1       	breq	.+94     	; 0x1e9c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	80 31       	cpi	r24, 0x10	; 16
    1e44:	91 05       	cpc	r25, r1
    1e46:	69 f1       	breq	.+90     	; 0x1ea2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1e48:	2f c0       	rjmp	.+94     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1e4a:	87 e0       	ldi	r24, 0x07	; 7
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	2e c0       	rjmp	.+92     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1e50:	88 e0       	ldi	r24, 0x08	; 8
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	2b c0       	rjmp	.+86     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1e56:	89 e0       	ldi	r24, 0x09	; 9
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	28 c0       	rjmp	.+80     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1e5c:	85 e2       	ldi	r24, 0x25	; 37
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	25 c0       	rjmp	.+74     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1e62:	84 e0       	ldi	r24, 0x04	; 4
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	22 c0       	rjmp	.+68     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1e68:	85 e0       	ldi	r24, 0x05	; 5
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	1f c0       	rjmp	.+62     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1e6e:	86 e0       	ldi	r24, 0x06	; 6
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	1c c0       	rjmp	.+56     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1e74:	8a e2       	ldi	r24, 0x2A	; 42
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	19 c0       	rjmp	.+50     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	16 c0       	rjmp	.+44     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	13 c0       	rjmp	.+38     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1e86:	83 e0       	ldi	r24, 0x03	; 3
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	10 c0       	rjmp	.+32     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e8c:	8d e2       	ldi	r24, 0x2D	; 45
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	0d c0       	rjmp	.+26     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1e92:	8d e0       	ldi	r24, 0x0D	; 13
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	0a c0       	rjmp	.+20     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1e98:	19 82       	std	Y+1, r1	; 0x01
    1e9a:	08 c0       	rjmp	.+16     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1e9c:	8d e3       	ldi	r24, 0x3D	; 61
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	05 c0       	rjmp	.+10     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1ea2:	8b e2       	ldi	r24, 0x2B	; 43
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)

{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <UART_init+0x6>
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <UART_init+0x8>
    1ec4:	0f 92       	push	r0
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	9d 83       	std	Y+5, r25	; 0x05
    1ecc:	8c 83       	std	Y+4, r24	; 0x04
	uint16 ubrr_value = 0;
    1ece:	1b 82       	std	Y+3, r1	; 0x03
    1ed0:	1a 82       	std	Y+2, r1	; 0x02
	uint8  Ucsrc_value= 0;
    1ed2:	19 82       	std	Y+1, r1	; 0x01


	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1ed4:	eb e2       	ldi	r30, 0x2B	; 43
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1edc:	ea e2       	ldi	r30, 0x2A	; 42
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	88 e1       	ldi	r24, 0x18	; 24
    1ee2:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr->bit_data << 1 ) | (Config_Ptr->parity << 4 ) | (Config_Ptr->stopbit<<3) ;
    1ee4:	a0 e4       	ldi	r26, 0x40	; 64
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	ec 81       	ldd	r30, Y+4	; 0x04
    1eea:	fd 81       	ldd	r31, Y+5	; 0x05
    1eec:	80 81       	ld	r24, Z
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	20 68       	ori	r18, 0x80	; 128
    1efa:	ec 81       	ldd	r30, Y+4	; 0x04
    1efc:	fd 81       	ldd	r31, Y+5	; 0x05
    1efe:	81 81       	ldd	r24, Z+1	; 0x01
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	82 95       	swap	r24
    1f06:	92 95       	swap	r25
    1f08:	90 7f       	andi	r25, 0xF0	; 240
    1f0a:	98 27       	eor	r25, r24
    1f0c:	80 7f       	andi	r24, 0xF0	; 240
    1f0e:	98 27       	eor	r25, r24
    1f10:	28 2b       	or	r18, r24
    1f12:	ec 81       	ldd	r30, Y+4	; 0x04
    1f14:	fd 81       	ldd	r31, Y+5	; 0x05
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	88 2f       	mov	r24, r24
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	82 2b       	or	r24, r18
    1f2a:	8c 93       	st	X, r24
	//UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baudrate * 8UL))) - 1);
    1f2c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f2e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f30:	83 81       	ldd	r24, Z+3	; 0x03
    1f32:	94 81       	ldd	r25, Z+4	; 0x04
    1f34:	cc 01       	movw	r24, r24
    1f36:	a0 e0       	ldi	r26, 0x00	; 0
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	aa 1f       	adc	r26, r26
    1f40:	bb 1f       	adc	r27, r27
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	aa 1f       	adc	r26, r26
    1f48:	bb 1f       	adc	r27, r27
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	aa 1f       	adc	r26, r26
    1f50:	bb 1f       	adc	r27, r27
    1f52:	9c 01       	movw	r18, r24
    1f54:	ad 01       	movw	r20, r26
    1f56:	80 e4       	ldi	r24, 0x40	; 64
    1f58:	92 e4       	ldi	r25, 0x42	; 66
    1f5a:	af e0       	ldi	r26, 0x0F	; 15
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__udivmodsi4>
    1f66:	da 01       	movw	r26, r20
    1f68:	c9 01       	movw	r24, r18
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	9b 83       	std	Y+3, r25	; 0x03
    1f6e:	8a 83       	std	Y+2, r24	; 0x02

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1f70:	e0 e4       	ldi	r30, 0x40	; 64
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	9b 81       	ldd	r25, Y+3	; 0x03
    1f78:	89 2f       	mov	r24, r25
    1f7a:	99 27       	eor	r25, r25
    1f7c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1f7e:	e9 e2       	ldi	r30, 0x29	; 41
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	80 83       	st	Z, r24
}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	0f 92       	push	r0
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1fa2:	eb e2       	ldi	r30, 0x2B	; 43
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	80 72       	andi	r24, 0x20	; 32
    1fae:	90 70       	andi	r25, 0x00	; 0
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	b9 f3       	breq	.-18     	; 0x1fa2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1fb4:	ec e2       	ldi	r30, 0x2C	; 44
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1fbc:	0f 90       	pop	r0
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1fcc:	eb e2       	ldi	r30, 0x2B	; 43
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 23       	and	r24, r24
    1fd4:	dc f7       	brge	.-10     	; 0x1fcc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1fd6:	ec e2       	ldi	r30, 0x2C	; 44
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
}
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <UART_sendString+0x6>
    1fe8:	0f 92       	push	r0
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	9b 83       	std	Y+3, r25	; 0x03
    1ff0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ff2:	19 82       	std	Y+1, r1	; 0x01
    1ff4:	0e c0       	rjmp	.+28     	; 0x2012 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    2000:	fc 01       	movw	r30, r24
    2002:	e2 0f       	add	r30, r18
    2004:	f3 1f       	adc	r31, r19
    2006:	80 81       	ld	r24, Z
    2008:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <UART_sendByte>
		i++;
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	8f 5f       	subi	r24, 0xFF	; 255
    2010:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	9b 81       	ldd	r25, Y+3	; 0x03
    201c:	fc 01       	movw	r30, r24
    201e:	e2 0f       	add	r30, r18
    2020:	f3 1f       	adc	r31, r19
    2022:	80 81       	ld	r24, Z
    2024:	88 23       	and	r24, r24
    2026:	39 f7       	brne	.-50     	; 0x1ff6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	00 d0       	rcall	.+0      	; 0x203e <UART_receiveString+0xa>
    203e:	0f 92       	push	r0
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	9b 83       	std	Y+3, r25	; 0x03
    2046:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2048:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	28 2f       	mov	r18, r24
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	9b 81       	ldd	r25, Y+3	; 0x03
    2054:	8c 01       	movw	r16, r24
    2056:	02 0f       	add	r16, r18
    2058:	13 1f       	adc	r17, r19
    205a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <UART_recieveByte>
    205e:	f8 01       	movw	r30, r16
    2060:	80 83       	st	Z, r24
    2062:	0f c0       	rjmp	.+30     	; 0x2082 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	8f 5f       	subi	r24, 0xFF	; 255
    2068:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	9b 81       	ldd	r25, Y+3	; 0x03
    2074:	8c 01       	movw	r16, r24
    2076:	02 0f       	add	r16, r18
    2078:	13 1f       	adc	r17, r19
    207a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <UART_recieveByte>
    207e:	f8 01       	movw	r30, r16
    2080:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	9b 81       	ldd	r25, Y+3	; 0x03
    208c:	fc 01       	movw	r30, r24
    208e:	e2 0f       	add	r30, r18
    2090:	f3 1f       	adc	r31, r19
    2092:	80 81       	ld	r24, Z
    2094:	83 32       	cpi	r24, 0x23	; 35
    2096:	31 f7       	brne	.-52     	; 0x2064 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	9b 81       	ldd	r25, Y+3	; 0x03
    20a2:	fc 01       	movw	r30, r24
    20a4:	e2 0f       	add	r30, r18
    20a6:	f3 1f       	adc	r31, r19
    20a8:	10 82       	st	Z, r1
}
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	08 95       	ret

000020ba <__udivmodsi4>:
    20ba:	a1 e2       	ldi	r26, 0x21	; 33
    20bc:	1a 2e       	mov	r1, r26
    20be:	aa 1b       	sub	r26, r26
    20c0:	bb 1b       	sub	r27, r27
    20c2:	fd 01       	movw	r30, r26
    20c4:	0d c0       	rjmp	.+26     	; 0x20e0 <__udivmodsi4_ep>

000020c6 <__udivmodsi4_loop>:
    20c6:	aa 1f       	adc	r26, r26
    20c8:	bb 1f       	adc	r27, r27
    20ca:	ee 1f       	adc	r30, r30
    20cc:	ff 1f       	adc	r31, r31
    20ce:	a2 17       	cp	r26, r18
    20d0:	b3 07       	cpc	r27, r19
    20d2:	e4 07       	cpc	r30, r20
    20d4:	f5 07       	cpc	r31, r21
    20d6:	20 f0       	brcs	.+8      	; 0x20e0 <__udivmodsi4_ep>
    20d8:	a2 1b       	sub	r26, r18
    20da:	b3 0b       	sbc	r27, r19
    20dc:	e4 0b       	sbc	r30, r20
    20de:	f5 0b       	sbc	r31, r21

000020e0 <__udivmodsi4_ep>:
    20e0:	66 1f       	adc	r22, r22
    20e2:	77 1f       	adc	r23, r23
    20e4:	88 1f       	adc	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	1a 94       	dec	r1
    20ea:	69 f7       	brne	.-38     	; 0x20c6 <__udivmodsi4_loop>
    20ec:	60 95       	com	r22
    20ee:	70 95       	com	r23
    20f0:	80 95       	com	r24
    20f2:	90 95       	com	r25
    20f4:	9b 01       	movw	r18, r22
    20f6:	ac 01       	movw	r20, r24
    20f8:	bd 01       	movw	r22, r26
    20fa:	cf 01       	movw	r24, r30
    20fc:	08 95       	ret

000020fe <__prologue_saves__>:
    20fe:	2f 92       	push	r2
    2100:	3f 92       	push	r3
    2102:	4f 92       	push	r4
    2104:	5f 92       	push	r5
    2106:	6f 92       	push	r6
    2108:	7f 92       	push	r7
    210a:	8f 92       	push	r8
    210c:	9f 92       	push	r9
    210e:	af 92       	push	r10
    2110:	bf 92       	push	r11
    2112:	cf 92       	push	r12
    2114:	df 92       	push	r13
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	ca 1b       	sub	r28, r26
    2128:	db 0b       	sbc	r29, r27
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	09 94       	ijmp

00002136 <__epilogue_restores__>:
    2136:	2a 88       	ldd	r2, Y+18	; 0x12
    2138:	39 88       	ldd	r3, Y+17	; 0x11
    213a:	48 88       	ldd	r4, Y+16	; 0x10
    213c:	5f 84       	ldd	r5, Y+15	; 0x0f
    213e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2140:	7d 84       	ldd	r7, Y+13	; 0x0d
    2142:	8c 84       	ldd	r8, Y+12	; 0x0c
    2144:	9b 84       	ldd	r9, Y+11	; 0x0b
    2146:	aa 84       	ldd	r10, Y+10	; 0x0a
    2148:	b9 84       	ldd	r11, Y+9	; 0x09
    214a:	c8 84       	ldd	r12, Y+8	; 0x08
    214c:	df 80       	ldd	r13, Y+7	; 0x07
    214e:	ee 80       	ldd	r14, Y+6	; 0x06
    2150:	fd 80       	ldd	r15, Y+5	; 0x05
    2152:	0c 81       	ldd	r16, Y+4	; 0x04
    2154:	1b 81       	ldd	r17, Y+3	; 0x03
    2156:	aa 81       	ldd	r26, Y+2	; 0x02
    2158:	b9 81       	ldd	r27, Y+1	; 0x01
    215a:	ce 0f       	add	r28, r30
    215c:	d1 1d       	adc	r29, r1
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	ed 01       	movw	r28, r26
    216a:	08 95       	ret

0000216c <itoa>:
    216c:	fb 01       	movw	r30, r22
    216e:	9f 01       	movw	r18, r30
    2170:	e8 94       	clt
    2172:	42 30       	cpi	r20, 0x02	; 2
    2174:	c4 f0       	brlt	.+48     	; 0x21a6 <itoa+0x3a>
    2176:	45 32       	cpi	r20, 0x25	; 37
    2178:	b4 f4       	brge	.+44     	; 0x21a6 <itoa+0x3a>
    217a:	4a 30       	cpi	r20, 0x0A	; 10
    217c:	29 f4       	brne	.+10     	; 0x2188 <itoa+0x1c>
    217e:	97 fb       	bst	r25, 7
    2180:	1e f4       	brtc	.+6      	; 0x2188 <itoa+0x1c>
    2182:	90 95       	com	r25
    2184:	81 95       	neg	r24
    2186:	9f 4f       	sbci	r25, 0xFF	; 255
    2188:	64 2f       	mov	r22, r20
    218a:	77 27       	eor	r23, r23
    218c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__udivmodhi4>
    2190:	80 5d       	subi	r24, 0xD0	; 208
    2192:	8a 33       	cpi	r24, 0x3A	; 58
    2194:	0c f0       	brlt	.+2      	; 0x2198 <itoa+0x2c>
    2196:	89 5d       	subi	r24, 0xD9	; 217
    2198:	81 93       	st	Z+, r24
    219a:	cb 01       	movw	r24, r22
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	a1 f7       	brne	.-24     	; 0x2188 <itoa+0x1c>
    21a0:	16 f4       	brtc	.+4      	; 0x21a6 <itoa+0x3a>
    21a2:	5d e2       	ldi	r21, 0x2D	; 45
    21a4:	51 93       	st	Z+, r21
    21a6:	10 82       	st	Z, r1
    21a8:	c9 01       	movw	r24, r18
    21aa:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <strrev>

000021ae <strrev>:
    21ae:	dc 01       	movw	r26, r24
    21b0:	fc 01       	movw	r30, r24
    21b2:	67 2f       	mov	r22, r23
    21b4:	71 91       	ld	r23, Z+
    21b6:	77 23       	and	r23, r23
    21b8:	e1 f7       	brne	.-8      	; 0x21b2 <strrev+0x4>
    21ba:	32 97       	sbiw	r30, 0x02	; 2
    21bc:	04 c0       	rjmp	.+8      	; 0x21c6 <strrev+0x18>
    21be:	7c 91       	ld	r23, X
    21c0:	6d 93       	st	X+, r22
    21c2:	70 83       	st	Z, r23
    21c4:	62 91       	ld	r22, -Z
    21c6:	ae 17       	cp	r26, r30
    21c8:	bf 07       	cpc	r27, r31
    21ca:	c8 f3       	brcs	.-14     	; 0x21be <strrev+0x10>
    21cc:	08 95       	ret

000021ce <__udivmodhi4>:
    21ce:	aa 1b       	sub	r26, r26
    21d0:	bb 1b       	sub	r27, r27
    21d2:	51 e1       	ldi	r21, 0x11	; 17
    21d4:	07 c0       	rjmp	.+14     	; 0x21e4 <__udivmodhi4_ep>

000021d6 <__udivmodhi4_loop>:
    21d6:	aa 1f       	adc	r26, r26
    21d8:	bb 1f       	adc	r27, r27
    21da:	a6 17       	cp	r26, r22
    21dc:	b7 07       	cpc	r27, r23
    21de:	10 f0       	brcs	.+4      	; 0x21e4 <__udivmodhi4_ep>
    21e0:	a6 1b       	sub	r26, r22
    21e2:	b7 0b       	sbc	r27, r23

000021e4 <__udivmodhi4_ep>:
    21e4:	88 1f       	adc	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	5a 95       	dec	r21
    21ea:	a9 f7       	brne	.-22     	; 0x21d6 <__udivmodhi4_loop>
    21ec:	80 95       	com	r24
    21ee:	90 95       	com	r25
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	08 95       	ret

000021f6 <_exit>:
    21f6:	f8 94       	cli

000021f8 <__stop_program>:
    21f8:	ff cf       	rjmp	.-2      	; 0x21f8 <__stop_program>
